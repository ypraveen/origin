// Code generated by protoc-gen-go.
// source: common.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AviObjectType int32

const (
	// ------------------------------
	AviObjectType_VIRTUALSERVICE                AviObjectType = 1001
	AviObjectType_POOL                          AviObjectType = 1002
	AviObjectType_HEALTHMONITOR                 AviObjectType = 1003
	AviObjectType_NETWORKPROFILE                AviObjectType = 1004
	AviObjectType_APPLICATIONPROFILE            AviObjectType = 1005
	AviObjectType_HTTPPOLICYSET                 AviObjectType = 1006
	AviObjectType_IPADDRGROUP                   AviObjectType = 1009
	AviObjectType_STRINGGROUP                   AviObjectType = 1010
	AviObjectType_SSLPROFILE                    AviObjectType = 1011
	AviObjectType_SSLKEYANDCERTIFICATE          AviObjectType = 1012
	AviObjectType_NETWORKSECURITYPOLICY         AviObjectType = 1013
	AviObjectType_APPLICATIONPERSISTENCEPROFILE AviObjectType = 1014
	AviObjectType_ANALYTICSPROFILE              AviObjectType = 1015
	AviObjectType_VSDATASCRIPTSET               AviObjectType = 1016
	AviObjectType_TENANT                        AviObjectType = 1017
	AviObjectType_PKIPROFILE                    AviObjectType = 1018
	AviObjectType_AUTHPROFILE                   AviObjectType = 1019
	AviObjectType_CLOUD                         AviObjectType = 1020
	AviObjectType_SERVERAUTOSCALEPOLICY         AviObjectType = 1021
	AviObjectType_AUTOSCALELAUNCHCONFIG         AviObjectType = 1022
	AviObjectType_MICROSERVICEGROUP             AviObjectType = 1023
	AviObjectType_IPAMPROFILE                   AviObjectType = 1024
	AviObjectType_HARDWARESECURITYMODULEGROUP   AviObjectType = 1025
	// ------------------------------
	AviObjectType_SERVICEENGINE        AviObjectType = 1500
	AviObjectType_DEBUGSERVICEENGINE   AviObjectType = 1501
	AviObjectType_DEBUGCONTROLLER      AviObjectType = 1502
	AviObjectType_DEBUGVIRTUALSERVICE  AviObjectType = 1503
	AviObjectType_SERVICEENGINEGROUP   AviObjectType = 1504
	AviObjectType_SEPROPERTIES         AviObjectType = 1505
	AviObjectType_NETWORK              AviObjectType = 1506
	AviObjectType_CONTROLLERNODE       AviObjectType = 1507
	AviObjectType_CONTROLLERPROPERTIES AviObjectType = 1508
	AviObjectType_SYSTEMCONFIGURATION  AviObjectType = 1509
	AviObjectType_VRFCONTEXT           AviObjectType = 1510
	AviObjectType_USER                 AviObjectType = 1511
	AviObjectType_ALERTCONFIG          AviObjectType = 1512
	AviObjectType_ALERTSYSLOGCONFIG    AviObjectType = 1513
	AviObjectType_ALERTEMAILCONFIG     AviObjectType = 1514
	AviObjectType_ALERTTYPECONFIG      AviObjectType = 1515
	AviObjectType_APPLICATION          AviObjectType = 1516
	AviObjectType_ROLE                 AviObjectType = 1517
	AviObjectType_CLOUDPROPERTIES      AviObjectType = 1518
	AviObjectType_SNMPTRAPPROFILE      AviObjectType = 1519
	AviObjectType_ACTIONGROUPPROFILE   AviObjectType = 1520
	AviObjectType_MICROSERVICE         AviObjectType = 1521
	AviObjectType_ALERTPARAMS          AviObjectType = 1522
	// ------------------------------
	AviObjectType_TCPSTATRUNTIME                        AviObjectType = 2001
	AviObjectType_UDPSTATRUNTIME                        AviObjectType = 2017
	AviObjectType_IPSTATRUNTIME                         AviObjectType = 2018
	AviObjectType_ARPSTATRUNTIME                        AviObjectType = 2019
	AviObjectType_MBSTATRUNTIME                         AviObjectType = 2020
	AviObjectType_IPSTKQSTATSRUNTIME                    AviObjectType = 2021
	AviObjectType_MALLOCSTATRUNTIME                     AviObjectType = 2022
	AviObjectType_SHMALLOCSTATRUNTIME                   AviObjectType = 2023
	AviObjectType_CPUUSAGERUNTIME                       AviObjectType = 2024
	AviObjectType_L7GLOBALSTATSRUNTIME                  AviObjectType = 2025
	AviObjectType_L7VIRTUALSERVICESTATSRUNTIME          AviObjectType = 2026
	AviObjectType_SEAGENTVNICDBRUNTIME                  AviObjectType = 2027
	AviObjectType_SEAGENTGRAPHDBRUNTIME                 AviObjectType = 2028
	AviObjectType_SEAGENTSTATERUNTIME                   AviObjectType = 2029
	AviObjectType_INTERFACERUNTIME                      AviObjectType = 2030
	AviObjectType_ARPTABLERUNTIME                       AviObjectType = 2031
	AviObjectType_DISPATCHERSTATRUNTIME                 AviObjectType = 2032
	AviObjectType_DISPATCHERSTATCLEARRUNTIME            AviObjectType = 2033
	AviObjectType_DISPATCHERTABLEDUMPRUNTIME            AviObjectType = 2034
	AviObjectType_DISPATCHERREMOTETIMERLISTDUMPRUNTIME  AviObjectType = 2035
	AviObjectType_METRICSAGENTMESSAGE                   AviObjectType = 2036
	AviObjectType_HEALTHMONITORSTATRUNTIME              AviObjectType = 2037
	AviObjectType_METRICSENTITYRUNTIME                  AviObjectType = 2038
	AviObjectType_PERSISTENCEINTERNAL                   AviObjectType = 2039
	AviObjectType_HTTPPOLICYSETINTERNAL                 AviObjectType = 2040
	AviObjectType_CONNECTIONDUMPRUNTIME                 AviObjectType = 2043
	AviObjectType_SHAREDDBSTATS                         AviObjectType = 2044
	AviObjectType_SHAREDDBSTATSCLEAR                    AviObjectType = 2045
	AviObjectType_ICMPSTATRUNTIME                       AviObjectType = 2046
	AviObjectType_ROUTETABLERUNTIME                     AviObjectType = 2047
	AviObjectType_VIRTUALMACHINE                        AviObjectType = 2048
	AviObjectType_POOLSERVER                            AviObjectType = 2049
	AviObjectType_SEVSLIST                              AviObjectType = 2050
	AviObjectType_MEMINFORUNTIME                        AviObjectType = 2051
	AviObjectType_RTERINGSTATRUNTIME                    AviObjectType = 2052
	AviObjectType_ALGOSTATRUNTIME                       AviObjectType = 2053
	AviObjectType_HEALTHMONITORRUNTIME                  AviObjectType = 2054
	AviObjectType_CPUSTATRUNTIME                        AviObjectType = 2055
	AviObjectType_SEVM                                  AviObjectType = 2056
	AviObjectType_HOST                                  AviObjectType = 2057
	AviObjectType_PORTGROUP                             AviObjectType = 2058
	AviObjectType_CLUSTER                               AviObjectType = 2059
	AviObjectType_DATACENTER                            AviObjectType = 2060
	AviObjectType_VCENTER                               AviObjectType = 2061
	AviObjectType_HTTPPOLICYSETSTATS                    AviObjectType = 2062
	AviObjectType_METRICSSESTATS                        AviObjectType = 2065
	AviObjectType_RATELIMITERSTATRUNTIME                AviObjectType = 2066
	AviObjectType_NETWORKSECURITYPOLICYSTATS            AviObjectType = 2067
	AviObjectType_TCPCONNRUNTIME                        AviObjectType = 2068
	AviObjectType_POOLSTATS                             AviObjectType = 2069
	AviObjectType_CONNPOOLINTERNAL                      AviObjectType = 2070
	AviObjectType_CONNPOOLSTATS                         AviObjectType = 2071
	AviObjectType_VSHASHSHOWRUNTIME                     AviObjectType = 2072
	AviObjectType_SELOGSTATSRUNTIME                     AviObjectType = 2073
	AviObjectType_NETWORKSECURITYPOLICYDETAIL           AviObjectType = 2074
	AviObjectType_LICENSERUNTIME                        AviObjectType = 2075
	AviObjectType_SERVERRUNTIME                         AviObjectType = 2076
	AviObjectType_METRICSRUNTIMESUMMARY                 AviObjectType = 2077
	AviObjectType_METRICSRUNTIMEDETAIL                  AviObjectType = 2078
	AviObjectType_DISPATCHERSEHMPROBETEMPDISABLERUNTIME AviObjectType = 2079
	AviObjectType_POOLDEBUG                             AviObjectType = 2080
	AviObjectType_VSLOGMGRMAP                           AviObjectType = 2081
	AviObjectType_SERUMINSERTIONSTATS                   AviObjectType = 2082
	AviObjectType_HTTPCACHE                             AviObjectType = 2083
	AviObjectType_HTTPCACHESTATS                        AviObjectType = 2084
	AviObjectType_SEDOSSTATRUNTIME                      AviObjectType = 2085
	AviObjectType_VSDOSSTATRUNTIME                      AviObjectType = 2086
	AviObjectType_SERVERUPDATEREQ                       AviObjectType = 2087
	AviObjectType_VSSCALEOUTLIST                        AviObjectType = 2088
	AviObjectType_SEMEMDISTRUNTIME                      AviObjectType = 2089
	AviObjectType_TCPCONNRUNTIMEDETAIL                  AviObjectType = 2090
	AviObjectType_SEUPGRADESTATUS                       AviObjectType = 2091
	AviObjectType_SEUPGRADEPREVIEW                      AviObjectType = 2092
	AviObjectType_SEFAULTINJECTEXHAUSTM                 AviObjectType = 2093
	AviObjectType_SEFAULTINJECTEXHAUSTMCL               AviObjectType = 2094
	AviObjectType_SEFAULTINJECTEXHAUSTMCLSMALL          AviObjectType = 2095
	AviObjectType_SEFAULTINJECTEXHAUSTCONN              AviObjectType = 2096
	AviObjectType_SEHEADLESSONLINEREQ                   AviObjectType = 2097
	AviObjectType_SEUPGRADE                             AviObjectType = 2098
	AviObjectType_SEUPGRADESTATUSDETAIL                 AviObjectType = 2099
	AviObjectType_SERESERVEDVS                          AviObjectType = 2100
	AviObjectType_SERESERVEDVSCLEAR                     AviObjectType = 2101
	AviObjectType_VSCANDIDATESEHOSTLIST                 AviObjectType = 2102
	AviObjectType_SEGROUPUPGRADE                        AviObjectType = 2103
	AviObjectType_REBALANCE                             AviObjectType = 2104
	AviObjectType_SEGROUPREBALANCE                      AviObjectType = 2105
	AviObjectType_SEAUTHSTATSRUNTIME                    AviObjectType = 2106
	AviObjectType_AUTOSCALESTATE                        AviObjectType = 2107
	AviObjectType_VIRTUALSERVICEAUTHSTATS               AviObjectType = 2108
	AviObjectType_NETWORKSECURITYPOLICYDOS              AviObjectType = 2109
	AviObjectType_KEYVALINTERNAL                        AviObjectType = 2110
	AviObjectType_KEYVALSUMMARYINTERNAL                 AviObjectType = 2111
	AviObjectType_SERVERSTATEUPDATEINFO                 AviObjectType = 2112
	AviObjectType_CLTRACKINTERNAL                       AviObjectType = 2113
	AviObjectType_CLTRACKSUMMARYINTERNAL                AviObjectType = 2114
	AviObjectType_MICROSERVICERUNTIME                   AviObjectType = 2115
	AviObjectType_SEMICROSERVICE                        AviObjectType = 2116
	AviObjectType_VIRTUALSERVICEANALYSIS                AviObjectType = 2117
	AviObjectType_CLIENTINTERNAL                        AviObjectType = 2118
	AviObjectType_CLIENTSUMMARYINTERNAL                 AviObjectType = 2119
	AviObjectType_MICROSERVICEGROUPRUNTIME              AviObjectType = 2120
	// ------------------------------
	AviObjectType_SERESOURCEPROTO          AviObjectType = 3001
	AviObjectType_SECONSUMERPROTO          AviObjectType = 3002
	AviObjectType_SECREATEPENDINGPROTO     AviObjectType = 3003
	AviObjectType_SEUNIADMININFO           AviObjectType = 3004
	AviObjectType_SEVIPPROTO               AviObjectType = 3005
	AviObjectType_RMVRFPROTO               AviObjectType = 3006
	AviObjectType_VCENTERMAP               AviObjectType = 3007
	AviObjectType_VIMGRVCENTERRUNTIME      AviObjectType = 3008
	AviObjectType_INTERESTEDVMS            AviObjectType = 3009
	AviObjectType_INTERESTEDHOSTS          AviObjectType = 3010
	AviObjectType_VCENTERSUPPORTEDCOUNTERS AviObjectType = 3011
	AviObjectType_ENTITYCOUNTERS           AviObjectType = 3012
	AviObjectType_TRANSACTIONSTATS         AviObjectType = 3013
	AviObjectType_SEVMCREATEPROGRESS       AviObjectType = 3014
	AviObjectType_PLACEMENTSTATUS          AviObjectType = 3015
	AviObjectType_VISUBFOLDERS             AviObjectType = 3016
	AviObjectType_VIDATASTORE              AviObjectType = 3017
	AviObjectType_VIHOSTRESOURCES          AviObjectType = 3018
	AviObjectType_CLOUDCONNECTOR           AviObjectType = 3020
	AviObjectType_VINETWORKSUBNETVMS       AviObjectType = 3021
	AviObjectType_VIDATASTORECONTENTS      AviObjectType = 3022
	// ---------------------------------
	//   APIC specific objects
	// ---------------------------------
	AviObjectType_APICCONFIGURATION AviObjectType = 3050
	AviObjectType_CIFTABLE          AviObjectType = 3051
	AviObjectType_APICTRANSACTION   AviObjectType = 3502
	// ---------------------------------
	//  Cache Objects
	// ---------------------------------
	AviObjectType_VIRTUALSERVICESTATEDBCACHESUMMARY AviObjectType = 3503
	AviObjectType_POOLSTATEDBCACHESUMMARY           AviObjectType = 3504
	AviObjectType_SERVERSTATEDBCACHESUMMARY         AviObjectType = 3505
	AviObjectType_APICAGENTINTERNAL                 AviObjectType = 3506
	AviObjectType_APICTRANSACTIONFLAP               AviObjectType = 3507
	AviObjectType_APICGRAPHINSTANCES                AviObjectType = 3508
	AviObjectType_APICEPGS                          AviObjectType = 3509
	AviObjectType_APICEPGEPS                        AviObjectType = 3510
	AviObjectType_APICDEVICEPKGVER                  AviObjectType = 3511
	AviObjectType_APICTENANTS                       AviObjectType = 3512
	AviObjectType_APICVMMDOMAINS                    AviObjectType = 3513
	// ------------------------------
	AviObjectType_MAXOBJECTS AviObjectType = 4000
)

var AviObjectType_name = map[int32]string{
	1001: "VIRTUALSERVICE",
	1002: "POOL",
	1003: "HEALTHMONITOR",
	1004: "NETWORKPROFILE",
	1005: "APPLICATIONPROFILE",
	1006: "HTTPPOLICYSET",
	1009: "IPADDRGROUP",
	1010: "STRINGGROUP",
	1011: "SSLPROFILE",
	1012: "SSLKEYANDCERTIFICATE",
	1013: "NETWORKSECURITYPOLICY",
	1014: "APPLICATIONPERSISTENCEPROFILE",
	1015: "ANALYTICSPROFILE",
	1016: "VSDATASCRIPTSET",
	1017: "TENANT",
	1018: "PKIPROFILE",
	1019: "AUTHPROFILE",
	1020: "CLOUD",
	1021: "SERVERAUTOSCALEPOLICY",
	1022: "AUTOSCALELAUNCHCONFIG",
	1023: "MICROSERVICEGROUP",
	1024: "IPAMPROFILE",
	1025: "HARDWARESECURITYMODULEGROUP",
	1500: "SERVICEENGINE",
	1501: "DEBUGSERVICEENGINE",
	1502: "DEBUGCONTROLLER",
	1503: "DEBUGVIRTUALSERVICE",
	1504: "SERVICEENGINEGROUP",
	1505: "SEPROPERTIES",
	1506: "NETWORK",
	1507: "CONTROLLERNODE",
	1508: "CONTROLLERPROPERTIES",
	1509: "SYSTEMCONFIGURATION",
	1510: "VRFCONTEXT",
	1511: "USER",
	1512: "ALERTCONFIG",
	1513: "ALERTSYSLOGCONFIG",
	1514: "ALERTEMAILCONFIG",
	1515: "ALERTTYPECONFIG",
	1516: "APPLICATION",
	1517: "ROLE",
	1518: "CLOUDPROPERTIES",
	1519: "SNMPTRAPPROFILE",
	1520: "ACTIONGROUPPROFILE",
	1521: "MICROSERVICE",
	1522: "ALERTPARAMS",
	2001: "TCPSTATRUNTIME",
	2017: "UDPSTATRUNTIME",
	2018: "IPSTATRUNTIME",
	2019: "ARPSTATRUNTIME",
	2020: "MBSTATRUNTIME",
	2021: "IPSTKQSTATSRUNTIME",
	2022: "MALLOCSTATRUNTIME",
	2023: "SHMALLOCSTATRUNTIME",
	2024: "CPUUSAGERUNTIME",
	2025: "L7GLOBALSTATSRUNTIME",
	2026: "L7VIRTUALSERVICESTATSRUNTIME",
	2027: "SEAGENTVNICDBRUNTIME",
	2028: "SEAGENTGRAPHDBRUNTIME",
	2029: "SEAGENTSTATERUNTIME",
	2030: "INTERFACERUNTIME",
	2031: "ARPTABLERUNTIME",
	2032: "DISPATCHERSTATRUNTIME",
	2033: "DISPATCHERSTATCLEARRUNTIME",
	2034: "DISPATCHERTABLEDUMPRUNTIME",
	2035: "DISPATCHERREMOTETIMERLISTDUMPRUNTIME",
	2036: "METRICSAGENTMESSAGE",
	2037: "HEALTHMONITORSTATRUNTIME",
	2038: "METRICSENTITYRUNTIME",
	2039: "PERSISTENCEINTERNAL",
	2040: "HTTPPOLICYSETINTERNAL",
	2043: "CONNECTIONDUMPRUNTIME",
	2044: "SHAREDDBSTATS",
	2045: "SHAREDDBSTATSCLEAR",
	2046: "ICMPSTATRUNTIME",
	2047: "ROUTETABLERUNTIME",
	2048: "VIRTUALMACHINE",
	2049: "POOLSERVER",
	2050: "SEVSLIST",
	2051: "MEMINFORUNTIME",
	2052: "RTERINGSTATRUNTIME",
	2053: "ALGOSTATRUNTIME",
	2054: "HEALTHMONITORRUNTIME",
	2055: "CPUSTATRUNTIME",
	2056: "SEVM",
	2057: "HOST",
	2058: "PORTGROUP",
	2059: "CLUSTER",
	2060: "DATACENTER",
	2061: "VCENTER",
	2062: "HTTPPOLICYSETSTATS",
	2065: "METRICSSESTATS",
	2066: "RATELIMITERSTATRUNTIME",
	2067: "NETWORKSECURITYPOLICYSTATS",
	2068: "TCPCONNRUNTIME",
	2069: "POOLSTATS",
	2070: "CONNPOOLINTERNAL",
	2071: "CONNPOOLSTATS",
	2072: "VSHASHSHOWRUNTIME",
	2073: "SELOGSTATSRUNTIME",
	2074: "NETWORKSECURITYPOLICYDETAIL",
	2075: "LICENSERUNTIME",
	2076: "SERVERRUNTIME",
	2077: "METRICSRUNTIMESUMMARY",
	2078: "METRICSRUNTIMEDETAIL",
	2079: "DISPATCHERSEHMPROBETEMPDISABLERUNTIME",
	2080: "POOLDEBUG",
	2081: "VSLOGMGRMAP",
	2082: "SERUMINSERTIONSTATS",
	2083: "HTTPCACHE",
	2084: "HTTPCACHESTATS",
	2085: "SEDOSSTATRUNTIME",
	2086: "VSDOSSTATRUNTIME",
	2087: "SERVERUPDATEREQ",
	2088: "VSSCALEOUTLIST",
	2089: "SEMEMDISTRUNTIME",
	2090: "TCPCONNRUNTIMEDETAIL",
	2091: "SEUPGRADESTATUS",
	2092: "SEUPGRADEPREVIEW",
	2093: "SEFAULTINJECTEXHAUSTM",
	2094: "SEFAULTINJECTEXHAUSTMCL",
	2095: "SEFAULTINJECTEXHAUSTMCLSMALL",
	2096: "SEFAULTINJECTEXHAUSTCONN",
	2097: "SEHEADLESSONLINEREQ",
	2098: "SEUPGRADE",
	2099: "SEUPGRADESTATUSDETAIL",
	2100: "SERESERVEDVS",
	2101: "SERESERVEDVSCLEAR",
	2102: "VSCANDIDATESEHOSTLIST",
	2103: "SEGROUPUPGRADE",
	2104: "REBALANCE",
	2105: "SEGROUPREBALANCE",
	2106: "SEAUTHSTATSRUNTIME",
	2107: "AUTOSCALESTATE",
	2108: "VIRTUALSERVICEAUTHSTATS",
	2109: "NETWORKSECURITYPOLICYDOS",
	2110: "KEYVALINTERNAL",
	2111: "KEYVALSUMMARYINTERNAL",
	2112: "SERVERSTATEUPDATEINFO",
	2113: "CLTRACKINTERNAL",
	2114: "CLTRACKSUMMARYINTERNAL",
	2115: "MICROSERVICERUNTIME",
	2116: "SEMICROSERVICE",
	2117: "VIRTUALSERVICEANALYSIS",
	2118: "CLIENTINTERNAL",
	2119: "CLIENTSUMMARYINTERNAL",
	2120: "MICROSERVICEGROUPRUNTIME",
	3001: "SERESOURCEPROTO",
	3002: "SECONSUMERPROTO",
	3003: "SECREATEPENDINGPROTO",
	3004: "SEUNIADMININFO",
	3005: "SEVIPPROTO",
	3006: "RMVRFPROTO",
	3007: "VCENTERMAP",
	3008: "VIMGRVCENTERRUNTIME",
	3009: "INTERESTEDVMS",
	3010: "INTERESTEDHOSTS",
	3011: "VCENTERSUPPORTEDCOUNTERS",
	3012: "ENTITYCOUNTERS",
	3013: "TRANSACTIONSTATS",
	3014: "SEVMCREATEPROGRESS",
	3015: "PLACEMENTSTATUS",
	3016: "VISUBFOLDERS",
	3017: "VIDATASTORE",
	3018: "VIHOSTRESOURCES",
	3020: "CLOUDCONNECTOR",
	3021: "VINETWORKSUBNETVMS",
	3022: "VIDATASTORECONTENTS",
	3050: "APICCONFIGURATION",
	3051: "CIFTABLE",
	3502: "APICTRANSACTION",
	3503: "VIRTUALSERVICESTATEDBCACHESUMMARY",
	3504: "POOLSTATEDBCACHESUMMARY",
	3505: "SERVERSTATEDBCACHESUMMARY",
	3506: "APICAGENTINTERNAL",
	3507: "APICTRANSACTIONFLAP",
	3508: "APICGRAPHINSTANCES",
	3509: "APICEPGS",
	3510: "APICEPGEPS",
	3511: "APICDEVICEPKGVER",
	3512: "APICTENANTS",
	3513: "APICVMMDOMAINS",
	4000: "MAXOBJECTS",
}
var AviObjectType_value = map[string]int32{
	"VIRTUALSERVICE":                        1001,
	"POOL":                                  1002,
	"HEALTHMONITOR":                         1003,
	"NETWORKPROFILE":                        1004,
	"APPLICATIONPROFILE":                    1005,
	"HTTPPOLICYSET":                         1006,
	"IPADDRGROUP":                           1009,
	"STRINGGROUP":                           1010,
	"SSLPROFILE":                            1011,
	"SSLKEYANDCERTIFICATE":                  1012,
	"NETWORKSECURITYPOLICY":                 1013,
	"APPLICATIONPERSISTENCEPROFILE":         1014,
	"ANALYTICSPROFILE":                      1015,
	"VSDATASCRIPTSET":                       1016,
	"TENANT":                                1017,
	"PKIPROFILE":                            1018,
	"AUTHPROFILE":                           1019,
	"CLOUD":                                 1020,
	"SERVERAUTOSCALEPOLICY":                 1021,
	"AUTOSCALELAUNCHCONFIG":                 1022,
	"MICROSERVICEGROUP":                     1023,
	"IPAMPROFILE":                           1024,
	"HARDWARESECURITYMODULEGROUP":           1025,
	"SERVICEENGINE":                         1500,
	"DEBUGSERVICEENGINE":                    1501,
	"DEBUGCONTROLLER":                       1502,
	"DEBUGVIRTUALSERVICE":                   1503,
	"SERVICEENGINEGROUP":                    1504,
	"SEPROPERTIES":                          1505,
	"NETWORK":                               1506,
	"CONTROLLERNODE":                        1507,
	"CONTROLLERPROPERTIES":                  1508,
	"SYSTEMCONFIGURATION":                   1509,
	"VRFCONTEXT":                            1510,
	"USER":                                  1511,
	"ALERTCONFIG":                           1512,
	"ALERTSYSLOGCONFIG":                     1513,
	"ALERTEMAILCONFIG":                      1514,
	"ALERTTYPECONFIG":                       1515,
	"APPLICATION":                           1516,
	"ROLE":                                  1517,
	"CLOUDPROPERTIES":                       1518,
	"SNMPTRAPPROFILE":                       1519,
	"ACTIONGROUPPROFILE":                    1520,
	"MICROSERVICE":                          1521,
	"ALERTPARAMS":                           1522,
	"TCPSTATRUNTIME":                        2001,
	"UDPSTATRUNTIME":                        2017,
	"IPSTATRUNTIME":                         2018,
	"ARPSTATRUNTIME":                        2019,
	"MBSTATRUNTIME":                         2020,
	"IPSTKQSTATSRUNTIME":                    2021,
	"MALLOCSTATRUNTIME":                     2022,
	"SHMALLOCSTATRUNTIME":                   2023,
	"CPUUSAGERUNTIME":                       2024,
	"L7GLOBALSTATSRUNTIME":                  2025,
	"L7VIRTUALSERVICESTATSRUNTIME":          2026,
	"SEAGENTVNICDBRUNTIME":                  2027,
	"SEAGENTGRAPHDBRUNTIME":                 2028,
	"SEAGENTSTATERUNTIME":                   2029,
	"INTERFACERUNTIME":                      2030,
	"ARPTABLERUNTIME":                       2031,
	"DISPATCHERSTATRUNTIME":                 2032,
	"DISPATCHERSTATCLEARRUNTIME":            2033,
	"DISPATCHERTABLEDUMPRUNTIME":            2034,
	"DISPATCHERREMOTETIMERLISTDUMPRUNTIME":  2035,
	"METRICSAGENTMESSAGE":                   2036,
	"HEALTHMONITORSTATRUNTIME":              2037,
	"METRICSENTITYRUNTIME":                  2038,
	"PERSISTENCEINTERNAL":                   2039,
	"HTTPPOLICYSETINTERNAL":                 2040,
	"CONNECTIONDUMPRUNTIME":                 2043,
	"SHAREDDBSTATS":                         2044,
	"SHAREDDBSTATSCLEAR":                    2045,
	"ICMPSTATRUNTIME":                       2046,
	"ROUTETABLERUNTIME":                     2047,
	"VIRTUALMACHINE":                        2048,
	"POOLSERVER":                            2049,
	"SEVSLIST":                              2050,
	"MEMINFORUNTIME":                        2051,
	"RTERINGSTATRUNTIME":                    2052,
	"ALGOSTATRUNTIME":                       2053,
	"HEALTHMONITORRUNTIME":                  2054,
	"CPUSTATRUNTIME":                        2055,
	"SEVM":                                  2056,
	"HOST":                                  2057,
	"PORTGROUP":                             2058,
	"CLUSTER":                               2059,
	"DATACENTER":                            2060,
	"VCENTER":                               2061,
	"HTTPPOLICYSETSTATS":                    2062,
	"METRICSSESTATS":                        2065,
	"RATELIMITERSTATRUNTIME":                2066,
	"NETWORKSECURITYPOLICYSTATS":            2067,
	"TCPCONNRUNTIME":                        2068,
	"POOLSTATS":                             2069,
	"CONNPOOLINTERNAL":                      2070,
	"CONNPOOLSTATS":                         2071,
	"VSHASHSHOWRUNTIME":                     2072,
	"SELOGSTATSRUNTIME":                     2073,
	"NETWORKSECURITYPOLICYDETAIL":           2074,
	"LICENSERUNTIME":                        2075,
	"SERVERRUNTIME":                         2076,
	"METRICSRUNTIMESUMMARY":                 2077,
	"METRICSRUNTIMEDETAIL":                  2078,
	"DISPATCHERSEHMPROBETEMPDISABLERUNTIME": 2079,
	"POOLDEBUG":                             2080,
	"VSLOGMGRMAP":                           2081,
	"SERUMINSERTIONSTATS":                   2082,
	"HTTPCACHE":                             2083,
	"HTTPCACHESTATS":                        2084,
	"SEDOSSTATRUNTIME":                      2085,
	"VSDOSSTATRUNTIME":                      2086,
	"SERVERUPDATEREQ":                       2087,
	"VSSCALEOUTLIST":                        2088,
	"SEMEMDISTRUNTIME":                      2089,
	"TCPCONNRUNTIMEDETAIL":                  2090,
	"SEUPGRADESTATUS":                       2091,
	"SEUPGRADEPREVIEW":                      2092,
	"SEFAULTINJECTEXHAUSTM":                 2093,
	"SEFAULTINJECTEXHAUSTMCL":               2094,
	"SEFAULTINJECTEXHAUSTMCLSMALL":          2095,
	"SEFAULTINJECTEXHAUSTCONN":              2096,
	"SEHEADLESSONLINEREQ":                   2097,
	"SEUPGRADE":                             2098,
	"SEUPGRADESTATUSDETAIL":                 2099,
	"SERESERVEDVS":                          2100,
	"SERESERVEDVSCLEAR":                     2101,
	"VSCANDIDATESEHOSTLIST":                 2102,
	"SEGROUPUPGRADE":                        2103,
	"REBALANCE":                             2104,
	"SEGROUPREBALANCE":                      2105,
	"SEAUTHSTATSRUNTIME":                    2106,
	"AUTOSCALESTATE":                        2107,
	"VIRTUALSERVICEAUTHSTATS":               2108,
	"NETWORKSECURITYPOLICYDOS":              2109,
	"KEYVALINTERNAL":                        2110,
	"KEYVALSUMMARYINTERNAL":                 2111,
	"SERVERSTATEUPDATEINFO":                 2112,
	"CLTRACKINTERNAL":                       2113,
	"CLTRACKSUMMARYINTERNAL":                2114,
	"MICROSERVICERUNTIME":                   2115,
	"SEMICROSERVICE":                        2116,
	"VIRTUALSERVICEANALYSIS":                2117,
	"CLIENTINTERNAL":                        2118,
	"CLIENTSUMMARYINTERNAL":                 2119,
	"MICROSERVICEGROUPRUNTIME":              2120,
	"SERESOURCEPROTO":                       3001,
	"SECONSUMERPROTO":                       3002,
	"SECREATEPENDINGPROTO":                  3003,
	"SEUNIADMININFO":                        3004,
	"SEVIPPROTO":                            3005,
	"RMVRFPROTO":                            3006,
	"VCENTERMAP":                            3007,
	"VIMGRVCENTERRUNTIME":                   3008,
	"INTERESTEDVMS":                         3009,
	"INTERESTEDHOSTS":                       3010,
	"VCENTERSUPPORTEDCOUNTERS":              3011,
	"ENTITYCOUNTERS":                        3012,
	"TRANSACTIONSTATS":                      3013,
	"SEVMCREATEPROGRESS":                    3014,
	"PLACEMENTSTATUS":                       3015,
	"VISUBFOLDERS":                          3016,
	"VIDATASTORE":                           3017,
	"VIHOSTRESOURCES":                       3018,
	"CLOUDCONNECTOR":                        3020,
	"VINETWORKSUBNETVMS":                    3021,
	"VIDATASTORECONTENTS":                   3022,
	"APICCONFIGURATION":                     3050,
	"CIFTABLE":                              3051,
	"APICTRANSACTION":                       3502,
	"VIRTUALSERVICESTATEDBCACHESUMMARY":     3503,
	"POOLSTATEDBCACHESUMMARY":               3504,
	"SERVERSTATEDBCACHESUMMARY":             3505,
	"APICAGENTINTERNAL":                     3506,
	"APICTRANSACTIONFLAP":                   3507,
	"APICGRAPHINSTANCES":                    3508,
	"APICEPGS":                              3509,
	"APICEPGEPS":                            3510,
	"APICDEVICEPKGVER":                      3511,
	"APICTENANTS":                           3512,
	"APICVMMDOMAINS":                        3513,
	"MAXOBJECTS":                            4000,
}

func (x AviObjectType) Enum() *AviObjectType {
	p := new(AviObjectType)
	*p = x
	return p
}
func (x AviObjectType) String() string {
	return proto.EnumName(AviObjectType_name, int32(x))
}
func (x *AviObjectType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AviObjectType_value, data, "AviObjectType")
	if err != nil {
		return err
	}
	*x = AviObjectType(value)
	return nil
}
func (AviObjectType) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

type ConnectionType int32

const (
	ConnectionType_BOTH     ConnectionType = 0
	ConnectionType_FRONTEND ConnectionType = 1
	ConnectionType_BACKEND  ConnectionType = 2
)

var ConnectionType_name = map[int32]string{
	0: "BOTH",
	1: "FRONTEND",
	2: "BACKEND",
}
var ConnectionType_value = map[string]int32{
	"BOTH":     0,
	"FRONTEND": 1,
	"BACKEND":  2,
}

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}
func (x ConnectionType) String() string {
	return proto.EnumName(ConnectionType_name, int32(x))
}
func (x *ConnectionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConnectionType_value, data, "ConnectionType")
	if err != nil {
		return err
	}
	*x = ConnectionType(value)
	return nil
}
func (ConnectionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

type Hypervisor int32

const (
	Hypervisor_DEFAULT     Hypervisor = 0
	Hypervisor_VMWARE_ESX  Hypervisor = 1
	Hypervisor_KVM         Hypervisor = 2
	Hypervisor_VMWARE_VSAN Hypervisor = 3
)

var Hypervisor_name = map[int32]string{
	0: "DEFAULT",
	1: "VMWARE_ESX",
	2: "KVM",
	3: "VMWARE_VSAN",
}
var Hypervisor_value = map[string]int32{
	"DEFAULT":     0,
	"VMWARE_ESX":  1,
	"KVM":         2,
	"VMWARE_VSAN": 3,
}

func (x Hypervisor) Enum() *Hypervisor {
	p := new(Hypervisor)
	*p = x
	return p
}
func (x Hypervisor) String() string {
	return proto.EnumName(Hypervisor_name, int32(x))
}
func (x *Hypervisor) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Hypervisor_value, data, "Hypervisor")
	if err != nil {
		return err
	}
	*x = Hypervisor(value)
	return nil
}
func (Hypervisor) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

type ImageFormat int32

const (
	ImageFormat_IMG_FMT_OVA   ImageFormat = 1
	ImageFormat_IMG_FMT_QCOW2 ImageFormat = 2
	ImageFormat_IMG_FMT_VMDK  ImageFormat = 3
	ImageFormat_IMG_FMT_RAW   ImageFormat = 4
	ImageFormat_IMG_FMT_FLAT  ImageFormat = 5
	ImageFormat_IMG_FMT_AMI   ImageFormat = 6
)

var ImageFormat_name = map[int32]string{
	1: "IMG_FMT_OVA",
	2: "IMG_FMT_QCOW2",
	3: "IMG_FMT_VMDK",
	4: "IMG_FMT_RAW",
	5: "IMG_FMT_FLAT",
	6: "IMG_FMT_AMI",
}
var ImageFormat_value = map[string]int32{
	"IMG_FMT_OVA":   1,
	"IMG_FMT_QCOW2": 2,
	"IMG_FMT_VMDK":  3,
	"IMG_FMT_RAW":   4,
	"IMG_FMT_FLAT":  5,
	"IMG_FMT_AMI":   6,
}

func (x ImageFormat) Enum() *ImageFormat {
	p := new(ImageFormat)
	*p = x
	return p
}
func (x ImageFormat) String() string {
	return proto.EnumName(ImageFormat_name, int32(x))
}
func (x *ImageFormat) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ImageFormat_value, data, "ImageFormat")
	if err != nil {
		return err
	}
	*x = ImageFormat(value)
	return nil
}
func (ImageFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{3} }

type TagType int32

const (
	TagType_AVI_DEFINED     TagType = 0
	TagType_USER_DEFINED    TagType = 1
	TagType_VCENTER_DEFINED TagType = 2
)

var TagType_name = map[int32]string{
	0: "AVI_DEFINED",
	1: "USER_DEFINED",
	2: "VCENTER_DEFINED",
}
var TagType_value = map[string]int32{
	"AVI_DEFINED":     0,
	"USER_DEFINED":    1,
	"VCENTER_DEFINED": 2,
}

func (x TagType) Enum() *TagType {
	p := new(TagType)
	*p = x
	return p
}
func (x TagType) String() string {
	return proto.EnumName(TagType_name, int32(x))
}
func (x *TagType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TagType_value, data, "TagType")
	if err != nil {
		return err
	}
	*x = TagType(value)
	return nil
}
func (TagType) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{4} }

type IpAddrMode int32

const (
	IpAddrMode_DHCP        IpAddrMode = 0
	IpAddrMode_STATIC      IpAddrMode = 1
	IpAddrMode_VIP         IpAddrMode = 2
	IpAddrMode_DOCKER_HOST IpAddrMode = 3
)

var IpAddrMode_name = map[int32]string{
	0: "DHCP",
	1: "STATIC",
	2: "VIP",
	3: "DOCKER_HOST",
}
var IpAddrMode_value = map[string]int32{
	"DHCP":        0,
	"STATIC":      1,
	"VIP":         2,
	"DOCKER_HOST": 3,
}

func (x IpAddrMode) Enum() *IpAddrMode {
	p := new(IpAddrMode)
	*p = x
	return p
}
func (x IpAddrMode) String() string {
	return proto.EnumName(IpAddrMode_name, int32(x))
}
func (x *IpAddrMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IpAddrMode_value, data, "IpAddrMode")
	if err != nil {
		return err
	}
	*x = IpAddrMode(value)
	return nil
}
func (IpAddrMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{5} }

type ProtocolType int32

const (
	ProtocolType_PROTOCOL_TYPE_TCP_PROXY     ProtocolType = 0
	ProtocolType_PROTOCOL_TYPE_TCP_FAST_PATH ProtocolType = 1
	ProtocolType_PROTOCOL_TYPE_UDP_FAST_PATH ProtocolType = 2
)

var ProtocolType_name = map[int32]string{
	0: "PROTOCOL_TYPE_TCP_PROXY",
	1: "PROTOCOL_TYPE_TCP_FAST_PATH",
	2: "PROTOCOL_TYPE_UDP_FAST_PATH",
}
var ProtocolType_value = map[string]int32{
	"PROTOCOL_TYPE_TCP_PROXY":     0,
	"PROTOCOL_TYPE_TCP_FAST_PATH": 1,
	"PROTOCOL_TYPE_UDP_FAST_PATH": 2,
}

func (x ProtocolType) Enum() *ProtocolType {
	p := new(ProtocolType)
	*p = x
	return p
}
func (x ProtocolType) String() string {
	return proto.EnumName(ProtocolType_name, int32(x))
}
func (x *ProtocolType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProtocolType_value, data, "ProtocolType")
	if err != nil {
		return err
	}
	*x = ProtocolType(value)
	return nil
}
func (ProtocolType) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{6} }

type HTTPProtocol int32

const (
	HTTPProtocol_HTTP  HTTPProtocol = 0
	HTTPProtocol_HTTPS HTTPProtocol = 1
)

var HTTPProtocol_name = map[int32]string{
	0: "HTTP",
	1: "HTTPS",
}
var HTTPProtocol_value = map[string]int32{
	"HTTP":  0,
	"HTTPS": 1,
}

func (x HTTPProtocol) Enum() *HTTPProtocol {
	p := new(HTTPProtocol)
	*p = x
	return p
}
func (x HTTPProtocol) String() string {
	return proto.EnumName(HTTPProtocol_name, int32(x))
}
func (x *HTTPProtocol) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HTTPProtocol_value, data, "HTTPProtocol")
	if err != nil {
		return err
	}
	*x = HTTPProtocol(value)
	return nil
}
func (HTTPProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{7} }

type HTTPMethod int32

const (
	HTTPMethod_HTTP_METHOD_GET     HTTPMethod = 0
	HTTPMethod_HTTP_METHOD_HEAD    HTTPMethod = 1
	HTTPMethod_HTTP_METHOD_PUT     HTTPMethod = 2
	HTTPMethod_HTTP_METHOD_DELETE  HTTPMethod = 3
	HTTPMethod_HTTP_METHOD_POST    HTTPMethod = 4
	HTTPMethod_HTTP_METHOD_OPTIONS HTTPMethod = 5
	HTTPMethod_HTTP_METHOD_TRACE   HTTPMethod = 6
)

var HTTPMethod_name = map[int32]string{
	0: "HTTP_METHOD_GET",
	1: "HTTP_METHOD_HEAD",
	2: "HTTP_METHOD_PUT",
	3: "HTTP_METHOD_DELETE",
	4: "HTTP_METHOD_POST",
	5: "HTTP_METHOD_OPTIONS",
	6: "HTTP_METHOD_TRACE",
}
var HTTPMethod_value = map[string]int32{
	"HTTP_METHOD_GET":     0,
	"HTTP_METHOD_HEAD":    1,
	"HTTP_METHOD_PUT":     2,
	"HTTP_METHOD_DELETE":  3,
	"HTTP_METHOD_POST":    4,
	"HTTP_METHOD_OPTIONS": 5,
	"HTTP_METHOD_TRACE":   6,
}

func (x HTTPMethod) Enum() *HTTPMethod {
	p := new(HTTPMethod)
	*p = x
	return p
}
func (x HTTPMethod) String() string {
	return proto.EnumName(HTTPMethod_name, int32(x))
}
func (x *HTTPMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HTTPMethod_value, data, "HTTPMethod")
	if err != nil {
		return err
	}
	*x = HTTPMethod(value)
	return nil
}
func (HTTPMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{8} }

type HTTPVersion int32

const (
	HTTPVersion_ZERO_NINE HTTPVersion = 0
	HTTPVersion_ONE_ZERO  HTTPVersion = 1
	HTTPVersion_ONE_ONE   HTTPVersion = 2
)

var HTTPVersion_name = map[int32]string{
	0: "ZERO_NINE",
	1: "ONE_ZERO",
	2: "ONE_ONE",
}
var HTTPVersion_value = map[string]int32{
	"ZERO_NINE": 0,
	"ONE_ZERO":  1,
	"ONE_ONE":   2,
}

func (x HTTPVersion) Enum() *HTTPVersion {
	p := new(HTTPVersion)
	*p = x
	return p
}
func (x HTTPVersion) String() string {
	return proto.EnumName(HTTPVersion_name, int32(x))
}
func (x *HTTPVersion) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HTTPVersion_value, data, "HTTPVersion")
	if err != nil {
		return err
	}
	*x = HTTPVersion(value)
	return nil
}
func (HTTPVersion) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{9} }

type HTTPRedirectStatusCode int32

const (
	HTTPRedirectStatusCode_HTTP_REDIRECT_STATUS_CODE_301 HTTPRedirectStatusCode = 301
	HTTPRedirectStatusCode_HTTP_REDIRECT_STATUS_CODE_302 HTTPRedirectStatusCode = 302
	HTTPRedirectStatusCode_HTTP_REDIRECT_STATUS_CODE_307 HTTPRedirectStatusCode = 307
)

var HTTPRedirectStatusCode_name = map[int32]string{
	301: "HTTP_REDIRECT_STATUS_CODE_301",
	302: "HTTP_REDIRECT_STATUS_CODE_302",
	307: "HTTP_REDIRECT_STATUS_CODE_307",
}
var HTTPRedirectStatusCode_value = map[string]int32{
	"HTTP_REDIRECT_STATUS_CODE_301": 301,
	"HTTP_REDIRECT_STATUS_CODE_302": 302,
	"HTTP_REDIRECT_STATUS_CODE_307": 307,
}

func (x HTTPRedirectStatusCode) Enum() *HTTPRedirectStatusCode {
	p := new(HTTPRedirectStatusCode)
	*p = x
	return p
}
func (x HTTPRedirectStatusCode) String() string {
	return proto.EnumName(HTTPRedirectStatusCode_name, int32(x))
}
func (x *HTTPRedirectStatusCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HTTPRedirectStatusCode_value, data, "HTTPRedirectStatusCode")
	if err != nil {
		return err
	}
	*x = HTTPRedirectStatusCode(value)
	return nil
}
func (HTTPRedirectStatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{10} }

type HTTPLocalResponseStatusCode int32

const (
	HTTPLocalResponseStatusCode_HTTP_LOCAL_RESPONSE_STATUS_CODE_200 HTTPLocalResponseStatusCode = 200
	HTTPLocalResponseStatusCode_HTTP_LOCAL_RESPONSE_STATUS_CODE_403 HTTPLocalResponseStatusCode = 403
	HTTPLocalResponseStatusCode_HTTP_LOCAL_RESPONSE_STATUS_CODE_404 HTTPLocalResponseStatusCode = 404
	HTTPLocalResponseStatusCode_HTTP_LOCAL_RESPONSE_STATUS_CODE_429 HTTPLocalResponseStatusCode = 429
)

var HTTPLocalResponseStatusCode_name = map[int32]string{
	200: "HTTP_LOCAL_RESPONSE_STATUS_CODE_200",
	403: "HTTP_LOCAL_RESPONSE_STATUS_CODE_403",
	404: "HTTP_LOCAL_RESPONSE_STATUS_CODE_404",
	429: "HTTP_LOCAL_RESPONSE_STATUS_CODE_429",
}
var HTTPLocalResponseStatusCode_value = map[string]int32{
	"HTTP_LOCAL_RESPONSE_STATUS_CODE_200": 200,
	"HTTP_LOCAL_RESPONSE_STATUS_CODE_403": 403,
	"HTTP_LOCAL_RESPONSE_STATUS_CODE_404": 404,
	"HTTP_LOCAL_RESPONSE_STATUS_CODE_429": 429,
}

func (x HTTPLocalResponseStatusCode) Enum() *HTTPLocalResponseStatusCode {
	p := new(HTTPLocalResponseStatusCode)
	*p = x
	return p
}
func (x HTTPLocalResponseStatusCode) String() string {
	return proto.EnumName(HTTPLocalResponseStatusCode_name, int32(x))
}
func (x *HTTPLocalResponseStatusCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HTTPLocalResponseStatusCode_value, data, "HTTPLocalResponseStatusCode")
	if err != nil {
		return err
	}
	*x = HTTPLocalResponseStatusCode(value)
	return nil
}
func (HTTPLocalResponseStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor16, []int{11}
}

type MatchCase int32

const (
	MatchCase_SENSITIVE   MatchCase = 0
	MatchCase_INSENSITIVE MatchCase = 1
)

var MatchCase_name = map[int32]string{
	0: "SENSITIVE",
	1: "INSENSITIVE",
}
var MatchCase_value = map[string]int32{
	"SENSITIVE":   0,
	"INSENSITIVE": 1,
}

func (x MatchCase) Enum() *MatchCase {
	p := new(MatchCase)
	*p = x
	return p
}
func (x MatchCase) String() string {
	return proto.EnumName(MatchCase_name, int32(x))
}
func (x *MatchCase) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MatchCase_value, data, "MatchCase")
	if err != nil {
		return err
	}
	*x = MatchCase(value)
	return nil
}
func (MatchCase) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{12} }

type MatchOperation int32

const (
	MatchOperation_IS_IN     MatchOperation = 0
	MatchOperation_IS_NOT_IN MatchOperation = 1
)

var MatchOperation_name = map[int32]string{
	0: "IS_IN",
	1: "IS_NOT_IN",
}
var MatchOperation_value = map[string]int32{
	"IS_IN":     0,
	"IS_NOT_IN": 1,
}

func (x MatchOperation) Enum() *MatchOperation {
	p := new(MatchOperation)
	*p = x
	return p
}
func (x MatchOperation) String() string {
	return proto.EnumName(MatchOperation_name, int32(x))
}
func (x *MatchOperation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MatchOperation_value, data, "MatchOperation")
	if err != nil {
		return err
	}
	*x = MatchOperation(value)
	return nil
}
func (MatchOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{13} }

type HdrMatchOperation int32

const (
	HdrMatchOperation_HDR_EXISTS              HdrMatchOperation = 1
	HdrMatchOperation_HDR_DOES_NOT_EXIST      HdrMatchOperation = 2
	HdrMatchOperation_HDR_BEGINS_WITH         HdrMatchOperation = 3
	HdrMatchOperation_HDR_DOES_NOT_BEGIN_WITH HdrMatchOperation = 4
	HdrMatchOperation_HDR_CONTAINS            HdrMatchOperation = 5
	HdrMatchOperation_HDR_DOES_NOT_CONTAIN    HdrMatchOperation = 6
	HdrMatchOperation_HDR_ENDS_WITH           HdrMatchOperation = 7
	HdrMatchOperation_HDR_DOES_NOT_END_WITH   HdrMatchOperation = 8
	HdrMatchOperation_HDR_EQUALS              HdrMatchOperation = 9
	HdrMatchOperation_HDR_DOES_NOT_EQUAL      HdrMatchOperation = 10
)

var HdrMatchOperation_name = map[int32]string{
	1:  "HDR_EXISTS",
	2:  "HDR_DOES_NOT_EXIST",
	3:  "HDR_BEGINS_WITH",
	4:  "HDR_DOES_NOT_BEGIN_WITH",
	5:  "HDR_CONTAINS",
	6:  "HDR_DOES_NOT_CONTAIN",
	7:  "HDR_ENDS_WITH",
	8:  "HDR_DOES_NOT_END_WITH",
	9:  "HDR_EQUALS",
	10: "HDR_DOES_NOT_EQUAL",
}
var HdrMatchOperation_value = map[string]int32{
	"HDR_EXISTS":              1,
	"HDR_DOES_NOT_EXIST":      2,
	"HDR_BEGINS_WITH":         3,
	"HDR_DOES_NOT_BEGIN_WITH": 4,
	"HDR_CONTAINS":            5,
	"HDR_DOES_NOT_CONTAIN":    6,
	"HDR_ENDS_WITH":           7,
	"HDR_DOES_NOT_END_WITH":   8,
	"HDR_EQUALS":              9,
	"HDR_DOES_NOT_EQUAL":      10,
}

func (x HdrMatchOperation) Enum() *HdrMatchOperation {
	p := new(HdrMatchOperation)
	*p = x
	return p
}
func (x HdrMatchOperation) String() string {
	return proto.EnumName(HdrMatchOperation_name, int32(x))
}
func (x *HdrMatchOperation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HdrMatchOperation_value, data, "HdrMatchOperation")
	if err != nil {
		return err
	}
	*x = HdrMatchOperation(value)
	return nil
}
func (HdrMatchOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{14} }

type StringOperation int32

const (
	StringOperation_BEGINS_WITH         StringOperation = 1
	StringOperation_DOES_NOT_BEGIN_WITH StringOperation = 2
	StringOperation_CONTAINS            StringOperation = 3
	StringOperation_DOES_NOT_CONTAIN    StringOperation = 4
	StringOperation_ENDS_WITH           StringOperation = 5
	StringOperation_DOES_NOT_END_WITH   StringOperation = 6
	StringOperation_EQUALS              StringOperation = 7
	StringOperation_DOES_NOT_EQUAL      StringOperation = 8
)

var StringOperation_name = map[int32]string{
	1: "BEGINS_WITH",
	2: "DOES_NOT_BEGIN_WITH",
	3: "CONTAINS",
	4: "DOES_NOT_CONTAIN",
	5: "ENDS_WITH",
	6: "DOES_NOT_END_WITH",
	7: "EQUALS",
	8: "DOES_NOT_EQUAL",
}
var StringOperation_value = map[string]int32{
	"BEGINS_WITH":         1,
	"DOES_NOT_BEGIN_WITH": 2,
	"CONTAINS":            3,
	"DOES_NOT_CONTAIN":    4,
	"ENDS_WITH":           5,
	"DOES_NOT_END_WITH":   6,
	"EQUALS":              7,
	"DOES_NOT_EQUAL":      8,
}

func (x StringOperation) Enum() *StringOperation {
	p := new(StringOperation)
	*p = x
	return p
}
func (x StringOperation) String() string {
	return proto.EnumName(StringOperation_name, int32(x))
}
func (x *StringOperation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StringOperation_value, data, "StringOperation")
	if err != nil {
		return err
	}
	*x = StringOperation(value)
	return nil
}
func (StringOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{15} }

type QueryMatchOperation int32

const (
	QueryMatchOperation_QUERY_MATCH_CONTAINS QueryMatchOperation = 1
)

var QueryMatchOperation_name = map[int32]string{
	1: "QUERY_MATCH_CONTAINS",
}
var QueryMatchOperation_value = map[string]int32{
	"QUERY_MATCH_CONTAINS": 1,
}

func (x QueryMatchOperation) Enum() *QueryMatchOperation {
	p := new(QueryMatchOperation)
	*p = x
	return p
}
func (x QueryMatchOperation) String() string {
	return proto.EnumName(QueryMatchOperation_name, int32(x))
}
func (x *QueryMatchOperation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QueryMatchOperation_value, data, "QueryMatchOperation")
	if err != nil {
		return err
	}
	*x = QueryMatchOperation(value)
	return nil
}
func (QueryMatchOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{16} }

type AdminState int32

const (
	AdminState_ENABLED  AdminState = 0
	AdminState_DISABLED AdminState = 1
)

var AdminState_name = map[int32]string{
	0: "ENABLED",
	1: "DISABLED",
}
var AdminState_value = map[string]int32{
	"ENABLED":  0,
	"DISABLED": 1,
}

func (x AdminState) Enum() *AdminState {
	p := new(AdminState)
	*p = x
	return p
}
func (x AdminState) String() string {
	return proto.EnumName(AdminState_name, int32(x))
}
func (x *AdminState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AdminState_value, data, "AdminState")
	if err != nil {
		return err
	}
	*x = AdminState(value)
	return nil
}
func (AdminState) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{17} }

// *
// \oper_state  : This is operational state of the resource
// \oper_reason : This contains contextual information for the reason.
//                eg. if pool p1 is in failure failed due to a server failure,
//                then the reason would be "pool p1 failed, server s1 down".
type OperationalState int32

const (
	OperationalState_OPER_UP                     OperationalState = 0
	OperationalState_OPER_DOWN                   OperationalState = 1
	OperationalState_OPER_CREATING               OperationalState = 2
	OperationalState_OPER_RESOURCES              OperationalState = 3
	OperationalState_OPER_INACTIVE               OperationalState = 4
	OperationalState_OPER_DISABLED               OperationalState = 5
	OperationalState_OPER_UNUSED                 OperationalState = 6
	OperationalState_OPER_UNKNOWN                OperationalState = 7
	OperationalState_OPER_PROCESSING             OperationalState = 8
	OperationalState_OPER_INITIALIZING           OperationalState = 9
	OperationalState_OPER_ERROR_DISABLED         OperationalState = 10
	OperationalState_OPER_AWAIT_MANUAL_PLACEMENT OperationalState = 11
	OperationalState_OPER_UPGRADING              OperationalState = 12
	OperationalState_OPER_SE_PROCESSING          OperationalState = 13
	OperationalState_OPER_PARTITIONED            OperationalState = 14
)

var OperationalState_name = map[int32]string{
	0:  "OPER_UP",
	1:  "OPER_DOWN",
	2:  "OPER_CREATING",
	3:  "OPER_RESOURCES",
	4:  "OPER_INACTIVE",
	5:  "OPER_DISABLED",
	6:  "OPER_UNUSED",
	7:  "OPER_UNKNOWN",
	8:  "OPER_PROCESSING",
	9:  "OPER_INITIALIZING",
	10: "OPER_ERROR_DISABLED",
	11: "OPER_AWAIT_MANUAL_PLACEMENT",
	12: "OPER_UPGRADING",
	13: "OPER_SE_PROCESSING",
	14: "OPER_PARTITIONED",
}
var OperationalState_value = map[string]int32{
	"OPER_UP":                     0,
	"OPER_DOWN":                   1,
	"OPER_CREATING":               2,
	"OPER_RESOURCES":              3,
	"OPER_INACTIVE":               4,
	"OPER_DISABLED":               5,
	"OPER_UNUSED":                 6,
	"OPER_UNKNOWN":                7,
	"OPER_PROCESSING":             8,
	"OPER_INITIALIZING":           9,
	"OPER_ERROR_DISABLED":         10,
	"OPER_AWAIT_MANUAL_PLACEMENT": 11,
	"OPER_UPGRADING":              12,
	"OPER_SE_PROCESSING":          13,
	"OPER_PARTITIONED":            14,
}

func (x OperationalState) Enum() *OperationalState {
	p := new(OperationalState)
	*p = x
	return p
}
func (x OperationalState) String() string {
	return proto.EnumName(OperationalState_name, int32(x))
}
func (x *OperationalState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OperationalState_value, data, "OperationalState")
	if err != nil {
		return err
	}
	*x = OperationalState(value)
	return nil
}
func (OperationalState) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{18} }

// *
// \conf_state  :  This is the config state of the resource
// \conf_reason :  This contains contextual information for the reason.
//                 eg. if pool p1 configuration failed because there was
//                 dependency on health monitor hm1 then the reason would be
//                 "pool p1 failed due to invalid hm1".
type ConfigurationState int32

const (
	ConfigurationState_CONFIG_UP                     ConfigurationState = 0
	ConfigurationState_CONFIG_DOWN                   ConfigurationState = 1
	ConfigurationState_CONFIG_CREATING               ConfigurationState = 2
	ConfigurationState_CONFIG_RESOURCES              ConfigurationState = 3
	ConfigurationState_CONFIG_INACTIVE               ConfigurationState = 4
	ConfigurationState_CONFIG_DISABLED               ConfigurationState = 5
	ConfigurationState_CONFIG_UNUSED                 ConfigurationState = 6
	ConfigurationState_CONFIG_UNKNOWN                ConfigurationState = 7
	ConfigurationState_CONFIG_PROCESSING             ConfigurationState = 8
	ConfigurationState_CONFIG_INITIALIZING           ConfigurationState = 9
	ConfigurationState_CONFIG_ERROR_DISABLED         ConfigurationState = 10
	ConfigurationState_CONFIG_AWAIT_MANUAL_PLACEMENT ConfigurationState = 11
	ConfigurationState_CONFIG_UPGRADING              ConfigurationState = 12
	ConfigurationState_CONFIG_SE_PROCESSING          ConfigurationState = 13
	ConfigurationState_CONFIG_PARTITIONED            ConfigurationState = 14
)

var ConfigurationState_name = map[int32]string{
	0:  "CONFIG_UP",
	1:  "CONFIG_DOWN",
	2:  "CONFIG_CREATING",
	3:  "CONFIG_RESOURCES",
	4:  "CONFIG_INACTIVE",
	5:  "CONFIG_DISABLED",
	6:  "CONFIG_UNUSED",
	7:  "CONFIG_UNKNOWN",
	8:  "CONFIG_PROCESSING",
	9:  "CONFIG_INITIALIZING",
	10: "CONFIG_ERROR_DISABLED",
	11: "CONFIG_AWAIT_MANUAL_PLACEMENT",
	12: "CONFIG_UPGRADING",
	13: "CONFIG_SE_PROCESSING",
	14: "CONFIG_PARTITIONED",
}
var ConfigurationState_value = map[string]int32{
	"CONFIG_UP":                     0,
	"CONFIG_DOWN":                   1,
	"CONFIG_CREATING":               2,
	"CONFIG_RESOURCES":              3,
	"CONFIG_INACTIVE":               4,
	"CONFIG_DISABLED":               5,
	"CONFIG_UNUSED":                 6,
	"CONFIG_UNKNOWN":                7,
	"CONFIG_PROCESSING":             8,
	"CONFIG_INITIALIZING":           9,
	"CONFIG_ERROR_DISABLED":         10,
	"CONFIG_AWAIT_MANUAL_PLACEMENT": 11,
	"CONFIG_UPGRADING":              12,
	"CONFIG_SE_PROCESSING":          13,
	"CONFIG_PARTITIONED":            14,
}

func (x ConfigurationState) Enum() *ConfigurationState {
	p := new(ConfigurationState)
	*p = x
	return p
}
func (x ConfigurationState) String() string {
	return proto.EnumName(ConfigurationState_name, int32(x))
}
func (x *ConfigurationState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConfigurationState_value, data, "ConfigurationState")
	if err != nil {
		return err
	}
	*x = ConfigurationState(value)
	return nil
}
func (ConfigurationState) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{19} }

type Privilege int32

const (
	Privilege_NO_ACCESS    Privilege = 0
	Privilege_READ_ACCESS  Privilege = 1
	Privilege_WRITE_ACCESS Privilege = 2
)

var Privilege_name = map[int32]string{
	0: "NO_ACCESS",
	1: "READ_ACCESS",
	2: "WRITE_ACCESS",
}
var Privilege_value = map[string]int32{
	"NO_ACCESS":    0,
	"READ_ACCESS":  1,
	"WRITE_ACCESS": 2,
}

func (x Privilege) Enum() *Privilege {
	p := new(Privilege)
	*p = x
	return p
}
func (x Privilege) String() string {
	return proto.EnumName(Privilege_name, int32(x))
}
func (x *Privilege) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Privilege_value, data, "Privilege")
	if err != nil {
		return err
	}
	*x = Privilege(value)
	return nil
}
func (Privilege) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{20} }

type ResourceCategory int32

const (
	ResourceCategory_RESOURCE_CATEGORY_APPLICATION    ResourceCategory = 0
	ResourceCategory_RESOURCE_CATEGORY_ACCOUNT        ResourceCategory = 1
	ResourceCategory_RESOURCE_CATEGORY_PROFILES       ResourceCategory = 2
	ResourceCategory_RESOURCE_CATEGORY_INFRASTRUCTURE ResourceCategory = 3
	ResourceCategory_RESOURCE_CATEGORY_SYSTEM         ResourceCategory = 4
	ResourceCategory_RESOURCE_CATEGORY_SECURITY       ResourceCategory = 5
)

var ResourceCategory_name = map[int32]string{
	0: "RESOURCE_CATEGORY_APPLICATION",
	1: "RESOURCE_CATEGORY_ACCOUNT",
	2: "RESOURCE_CATEGORY_PROFILES",
	3: "RESOURCE_CATEGORY_INFRASTRUCTURE",
	4: "RESOURCE_CATEGORY_SYSTEM",
	5: "RESOURCE_CATEGORY_SECURITY",
}
var ResourceCategory_value = map[string]int32{
	"RESOURCE_CATEGORY_APPLICATION":    0,
	"RESOURCE_CATEGORY_ACCOUNT":        1,
	"RESOURCE_CATEGORY_PROFILES":       2,
	"RESOURCE_CATEGORY_INFRASTRUCTURE": 3,
	"RESOURCE_CATEGORY_SYSTEM":         4,
	"RESOURCE_CATEGORY_SECURITY":       5,
}

func (x ResourceCategory) Enum() *ResourceCategory {
	p := new(ResourceCategory)
	*p = x
	return p
}
func (x ResourceCategory) String() string {
	return proto.EnumName(ResourceCategory_name, int32(x))
}
func (x *ResourceCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResourceCategory_value, data, "ResourceCategory")
	if err != nil {
		return err
	}
	*x = ResourceCategory(value)
	return nil
}
func (ResourceCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{21} }

type PoolAction int32

const (
	PoolAction_POOL_ACTION_UPDATED PoolAction = 1
	PoolAction_POOL_ACTION_DELETED PoolAction = 2
)

var PoolAction_name = map[int32]string{
	1: "POOL_ACTION_UPDATED",
	2: "POOL_ACTION_DELETED",
}
var PoolAction_value = map[string]int32{
	"POOL_ACTION_UPDATED": 1,
	"POOL_ACTION_DELETED": 2,
}

func (x PoolAction) Enum() *PoolAction {
	p := new(PoolAction)
	*p = x
	return p
}
func (x PoolAction) String() string {
	return proto.EnumName(PoolAction_name, int32(x))
}
func (x *PoolAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PoolAction_value, data, "PoolAction")
	if err != nil {
		return err
	}
	*x = PoolAction(value)
	return nil
}
func (PoolAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{22} }

// -- HTTP Policy variables exported by the data path for policy
// matching.
type HTTPPolicyVar int32

const (
	HTTPPolicyVar_HTTP_POLICY_VAR_CLIENT_IP              HTTPPolicyVar = 1
	HTTPPolicyVar_HTTP_POLICY_VAR_VS_PORT                HTTPPolicyVar = 2
	HTTPPolicyVar_HTTP_POLICY_VAR_VS_IP                  HTTPPolicyVar = 3
	HTTPPolicyVar_HTTP_POLICY_VAR_HTTP_HDR               HTTPPolicyVar = 4
	HTTPPolicyVar_HTTP_POLICY_VAR_SSL_CLIENT_FINGERPRINT HTTPPolicyVar = 5
	HTTPPolicyVar_HTTP_POLICY_VAR_SSL_CLIENT_SERIAL      HTTPPolicyVar = 6
	HTTPPolicyVar_HTTP_POLICY_VAR_SSL_CLIENT_ISSUER      HTTPPolicyVar = 7
	HTTPPolicyVar_HTTP_POLICY_VAR_SSL_CLIENT_SUBJECT     HTTPPolicyVar = 8
	HTTPPolicyVar_HTTP_POLICY_VAR_SSL_CLIENT_RAW         HTTPPolicyVar = 9
	HTTPPolicyVar_HTTP_POLICY_VAR_SSL_PROTOCOL           HTTPPolicyVar = 10
	HTTPPolicyVar_HTTP_POLICY_VAR_SSL_SERVER_NAME        HTTPPolicyVar = 11
	HTTPPolicyVar_HTTP_POLICY_VAR_USER_NAME              HTTPPolicyVar = 12
)

var HTTPPolicyVar_name = map[int32]string{
	1:  "HTTP_POLICY_VAR_CLIENT_IP",
	2:  "HTTP_POLICY_VAR_VS_PORT",
	3:  "HTTP_POLICY_VAR_VS_IP",
	4:  "HTTP_POLICY_VAR_HTTP_HDR",
	5:  "HTTP_POLICY_VAR_SSL_CLIENT_FINGERPRINT",
	6:  "HTTP_POLICY_VAR_SSL_CLIENT_SERIAL",
	7:  "HTTP_POLICY_VAR_SSL_CLIENT_ISSUER",
	8:  "HTTP_POLICY_VAR_SSL_CLIENT_SUBJECT",
	9:  "HTTP_POLICY_VAR_SSL_CLIENT_RAW",
	10: "HTTP_POLICY_VAR_SSL_PROTOCOL",
	11: "HTTP_POLICY_VAR_SSL_SERVER_NAME",
	12: "HTTP_POLICY_VAR_USER_NAME",
}
var HTTPPolicyVar_value = map[string]int32{
	"HTTP_POLICY_VAR_CLIENT_IP":              1,
	"HTTP_POLICY_VAR_VS_PORT":                2,
	"HTTP_POLICY_VAR_VS_IP":                  3,
	"HTTP_POLICY_VAR_HTTP_HDR":               4,
	"HTTP_POLICY_VAR_SSL_CLIENT_FINGERPRINT": 5,
	"HTTP_POLICY_VAR_SSL_CLIENT_SERIAL":      6,
	"HTTP_POLICY_VAR_SSL_CLIENT_ISSUER":      7,
	"HTTP_POLICY_VAR_SSL_CLIENT_SUBJECT":     8,
	"HTTP_POLICY_VAR_SSL_CLIENT_RAW":         9,
	"HTTP_POLICY_VAR_SSL_PROTOCOL":           10,
	"HTTP_POLICY_VAR_SSL_SERVER_NAME":        11,
	"HTTP_POLICY_VAR_USER_NAME":              12,
}

func (x HTTPPolicyVar) Enum() *HTTPPolicyVar {
	p := new(HTTPPolicyVar)
	*p = x
	return p
}
func (x HTTPPolicyVar) String() string {
	return proto.EnumName(HTTPPolicyVar_name, int32(x))
}
func (x *HTTPPolicyVar) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HTTPPolicyVar_value, data, "HTTPPolicyVar")
	if err != nil {
		return err
	}
	*x = HTTPPolicyVar(value)
	return nil
}
func (HTTPPolicyVar) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{23} }

type CloudType int32

const (
	CloudType_CLOUD_NONE       CloudType = 0
	CloudType_CLOUD_VCENTER    CloudType = 1
	CloudType_CLOUD_OPENSTACK  CloudType = 2
	CloudType_CLOUD_AWS        CloudType = 3
	CloudType_CLOUD_CLOUDSTACK CloudType = 4
	CloudType_CLOUD_VCA        CloudType = 5
	CloudType_CLOUD_APIC       CloudType = 6
	CloudType_CLOUD_MESOS      CloudType = 7
)

var CloudType_name = map[int32]string{
	0: "CLOUD_NONE",
	1: "CLOUD_VCENTER",
	2: "CLOUD_OPENSTACK",
	3: "CLOUD_AWS",
	4: "CLOUD_CLOUDSTACK",
	5: "CLOUD_VCA",
	6: "CLOUD_APIC",
	7: "CLOUD_MESOS",
}
var CloudType_value = map[string]int32{
	"CLOUD_NONE":       0,
	"CLOUD_VCENTER":    1,
	"CLOUD_OPENSTACK":  2,
	"CLOUD_AWS":        3,
	"CLOUD_CLOUDSTACK": 4,
	"CLOUD_VCA":        5,
	"CLOUD_APIC":       6,
	"CLOUD_MESOS":      7,
}

func (x CloudType) Enum() *CloudType {
	p := new(CloudType)
	*p = x
	return p
}
func (x CloudType) String() string {
	return proto.EnumName(CloudType_name, int32(x))
}
func (x *CloudType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CloudType_value, data, "CloudType")
	if err != nil {
		return err
	}
	*x = CloudType(value)
	return nil
}
func (CloudType) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{24} }

type SeVerNum int32

const (
	SeVerNum_SE_VER_1 SeVerNum = 1
	SeVerNum_SE_VER_2 SeVerNum = 2
)

var SeVerNum_name = map[int32]string{
	1: "SE_VER_1",
	2: "SE_VER_2",
}
var SeVerNum_value = map[string]int32{
	"SE_VER_1": 1,
	"SE_VER_2": 2,
}

func (x SeVerNum) Enum() *SeVerNum {
	p := new(SeVerNum)
	*p = x
	return p
}
func (x SeVerNum) String() string {
	return proto.EnumName(SeVerNum_name, int32(x))
}
func (x *SeVerNum) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SeVerNum_value, data, "SeVerNum")
	if err != nil {
		return err
	}
	*x = SeVerNum(value)
	return nil
}
func (SeVerNum) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{25} }

type AutoScaleAction int32

const (
	AutoScaleAction_SCALEOUT AutoScaleAction = 0
	AutoScaleAction_SCALEIN  AutoScaleAction = 1
)

var AutoScaleAction_name = map[int32]string{
	0: "SCALEOUT",
	1: "SCALEIN",
}
var AutoScaleAction_value = map[string]int32{
	"SCALEOUT": 0,
	"SCALEIN":  1,
}

func (x AutoScaleAction) Enum() *AutoScaleAction {
	p := new(AutoScaleAction)
	*p = x
	return p
}
func (x AutoScaleAction) String() string {
	return proto.EnumName(AutoScaleAction_name, int32(x))
}
func (x *AutoScaleAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AutoScaleAction_value, data, "AutoScaleAction")
	if err != nil {
		return err
	}
	*x = AutoScaleAction(value)
	return nil
}
func (AutoScaleAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{26} }

type CONSTANTS int32

const (
	CONSTANTS_DEFAULT_MTU CONSTANTS = 1500
)

var CONSTANTS_name = map[int32]string{
	1500: "DEFAULT_MTU",
}
var CONSTANTS_value = map[string]int32{
	"DEFAULT_MTU": 1500,
}

func (x CONSTANTS) Enum() *CONSTANTS {
	p := new(CONSTANTS)
	*p = x
	return p
}
func (x CONSTANTS) String() string {
	return proto.EnumName(CONSTANTS_name, int32(x))
}
func (x *CONSTANTS) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CONSTANTS_value, data, "CONSTANTS")
	if err != nil {
		return err
	}
	*x = CONSTANTS(value)
	return nil
}
func (CONSTANTS) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{27} }

type Port struct {
	Port             *uint32 `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Port) Reset()                    { *m = Port{} }
func (m *Port) String() string            { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()               {}
func (*Port) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

func (m *Port) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

type PortRange struct {
	Start            *Port  `protobuf:"bytes,1,req,name=start" json:"start,omitempty"`
	End              *Port  `protobuf:"bytes,2,req,name=end" json:"end,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PortRange) Reset()                    { *m = PortRange{} }
func (m *PortRange) String() string            { return proto.CompactTextString(m) }
func (*PortRange) ProtoMessage()               {}
func (*PortRange) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

func (m *PortRange) GetStart() *Port {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *PortRange) GetEnd() *Port {
	if m != nil {
		return m.End
	}
	return nil
}

// Repeatable string is needed to help our model auto-generation. We cannot
// represent repeatable basic types. If it is repeatable, it needs to be an
// object to be able to represent in the model.
type RepeatableString struct {
	Str              *string `protobuf:"bytes,1,req,name=str" json:"str,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RepeatableString) Reset()                    { *m = RepeatableString{} }
func (m *RepeatableString) String() string            { return proto.CompactTextString(m) }
func (*RepeatableString) ProtoMessage()               {}
func (*RepeatableString) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

func (m *RepeatableString) GetStr() string {
	if m != nil && m.Str != nil {
		return *m.Str
	}
	return ""
}

type Tag struct {
	Value            *string  `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	Type             *TagType `protobuf:"varint,2,opt,name=type,enum=TagType,def=1" json:"type,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{3} }

const Default_Tag_Type TagType = TagType_USER_DEFINED

func (m *Tag) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *Tag) GetType() TagType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Tag_Type
}

type TenantConfiguration struct {
	TenantVrf                *bool  `protobuf:"varint,1,opt,name=tenant_vrf,def=0" json:"tenant_vrf,omitempty"`
	SeInProviderContext      *bool  `protobuf:"varint,3,opt,name=se_in_provider_context,def=1" json:"se_in_provider_context,omitempty"`
	TenantAccessToProviderSe *bool  `protobuf:"varint,4,opt,name=tenant_access_to_provider_se,def=1" json:"tenant_access_to_provider_se,omitempty"`
	XXX_unrecognized         []byte `json:"-"`
}

func (m *TenantConfiguration) Reset()                    { *m = TenantConfiguration{} }
func (m *TenantConfiguration) String() string            { return proto.CompactTextString(m) }
func (*TenantConfiguration) ProtoMessage()               {}
func (*TenantConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{4} }

const Default_TenantConfiguration_TenantVrf bool = false
const Default_TenantConfiguration_SeInProviderContext bool = true
const Default_TenantConfiguration_TenantAccessToProviderSe bool = true

func (m *TenantConfiguration) GetTenantVrf() bool {
	if m != nil && m.TenantVrf != nil {
		return *m.TenantVrf
	}
	return Default_TenantConfiguration_TenantVrf
}

func (m *TenantConfiguration) GetSeInProviderContext() bool {
	if m != nil && m.SeInProviderContext != nil {
		return *m.SeInProviderContext
	}
	return Default_TenantConfiguration_SeInProviderContext
}

func (m *TenantConfiguration) GetTenantAccessToProviderSe() bool {
	if m != nil && m.TenantAccessToProviderSe != nil {
		return *m.TenantAccessToProviderSe
	}
	return Default_TenantConfiguration_TenantAccessToProviderSe
}

type Tenant struct {
	Uuid *string `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// To denote whether Tenant is a local one or a remote one
	// e.g., from keystone
	Local            *bool                `protobuf:"varint,3,opt,name=local,def=1" json:"local,omitempty"`
	Description      *string              `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	ConfigSettings   *TenantConfiguration `protobuf:"bytes,5,opt,name=config_settings" json:"config_settings,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Tenant) Reset()                    { *m = Tenant{} }
func (m *Tenant) String() string            { return proto.CompactTextString(m) }
func (*Tenant) ProtoMessage()               {}
func (*Tenant) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{5} }

const Default_Tenant_Local bool = true

func (m *Tenant) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *Tenant) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Tenant) GetLocal() bool {
	if m != nil && m.Local != nil {
		return *m.Local
	}
	return Default_Tenant_Local
}

func (m *Tenant) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Tenant) GetConfigSettings() *TenantConfiguration {
	if m != nil {
		return m.ConfigSettings
	}
	return nil
}

// Represents a range of Ip Addresses. Eg: 10.10.1.1-10.1.1.10
type IpAddrRange struct {
	Begin            *IpAddr `protobuf:"bytes,1,req,name=begin" json:"begin,omitempty"`
	End              *IpAddr `protobuf:"bytes,2,req,name=end" json:"end,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IpAddrRange) Reset()                    { *m = IpAddrRange{} }
func (m *IpAddrRange) String() string            { return proto.CompactTextString(m) }
func (*IpAddrRange) ProtoMessage()               {}
func (*IpAddrRange) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{6} }

func (m *IpAddrRange) GetBegin() *IpAddr {
	if m != nil {
		return m.Begin
	}
	return nil
}

func (m *IpAddrRange) GetEnd() *IpAddr {
	if m != nil {
		return m.End
	}
	return nil
}

type HTTPLocalFile struct {
	ContentType      *string `protobuf:"bytes,1,req,name=content_type" json:"content_type,omitempty"`
	FileContent      *string `protobuf:"bytes,2,req,name=file_content" json:"file_content,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HTTPLocalFile) Reset()                    { *m = HTTPLocalFile{} }
func (m *HTTPLocalFile) String() string            { return proto.CompactTextString(m) }
func (*HTTPLocalFile) ProtoMessage()               {}
func (*HTTPLocalFile) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{7} }

func (m *HTTPLocalFile) GetContentType() string {
	if m != nil && m.ContentType != nil {
		return *m.ContentType
	}
	return ""
}

func (m *HTTPLocalFile) GetFileContent() string {
	if m != nil && m.FileContent != nil {
		return *m.FileContent
	}
	return ""
}

// VoidResponse is defined for one-way notifications. Google protobuf
// infrastructure does not allow one-way notification functions to be specified
// in the RPC service specification. Instead, we model it as a VoidResponse
// and will override this in the SvcRpcChannel and SvcRequestProcessor
// implementations.
type VoidResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *VoidResponse) Reset()                    { *m = VoidResponse{} }
func (m *VoidResponse) String() string            { return proto.CompactTextString(m) }
func (*VoidResponse) ProtoMessage()               {}
func (*VoidResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{8} }

// NullObj is defined for use when only config information is present but some
// template code needs a runtime object.
// Example loadbalancer/vs.h
type NullObj struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *NullObj) Reset()                    { *m = NullObj{} }
func (m *NullObj) String() string            { return proto.CompactTextString(m) }
func (*NullObj) ProtoMessage()               {}
func (*NullObj) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{9} }

// To implement Self describing message, we declare a message that uses
// field numbers that are never allocated by the rest of the protobuf
// specification. The resultant protobuf string will be concatenated with every
// protobuf.
type PBDescription struct {
	FileName         *string `protobuf:"bytes,60000,req,name=file_name" json:"file_name,omitempty"`
	TypeName         *string `protobuf:"bytes,60001,req,name=type_name" json:"type_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PBDescription) Reset()                    { *m = PBDescription{} }
func (m *PBDescription) String() string            { return proto.CompactTextString(m) }
func (*PBDescription) ProtoMessage()               {}
func (*PBDescription) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{10} }

func (m *PBDescription) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *PBDescription) GetTypeName() string {
	if m != nil && m.TypeName != nil {
		return *m.TypeName
	}
	return ""
}

type TimeStamp struct {
	Secs             *int64 `protobuf:"varint,1,req,name=secs" json:"secs,omitempty"`
	Usecs            *int64 `protobuf:"varint,2,req,name=usecs" json:"usecs,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TimeStamp) Reset()                    { *m = TimeStamp{} }
func (m *TimeStamp) String() string            { return proto.CompactTextString(m) }
func (*TimeStamp) ProtoMessage()               {}
func (*TimeStamp) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{11} }

func (m *TimeStamp) GetSecs() int64 {
	if m != nil && m.Secs != nil {
		return *m.Secs
	}
	return 0
}

func (m *TimeStamp) GetUsecs() int64 {
	if m != nil && m.Usecs != nil {
		return *m.Usecs
	}
	return 0
}

type OperationalStatus struct {
	State            *OperationalState `protobuf:"varint,1,opt,name=state,enum=OperationalState" json:"state,omitempty"`
	Reason           []string          `protobuf:"bytes,2,rep,name=reason" json:"reason,omitempty"`
	ReasonCode       *uint64           `protobuf:"varint,3,opt,name=reason_code" json:"reason_code,omitempty"`
	LastChangedTime  *TimeStamp        `protobuf:"bytes,4,opt,name=last_changed_time" json:"last_changed_time,omitempty"`
	ReasonCodeString *string           `protobuf:"bytes,5,opt,name=reason_code_string" json:"reason_code_string,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *OperationalStatus) Reset()                    { *m = OperationalStatus{} }
func (m *OperationalStatus) String() string            { return proto.CompactTextString(m) }
func (*OperationalStatus) ProtoMessage()               {}
func (*OperationalStatus) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{12} }

func (m *OperationalStatus) GetState() OperationalState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return OperationalState_OPER_UP
}

func (m *OperationalStatus) GetReason() []string {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (m *OperationalStatus) GetReasonCode() uint64 {
	if m != nil && m.ReasonCode != nil {
		return *m.ReasonCode
	}
	return 0
}

func (m *OperationalStatus) GetLastChangedTime() *TimeStamp {
	if m != nil {
		return m.LastChangedTime
	}
	return nil
}

func (m *OperationalStatus) GetReasonCodeString() string {
	if m != nil && m.ReasonCodeString != nil {
		return *m.ReasonCodeString
	}
	return ""
}

type ConfigurationStatus struct {
	State           *ConfigurationState `protobuf:"varint,1,req,name=state,enum=ConfigurationState,def=0" json:"state,omitempty"`
	Reason          []string            `protobuf:"bytes,2,rep,name=reason" json:"reason,omitempty"`
	ReasonCode      *uint64             `protobuf:"varint,3,opt,name=reason_code" json:"reason_code,omitempty"`
	LastChangedTime *TimeStamp          `protobuf:"bytes,4,opt,name=last_changed_time" json:"last_changed_time,omitempty"`
	// Bad, Temp Hack until we get rid of config status
	// used to send num_servers/enabled for pool when it is unused/inactive
	PvtData          *int64  `protobuf:"varint,5,opt,name=pvt_data" json:"pvt_data,omitempty"`
	PvtData_2        *int64  `protobuf:"varint,6,opt,name=pvt_data_2" json:"pvt_data_2,omitempty"`
	ReasonCodeString *string `protobuf:"bytes,7,opt,name=reason_code_string" json:"reason_code_string,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ConfigurationStatus) Reset()                    { *m = ConfigurationStatus{} }
func (m *ConfigurationStatus) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationStatus) ProtoMessage()               {}
func (*ConfigurationStatus) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{13} }

const Default_ConfigurationStatus_State ConfigurationState = ConfigurationState_CONFIG_UP

func (m *ConfigurationStatus) GetState() ConfigurationState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_ConfigurationStatus_State
}

func (m *ConfigurationStatus) GetReason() []string {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (m *ConfigurationStatus) GetReasonCode() uint64 {
	if m != nil && m.ReasonCode != nil {
		return *m.ReasonCode
	}
	return 0
}

func (m *ConfigurationStatus) GetLastChangedTime() *TimeStamp {
	if m != nil {
		return m.LastChangedTime
	}
	return nil
}

func (m *ConfigurationStatus) GetPvtData() int64 {
	if m != nil && m.PvtData != nil {
		return *m.PvtData
	}
	return 0
}

func (m *ConfigurationStatus) GetPvtData_2() int64 {
	if m != nil && m.PvtData_2 != nil {
		return *m.PvtData_2
	}
	return 0
}

func (m *ConfigurationStatus) GetReasonCodeString() string {
	if m != nil && m.ReasonCodeString != nil {
		return *m.ReasonCodeString
	}
	return ""
}

type BaseObjectRuntime struct {
	Uuid             *string `protobuf:"bytes,50000,req,name=uuid" json:"uuid,omitempty"`
	Name             *string `protobuf:"bytes,50001,opt,name=name,def=" json:"name,omitempty"`
	Slug             *string `protobuf:"bytes,50002,opt,name=slug" json:"slug,omitempty"`
	TenantUuid       *string `protobuf:"bytes,50003,opt,name=tenant_uuid,def=" json:"tenant_uuid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BaseObjectRuntime) Reset()                    { *m = BaseObjectRuntime{} }
func (m *BaseObjectRuntime) String() string            { return proto.CompactTextString(m) }
func (*BaseObjectRuntime) ProtoMessage()               {}
func (*BaseObjectRuntime) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{14} }

func (m *BaseObjectRuntime) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *BaseObjectRuntime) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BaseObjectRuntime) GetSlug() string {
	if m != nil && m.Slug != nil {
		return *m.Slug
	}
	return ""
}

func (m *BaseObjectRuntime) GetTenantUuid() string {
	if m != nil && m.TenantUuid != nil {
		return *m.TenantUuid
	}
	return ""
}

type VCenterDefaults struct {
	AviInternalNetwork *string `protobuf:"bytes,1,opt,name=avi_internal_network,def=Avi Internal" json:"avi_internal_network,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *VCenterDefaults) Reset()                    { *m = VCenterDefaults{} }
func (m *VCenterDefaults) String() string            { return proto.CompactTextString(m) }
func (*VCenterDefaults) ProtoMessage()               {}
func (*VCenterDefaults) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{15} }

const Default_VCenterDefaults_AviInternalNetwork string = "Avi Internal"

func (m *VCenterDefaults) GetAviInternalNetwork() string {
	if m != nil && m.AviInternalNetwork != nil {
		return *m.AviInternalNetwork
	}
	return Default_VCenterDefaults_AviInternalNetwork
}

type AppInfo struct {
	AppHdrName       *string `protobuf:"bytes,1,req,name=app_hdr_name" json:"app_hdr_name,omitempty"`
	AppHdrValue      *string `protobuf:"bytes,2,req,name=app_hdr_value" json:"app_hdr_value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AppInfo) Reset()                    { *m = AppInfo{} }
func (m *AppInfo) String() string            { return proto.CompactTextString(m) }
func (*AppInfo) ProtoMessage()               {}
func (*AppInfo) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{16} }

func (m *AppInfo) GetAppHdrName() string {
	if m != nil && m.AppHdrName != nil {
		return *m.AppHdrName
	}
	return ""
}

func (m *AppInfo) GetAppHdrValue() string {
	if m != nil && m.AppHdrValue != nil {
		return *m.AppHdrValue
	}
	return ""
}

type PoolUpdate struct {
	Action           *PoolAction `protobuf:"varint,1,req,name=action,enum=PoolAction" json:"action,omitempty"`
	ObjUuid          *string     `protobuf:"bytes,2,req,name=obj_uuid" json:"obj_uuid,omitempty"`
	ServerIps        []string    `protobuf:"bytes,3,rep,name=server_ips" json:"server_ips,omitempty"`
	VrfUuid          *string     `protobuf:"bytes,4,opt,name=vrf_uuid" json:"vrf_uuid,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *PoolUpdate) Reset()                    { *m = PoolUpdate{} }
func (m *PoolUpdate) String() string            { return proto.CompactTextString(m) }
func (*PoolUpdate) ProtoMessage()               {}
func (*PoolUpdate) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{17} }

func (m *PoolUpdate) GetAction() PoolAction {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return PoolAction_POOL_ACTION_UPDATED
}

func (m *PoolUpdate) GetObjUuid() string {
	if m != nil && m.ObjUuid != nil {
		return *m.ObjUuid
	}
	return ""
}

func (m *PoolUpdate) GetServerIps() []string {
	if m != nil {
		return m.ServerIps
	}
	return nil
}

func (m *PoolUpdate) GetVrfUuid() string {
	if m != nil && m.VrfUuid != nil {
		return *m.VrfUuid
	}
	return ""
}

type ServerFilter struct {
	// IP/Prefix/Range and port
	ServerIp         *IpAddr `protobuf:"bytes,1,opt,name=server_ip" json:"server_ip,omitempty"`
	ServerMask       *int32  `protobuf:"varint,2,opt,name=server_mask" json:"server_mask,omitempty"`
	ServerEndIp      *IpAddr `protobuf:"bytes,3,opt,name=server_end_ip" json:"server_end_ip,omitempty"`
	ServerPort       *int32  `protobuf:"varint,4,opt,name=server_port" json:"server_port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ServerFilter) Reset()                    { *m = ServerFilter{} }
func (m *ServerFilter) String() string            { return proto.CompactTextString(m) }
func (*ServerFilter) ProtoMessage()               {}
func (*ServerFilter) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{18} }

func (m *ServerFilter) GetServerIp() *IpAddr {
	if m != nil {
		return m.ServerIp
	}
	return nil
}

func (m *ServerFilter) GetServerMask() int32 {
	if m != nil && m.ServerMask != nil {
		return *m.ServerMask
	}
	return 0
}

func (m *ServerFilter) GetServerEndIp() *IpAddr {
	if m != nil {
		return m.ServerEndIp
	}
	return nil
}

func (m *ServerFilter) GetServerPort() int32 {
	if m != nil && m.ServerPort != nil {
		return *m.ServerPort
	}
	return 0
}

type IpAddrPort struct {
	Ip               *IpAddr `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port             *Port   `protobuf:"bytes,2,req,name=port" json:"port,omitempty"`
	Hostname         *string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	Name             *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IpAddrPort) Reset()                    { *m = IpAddrPort{} }
func (m *IpAddrPort) String() string            { return proto.CompactTextString(m) }
func (*IpAddrPort) ProtoMessage()               {}
func (*IpAddrPort) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{19} }

func (m *IpAddrPort) GetIp() *IpAddr {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *IpAddrPort) GetPort() *Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *IpAddrPort) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *IpAddrPort) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Port)(nil), "Port")
	proto.RegisterType((*PortRange)(nil), "PortRange")
	proto.RegisterType((*RepeatableString)(nil), "RepeatableString")
	proto.RegisterType((*Tag)(nil), "Tag")
	proto.RegisterType((*TenantConfiguration)(nil), "TenantConfiguration")
	proto.RegisterType((*Tenant)(nil), "Tenant")
	proto.RegisterType((*IpAddrRange)(nil), "IpAddrRange")
	proto.RegisterType((*HTTPLocalFile)(nil), "HTTPLocalFile")
	proto.RegisterType((*VoidResponse)(nil), "VoidResponse")
	proto.RegisterType((*NullObj)(nil), "NullObj")
	proto.RegisterType((*PBDescription)(nil), "PBDescription")
	proto.RegisterType((*TimeStamp)(nil), "TimeStamp")
	proto.RegisterType((*OperationalStatus)(nil), "OperationalStatus")
	proto.RegisterType((*ConfigurationStatus)(nil), "ConfigurationStatus")
	proto.RegisterType((*BaseObjectRuntime)(nil), "BaseObjectRuntime")
	proto.RegisterType((*VCenterDefaults)(nil), "vCenterDefaults")
	proto.RegisterType((*AppInfo)(nil), "AppInfo")
	proto.RegisterType((*PoolUpdate)(nil), "PoolUpdate")
	proto.RegisterType((*ServerFilter)(nil), "ServerFilter")
	proto.RegisterType((*IpAddrPort)(nil), "IpAddrPort")
	proto.RegisterEnum("AviObjectType", AviObjectType_name, AviObjectType_value)
	proto.RegisterEnum("ConnectionType", ConnectionType_name, ConnectionType_value)
	proto.RegisterEnum("Hypervisor", Hypervisor_name, Hypervisor_value)
	proto.RegisterEnum("ImageFormat", ImageFormat_name, ImageFormat_value)
	proto.RegisterEnum("TagType", TagType_name, TagType_value)
	proto.RegisterEnum("IpAddrMode", IpAddrMode_name, IpAddrMode_value)
	proto.RegisterEnum("ProtocolType", ProtocolType_name, ProtocolType_value)
	proto.RegisterEnum("HTTPProtocol", HTTPProtocol_name, HTTPProtocol_value)
	proto.RegisterEnum("HTTPMethod", HTTPMethod_name, HTTPMethod_value)
	proto.RegisterEnum("HTTPVersion", HTTPVersion_name, HTTPVersion_value)
	proto.RegisterEnum("HTTPRedirectStatusCode", HTTPRedirectStatusCode_name, HTTPRedirectStatusCode_value)
	proto.RegisterEnum("HTTPLocalResponseStatusCode", HTTPLocalResponseStatusCode_name, HTTPLocalResponseStatusCode_value)
	proto.RegisterEnum("MatchCase", MatchCase_name, MatchCase_value)
	proto.RegisterEnum("MatchOperation", MatchOperation_name, MatchOperation_value)
	proto.RegisterEnum("HdrMatchOperation", HdrMatchOperation_name, HdrMatchOperation_value)
	proto.RegisterEnum("StringOperation", StringOperation_name, StringOperation_value)
	proto.RegisterEnum("QueryMatchOperation", QueryMatchOperation_name, QueryMatchOperation_value)
	proto.RegisterEnum("AdminState", AdminState_name, AdminState_value)
	proto.RegisterEnum("OperationalState", OperationalState_name, OperationalState_value)
	proto.RegisterEnum("ConfigurationState", ConfigurationState_name, ConfigurationState_value)
	proto.RegisterEnum("Privilege", Privilege_name, Privilege_value)
	proto.RegisterEnum("ResourceCategory", ResourceCategory_name, ResourceCategory_value)
	proto.RegisterEnum("PoolAction", PoolAction_name, PoolAction_value)
	proto.RegisterEnum("HTTPPolicyVar", HTTPPolicyVar_name, HTTPPolicyVar_value)
	proto.RegisterEnum("CloudType", CloudType_name, CloudType_value)
	proto.RegisterEnum("SeVerNum", SeVerNum_name, SeVerNum_value)
	proto.RegisterEnum("AutoScaleAction", AutoScaleAction_name, AutoScaleAction_value)
	proto.RegisterEnum("CONSTANTS", CONSTANTS_name, CONSTANTS_value)
}

var fileDescriptor16 = []byte{
	// 6037 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x5b, 0x69, 0x74, 0x1b, 0xd7,
	0x75, 0x36, 0x08, 0x92, 0x20, 0x1e, 0x48, 0xf1, 0x71, 0xb4, 0x90, 0x02, 0x4d, 0x79, 0x04, 0x79,
	0x91, 0x90, 0x88, 0x92, 0x68, 0xcb, 0x8b, 0xe2, 0xc4, 0x1d, 0x02, 0x43, 0x72, 0x2c, 0x60, 0x06,
	0x9a, 0x01, 0x40, 0x29, 0x3f, 0x82, 0x03, 0x02, 0x23, 0x11, 0x31, 0x89, 0x41, 0x80, 0x01, 0x1d,
	0xf5, 0x9c, 0x9e, 0x93, 0xa4, 0x69, 0x9a, 0xb8, 0x4d, 0xcf, 0xa9, 0x93, 0x36, 0x6d, 0x9a, 0x34,
	0x69, 0xda, 0x38, 0x4d, 0xdb, 0x6c, 0xce, 0xbe, 0xef, 0x4b, 0x7b, 0xda, 0x9e, 0xa6, 0xed, 0xcf,
	0xa4, 0xcd, 0xbe, 0xd8, 0xce, 0xbe, 0xb6, 0xd9, 0x7a, 0xef, 0x7d, 0x6f, 0x80, 0x01, 0x37, 0x27,
	0xe7, 0xf4, 0x87, 0x45, 0xcc, 0x7d, 0xef, 0x2e, 0xef, 0xde, 0xef, 0xdd, 0x77, 0xdf, 0x62, 0x36,
	0x5e, 0xf3, 0x36, 0x37, 0xbd, 0xe6, 0x7c, 0xab, 0xed, 0xf9, 0x5e, 0x72, 0xc2, 0x6b, 0xf9, 0x0d,
	0xaf, 0xd9, 0x11, 0x9f, 0x29, 0x9b, 0x0d, 0x17, 0xbc, 0xb6, 0xaf, 0x9c, 0x63, 0xc3, 0x2d, 0xf8,
	0x3b, 0x13, 0x51, 0x87, 0x4e, 0x4e, 0x2c, 0x9e, 0x78, 0xdd, 0x23, 0x73, 0x87, 0x8a, 0x99, 0xc2,
	0x99, 0x52, 0xb6, 0xa0, 0x22, 0x5d, 0x6d, 0x76, 0x37, 0xd7, 0xdc, 0xf6, 0xfc, 0xa3, 0x8f, 0xcc,
	0xc5, 0xce, 0x9d, 0xbe, 0xf3, 0xfc, 0xf9, 0xdb, 0xcf, 0x5f, 0x98, 0x7e, 0xe8, 0x91, 0xb9, 0x83,
	0xbb, 0x74, 0x4a, 0xbd, 0x24, 0xc2, 0xe2, 0x28, 0xd4, 0xae, 0x36, 0xaf, 0xb9, 0xca, 0x7d, 0x6c,
	0xa4, 0xe3, 0x57, 0xa5, 0xe8, 0xc4, 0xc2, 0xc8, 0x3c, 0x36, 0x2d, 0x9e, 0x02, 0x0d, 0xb7, 0x0c,
	0x30, 0xb7, 0xb1, 0xb7, 0x4a, 0x5d, 0xd5, 0x93, 0x8d, 0x66, 0x6d, 0xa3, 0xdb, 0x69, 0x6c, 0xb9,
	0xa7, 0xe6, 0x95, 0xa7, 0xb1, 0xa8, 0xdb, 0xac, 0xcf, 0x0c, 0x85, 0xd9, 0x6f, 0x03, 0xf6, 0x13,
	0xbb, 0xb0, 0x43, 0xc7, 0x01, 0xe6, 0xd4, 0x9d, 0x8c, 0xdb, 0x6e, 0xcb, 0xad, 0xfa, 0xd5, 0xb5,
	0x0d, 0xd7, 0xf1, 0xdb, 0x8d, 0xe6, 0x35, 0x25, 0xc1, 0xa2, 0x1d, 0xbf, 0x4d, 0xf6, 0xc4, 0x2f,
	0x1c, 0x86, 0x51, 0x4c, 0xf5, 0xbb, 0xa8, 0xa2, 0x4f, 0x2a, 0xc7, 0xa2, 0xc5, 0xea, 0x35, 0x65,
	0x82, 0x8d, 0x6c, 0x55, 0x37, 0xba, 0xae, 0xe8, 0xac, 0xdc, 0xcc, 0x86, 0xfd, 0xeb, 0x2d, 0x17,
	0x6c, 0x89, 0x9c, 0x3c, 0xb0, 0x30, 0x36, 0x0f, 0x5d, 0x8a, 0xf0, 0x7d, 0x61, 0xbc, 0xe4, 0xe8,
	0x76, 0x25, 0xab, 0x2f, 0x19, 0xa6, 0x9e, 0xbd, 0xc0, 0x41, 0x24, 0x72, 0xbf, 0xf2, 0x91, 0x39,
	0xc1, 0x9d, 0x7a, 0x41, 0x84, 0x1d, 0x2c, 0xba, 0xcd, 0x6a, 0xd3, 0xcf, 0x78, 0xcd, 0xab, 0x8d,
	0x6b, 0xdd, 0x76, 0x15, 0x83, 0xa0, 0x1c, 0x65, 0xcc, 0x27, 0x72, 0x65, 0xab, 0x7d, 0x15, 0x74,
	0x44, 0x4e, 0x8e, 0x5d, 0x18, 0xb9, 0x5a, 0xdd, 0xe8, 0xb8, 0xa0, 0xea, 0x48, 0xc7, 0xad, 0x34,
	0x9a, 0x15, 0x88, 0xd3, 0x56, 0xa3, 0xee, 0xb6, 0x2b, 0x35, 0xaf, 0xe9, 0xbb, 0xcf, 0xf5, 0x67,
	0xa2, 0xd4, 0x6d, 0xd8, 0x6f, 0x77, 0x5d, 0x25, 0xcd, 0x6e, 0x94, 0x02, 0xaa, 0xb5, 0x9a, 0xdb,
	0xe9, 0x54, 0x7c, 0xaf, 0xcf, 0xd0, 0x71, 0x67, 0x86, 0xfb, 0x7d, 0x53, 0xaf, 0x89, 0xb0, 0x51,
	0x61, 0x84, 0x32, 0xce, 0x86, 0xbb, 0xdd, 0x46, 0x5d, 0x8e, 0x0a, 0xbe, 0x9a, 0xd5, 0x4d, 0x97,
	0x3c, 0x1c, 0x57, 0x0e, 0xb2, 0x91, 0x0d, 0xaf, 0x56, 0xdd, 0x18, 0xd0, 0x73, 0x90, 0x25, 0xea,
	0x6e, 0xa7, 0xd6, 0x6e, 0x10, 0x78, 0x48, 0x6c, 0x5c, 0x39, 0xcd, 0x26, 0x6b, 0x34, 0x1c, 0xd0,
	0xe4, 0xfb, 0xe0, 0xb5, 0xce, 0xcc, 0x08, 0x34, 0x24, 0x16, 0x0e, 0xcd, 0xef, 0x32, 0xd8, 0x0b,
	0x2a, 0x80, 0x27, 0x21, 0x1b, 0xd6, 0xdd, 0xda, 0x03, 0x1f, 0x7b, 0x64, 0x6e, 0x42, 0x7c, 0x66,
	0xdd, 0xab, 0xd5, 0xee, 0x86, 0x9f, 0x7a, 0x79, 0x84, 0x25, 0x8c, 0x96, 0x56, 0xaf, 0xb7, 0x05,
	0x74, 0xee, 0x65, 0x23, 0x6b, 0xee, 0xb5, 0x46, 0x53, 0x42, 0x27, 0x36, 0x2f, 0x1a, 0x17, 0x6f,
	0x86, 0xe8, 0x43, 0xa0, 0x00, 0x29, 0xa0, 0x54, 0x35, 0x0a, 0x6a, 0x15, 0xa8, 0x30, 0x7a, 0xd5,
	0xbb, 0xaa, 0xfa, 0xeb, 0xae, 0xc0, 0x82, 0x72, 0x77, 0x18, 0x37, 0x3d, 0xde, 0x14, 0xf0, 0x1e,
	0xd3, 0x9b, 0xf5, 0x7d, 0x38, 0x2f, 0x4c, 0x40, 0xe4, 0xe2, 0xa4, 0xf9, 0xa9, 0x20, 0x21, 0xf5,
	0xfa, 0x08, 0x9b, 0x58, 0x29, 0x16, 0x0b, 0x39, 0x74, 0xcb, 0x52, 0x63, 0x03, 0x31, 0x3d, 0x4e,
	0xd1, 0x00, 0xbf, 0x13, 0x1e, 0xc8, 0x8f, 0x02, 0xd3, 0xf9, 0xc6, 0xa6, 0x7b, 0x1a, 0x89, 0x81,
	0x48, 0xd9, 0x51, 0x6d, 0x34, 0xe9, 0xf3, 0x2a, 0xf0, 0xcf, 0x2b, 0x0e, 0x1b, 0xc7, 0x1f, 0x15,
	0xd9, 0x28, 0x5c, 0xbf, 0xf8, 0x74, 0x10, 0x70, 0x1e, 0x15, 0xf4, 0x98, 0x7c, 0x4f, 0xed, 0x76,
	0xdc, 0x7a, 0xc0, 0x4c, 0x81, 0x51, 0xd1, 0x16, 0x15, 0xac, 0x6e, 0xc1, 0x34, 0x76, 0xd5, 0x35,
	0xaf, 0x7e, 0x7d, 0xfe, 0x23, 0x6f, 0x98, 0x8b, 0xa4, 0x0e, 0xb0, 0xf1, 0xb2, 0xd7, 0xa8, 0xdb,
	0xb2, 0x25, 0x15, 0x67, 0x31, 0xb3, 0xbb, 0xb1, 0x61, 0xad, 0x3d, 0x3b, 0x75, 0x0f, 0x9b, 0x28,
	0x2c, 0x66, 0xfb, 0x11, 0x84, 0x80, 0xc6, 0xc9, 0x00, 0x0a, 0xfc, 0x17, 0xfe, 0x33, 0x2a, 0x43,
	0x1f, 0x47, 0xcb, 0x05, 0xf1, 0x8b, 0x82, 0x98, 0xba, 0x8b, 0xc5, 0x8b, 0x30, 0x26, 0x70, 0xf7,
	0x66, 0x0b, 0xa1, 0xd2, 0x71, 0x6b, 0x1d, 0x1a, 0x70, 0x14, 0x67, 0x47, 0x97, 0x3e, 0xd1, 0xfc,
	0xe8, 0x85, 0x09, 0xc0, 0x7d, 0xbf, 0x6f, 0xea, 0x9d, 0x11, 0x36, 0x65, 0xb5, 0x5c, 0x11, 0xfd,
	0xea, 0x06, 0x10, 0xfd, 0x6e, 0x47, 0x51, 0x29, 0x1d, 0xf8, 0x2e, 0xa1, 0xfd, 0xc0, 0xc2, 0xd4,
	0xfc, 0xb6, 0x2e, 0xae, 0x72, 0x80, 0x8d, 0xb6, 0xdd, 0x6a, 0x07, 0x60, 0x36, 0xa4, 0x46, 0xc9,
	0xaa, 0x84, 0xf8, 0x06, 0x6f, 0xd5, 0x5d, 0x82, 0xe5, 0xb0, 0x72, 0x0b, 0x9b, 0xda, 0xa8, 0x76,
	0xfc, 0x4a, 0x6d, 0x1d, 0x23, 0x56, 0xaf, 0xf8, 0xa0, 0x96, 0x60, 0x99, 0x58, 0x60, 0xf3, 0x7d,
	0x7b, 0x93, 0x4c, 0x09, 0xf1, 0x56, 0x3a, 0x34, 0xb9, 0x09, 0xa5, 0xf1, 0x0b, 0x47, 0xc0, 0x5c,
	0x25, 0xa4, 0x5d, 0x15, 0x16, 0xa6, 0x9e, 0x80, 0xc9, 0x3a, 0x80, 0x5c, 0x69, 0xf9, 0xe9, 0xbe,
	0xe5, 0x43, 0x60, 0xf9, 0xc1, 0xf9, 0x1d, 0x9d, 0xdc, 0x0b, 0xf1, 0x8c, 0x65, 0x2e, 0x19, 0xcb,
	0x95, 0x52, 0xe1, 0xff, 0x75, 0x18, 0x9c, 0x8d, 0xb5, 0xb6, 0xfc, 0x4a, 0x1d, 0x72, 0x14, 0x19,
	0x1f, 0x55, 0x14, 0xc6, 0x02, 0x4a, 0x65, 0x61, 0x66, 0x94, 0x68, 0xbb, 0x0f, 0x36, 0x46, 0x83,
	0x9d, 0x81, 0xc1, 0x1e, 0x1a, 0x30, 0x38, 0x18, 0xee, 0xb3, 0xd8, 0xd4, 0x62, 0xb5, 0xe3, 0x02,
	0x4a, 0xdc, 0x9a, 0x6f, 0x77, 0x9b, 0x68, 0x02, 0x18, 0x2f, 0x12, 0xc4, 0xbf, 0xbd, 0x48, 0x20,
	0x83, 0xcb, 0x14, 0xf1, 0xd9, 0x17, 0x45, 0x49, 0xdc, 0x0d, 0xd8, 0xa3, 0xb3, 0xd1, 0xbd, 0x36,
	0xf3, 0xef, 0x82, 0xa2, 0x4c, 0xb3, 0x84, 0xcc, 0x44, 0xc4, 0xf8, 0x1f, 0x41, 0xc7, 0xd4, 0xd3,
	0xd9, 0xe4, 0x56, 0x06, 0xb0, 0xec, 0xb6, 0xe5, 0x34, 0xef, 0x40, 0xd6, 0x3a, 0x54, 0xdd, 0x6a,
	0x40, 0x72, 0x03, 0x22, 0x38, 0xbe, 0xd2, 0x74, 0xfd, 0x07, 0xbd, 0xf6, 0x03, 0x04, 0x89, 0xf8,
	0x85, 0x71, 0x6d, 0xab, 0xa1, 0x1a, 0xb2, 0x0d, 0x12, 0x78, 0x4c, 0x6b, 0xb5, 0x8c, 0xe6, 0x55,
	0x4f, 0x39, 0xc4, 0xc6, 0xab, 0xad, 0x56, 0x65, 0xbd, 0xde, 0x16, 0x08, 0x15, 0xd9, 0xeb, 0x30,
	0x9b, 0x08, 0xa8, 0x22, 0x55, 0xd3, 0x5c, 0x4a, 0x55, 0x19, 0x2b, 0x78, 0xde, 0x46, 0xa9, 0x55,
	0x47, 0x4c, 0xcd, 0xb2, 0xd1, 0x6a, 0x8d, 0x52, 0x97, 0x08, 0x5e, 0x62, 0x1e, 0x1b, 0x35, 0x22,
	0xa1, 0x77, 0xbd, 0xb5, 0x67, 0x0b, 0xbb, 0x45, 0x0e, 0x04, 0xef, 0x76, 0xdc, 0xf6, 0x16, 0xe4,
	0xd0, 0x46, 0xab, 0x03, 0xa1, 0x8a, 0x92, 0x0b, 0xc6, 0x20, 0x49, 0x8b, 0x5e, 0x94, 0xff, 0x52,
	0x3e, 0x1b, 0x77, 0xa8, 0x17, 0x4c, 0x59, 0xb0, 0x16, 0xfc, 0x1f, 0xef, 0x71, 0xd1, 0x58, 0xfa,
	0x69, 0x07, 0xa3, 0x2f, 0xdb, 0x36, 0xab, 0x9d, 0x07, 0x68, 0x01, 0x19, 0x51, 0x8e, 0xb1, 0x09,
	0x49, 0x84, 0x34, 0x83, 0x4c, 0xd1, 0xbd, 0x98, 0x68, 0x6d, 0x46, 0xad, 0x23, 0xa9, 0x9f, 0x45,
	0x18, 0x13, 0xed, 0xb4, 0x70, 0x5f, 0x66, 0x43, 0x3b, 0xb4, 0x2d, 0x66, 0x20, 0x91, 0xdc, 0x07,
	0xd9, 0x4d, 0xeb, 0x67, 0xb7, 0x75, 0xaf, 0xe3, 0xcf, 0xab, 0x56, 0x93, 0xf2, 0x52, 0x38, 0xf1,
	0xb5, 0xa9, 0x09, 0x1d, 0xaa, 0x76, 0xd6, 0xbd, 0xee, 0x46, 0x5d, 0x5d, 0x83, 0x5f, 0xae, 0xaf,
	0xcc, 0xcb, 0x92, 0x60, 0x60, 0xe1, 0x3d, 0x0a, 0x92, 0x0f, 0x17, 0xfa, 0x8b, 0x3d, 0x4a, 0x13,
	0x36, 0x2a, 0x25, 0x36, 0x16, 0x48, 0xa2, 0x81, 0xc4, 0x85, 0x19, 0x2b, 0x81, 0xf4, 0x5e, 0xcf,
	0xdf, 0xcc, 0x8c, 0x60, 0x75, 0x22, 0x9f, 0xa7, 0x5f, 0x76, 0x9c, 0x4d, 0x00, 0x3e, 0x04, 0x5a,
	0x71, 0xed, 0x05, 0x27, 0x1d, 0x28, 0x1b, 0x76, 0xb1, 0xa4, 0xe5, 0x60, 0x0d, 0x2e, 0x1b, 0x19,
	0x9d, 0x7f, 0x33, 0xa6, 0xc4, 0xa1, 0xac, 0xb1, 0xac, 0x1c, 0x7f, 0x2c, 0x06, 0xb1, 0x9c, 0x58,
	0xd1, 0xb5, 0x5c, 0x71, 0x25, 0x6f, 0x99, 0x46, 0xd1, 0xb2, 0xf9, 0xe3, 0x31, 0xe4, 0x31, 0xf5,
	0xe2, 0xaa, 0x65, 0x5f, 0x2c, 0xd8, 0xd6, 0x92, 0x91, 0xd3, 0xf9, 0x13, 0x31, 0x40, 0xb0, 0xa2,
	0x15, 0x0a, 0x39, 0x23, 0xa3, 0x15, 0x0d, 0xcb, 0x0c, 0x1a, 0xbe, 0x25, 0x24, 0x40, 0xca, 0x2d,
	0x58, 0xd0, 0x76, 0xc5, 0xd1, 0x8b, 0xfc, 0xdb, 0x31, 0x40, 0x43, 0xc2, 0x28, 0x68, 0xd9, 0xac,
	0xbd, 0x6c, 0x5b, 0xa5, 0x02, 0xff, 0x1e, 0x51, 0x9c, 0xa2, 0x6d, 0x98, 0xcb, 0x82, 0xf2, 0xfd,
	0x98, 0x32, 0xc9, 0x98, 0xe3, 0xe4, 0x02, 0x41, 0x3f, 0x88, 0xc1, 0x72, 0x7f, 0x08, 0x08, 0x17,
	0xf5, 0x2b, 0x9a, 0x99, 0xcd, 0xe8, 0x76, 0xd1, 0x58, 0x42, 0x65, 0x3a, 0xff, 0x61, 0x0c, 0xb0,
	0x73, 0x58, 0x5a, 0xe4, 0xe8, 0x99, 0x92, 0x6d, 0x14, 0xaf, 0x08, 0x75, 0xfc, 0x47, 0x31, 0x25,
	0xc5, 0xe6, 0xc2, 0x86, 0xe9, 0xb6, 0x63, 0x38, 0x45, 0xdd, 0xcc, 0xe8, 0x81, 0xe8, 0x1f, 0xc7,
	0x60, 0x16, 0x70, 0xcd, 0xd4, 0x72, 0x57, 0x8a, 0x46, 0xc6, 0x09, 0xc8, 0x3f, 0x89, 0xc1, 0x94,
	0x99, 0x2c, 0x3b, 0x59, 0xad, 0xa8, 0x39, 0x19, 0xdb, 0x28, 0x14, 0xd1, 0xf8, 0x9f, 0xc6, 0xa0,
	0x00, 0x1a, 0x05, 0x7e, 0xcd, 0x2c, 0xf2, 0xff, 0x21, 0x2b, 0x0b, 0x17, 0x8d, 0x80, 0xe7, 0x7f,
	0x69, 0x20, 0x5a, 0xa9, 0xb8, 0x12, 0x50, 0x7e, 0x16, 0x83, 0xd9, 0x30, 0x92, 0xc9, 0x59, 0xa5,
	0x2c, 0xff, 0x39, 0x19, 0x8a, 0x7e, 0xd6, 0x6d, 0xe8, 0x63, 0x39, 0x19, 0x2d, 0xa7, 0x4b, 0x43,
	0x7f, 0x41, 0x6d, 0x3d, 0x6a, 0x4e, 0x2b, 0x99, 0x99, 0x15, 0x91, 0x0e, 0xf9, 0x2f, 0x63, 0xca,
	0x11, 0x36, 0x95, 0x37, 0x32, 0xb6, 0x25, 0x83, 0x24, 0x9c, 0xf4, 0xab, 0xc0, 0x91, 0xf9, 0x40,
	0xdb, 0xf3, 0xc6, 0x60, 0x85, 0x98, 0x5d, 0xd1, 0xec, 0xec, 0xaa, 0x66, 0xeb, 0x81, 0x2f, 0xf2,
	0x56, 0xb6, 0x94, 0x93, 0x3c, 0xcf, 0x1f, 0xc3, 0x80, 0x48, 0x31, 0xba, 0xb9, 0x0c, 0x25, 0x17,
	0xff, 0x5c, 0x02, 0xa3, 0x97, 0xd5, 0x17, 0x4b, 0xcb, 0x83, 0x0d, 0x9f, 0x4f, 0xa0, 0x0b, 0xa8,
	0x01, 0x4c, 0x29, 0xda, 0x56, 0x2e, 0xa7, 0xdb, 0xfc, 0xbf, 0x12, 0xca, 0x0c, 0x3b, 0x48, 0xd4,
	0x6d, 0xd0, 0xf9, 0x6f, 0x12, 0x34, 0x20, 0x43, 0x68, 0xfd, 0x42, 0x42, 0x99, 0x82, 0xe9, 0x8e,
	0x2e, 0x2f, 0x60, 0xe4, 0x74, 0x87, 0x7f, 0x31, 0x01, 0xd8, 0x8c, 0xc9, 0xa8, 0xf1, 0x2f, 0x25,
	0x10, 0x55, 0x7d, 0x25, 0xa6, 0x95, 0xd5, 0xf9, 0x97, 0x13, 0x18, 0xf3, 0x3e, 0x31, 0xc4, 0xfd,
	0x15, 0xb2, 0xc1, 0xb9, 0x02, 0x91, 0xcc, 0x0b, 0x2f, 0x95, 0x6c, 0x8a, 0x2f, 0xff, 0x6a, 0x02,
	0x63, 0x52, 0xb6, 0x97, 0x90, 0x4f, 0xbf, 0x5c, 0xe4, 0x5f, 0x4b, 0x20, 0x9e, 0xb1, 0xc4, 0xe4,
	0x5f, 0x4f, 0x50, 0x78, 0x40, 0x54, 0x51, 0xba, 0xf6, 0x1b, 0x09, 0x74, 0x2d, 0x51, 0x40, 0x58,
	0xce, 0x5a, 0x96, 0xf4, 0x6f, 0x26, 0x08, 0x13, 0x48, 0xd7, 0xf3, 0x9a, 0x91, 0x93, 0xe4, 0xc7,
	0xc8, 0x21, 0x44, 0x06, 0x88, 0xe9, 0x92, 0xfa, 0xb8, 0x10, 0xdb, 0x07, 0x19, 0x7f, 0x82, 0x74,
	0x82, 0xd5, 0x30, 0x03, 0x88, 0x85, 0x00, 0x10, 0xb2, 0xff, 0xdb, 0x44, 0x75, 0xcc, 0x7c, 0xa1,
	0x68, 0x03, 0xa3, 0x0c, 0xdf, 0x77, 0xc8, 0x7f, 0x5a, 0x06, 0x65, 0x90, 0xe3, 0x82, 0x86, 0xef,
	0x92, 0xff, 0xc2, 0x08, 0xe0, 0xdf, 0xeb, 0x8f, 0xa5, 0xa0, 0xd9, 0x5a, 0xde, 0xe1, 0xdf, 0x27,
	0x1f, 0x42, 0x59, 0xef, 0x14, 0xb5, 0xa2, 0x5d, 0x32, 0x8b, 0x46, 0x5e, 0xe7, 0x9f, 0x9d, 0x44,
	0x22, 0xe8, 0x0e, 0x13, 0xbf, 0x38, 0x89, 0x20, 0x30, 0x06, 0x68, 0x5f, 0xa2, 0x8e, 0x9a, 0x3d,
	0x40, 0xfc, 0x32, 0x75, 0xcc, 0x2f, 0x86, 0x69, 0x5f, 0x99, 0x44, 0x23, 0x91, 0xf9, 0xe2, 0x25,
	0xa4, 0x3b, 0x41, 0xc3, 0x57, 0x27, 0x09, 0xa6, 0x5a, 0x2e, 0x67, 0x65, 0xc2, 0x0c, 0x5f, 0x9b,
	0xa4, 0x58, 0xad, 0xec, 0x6c, 0xf9, 0xfa, 0x24, 0xf9, 0xa6, 0x50, 0x2a, 0x39, 0xda, 0xb2, 0x1e,
	0x50, 0xbf, 0x31, 0x89, 0x61, 0xcf, 0xdd, 0xb5, 0x9c, 0xb3, 0x16, 0x01, 0x5b, 0x61, 0x15, 0xdf,
	0x9c, 0x54, 0x8e, 0xb3, 0x1b, 0x73, 0x77, 0x0d, 0xe2, 0x6e, 0xa0, 0xcb, 0x63, 0xc4, 0xed, 0xe8,
	0x20, 0xd0, 0x2c, 0x96, 0x4d, 0x23, 0x93, 0x5d, 0x0c, 0x9a, 0x1e, 0x9f, 0x14, 0xf3, 0x8f, 0x9a,
	0x96, 0xc1, 0xef, 0x2b, 0xfd, 0xb6, 0x27, 0x84, 0x91, 0xa2, 0x0d, 0x05, 0xf6, 0xcc, 0xf9, 0xd6,
	0x24, 0x42, 0xc1, 0x00, 0x30, 0xd9, 0x4b, 0x5a, 0xa6, 0x47, 0xfe, 0x36, 0xd9, 0x0e, 0xfe, 0x2a,
	0x6a, 0x8b, 0xb9, 0x1e, 0xf5, 0x3b, 0xa4, 0x22, 0x6b, 0x38, 0x05, 0xad, 0x98, 0x59, 0x81, 0x5c,
	0x13, 0x1a, 0xed, 0x77, 0x27, 0x95, 0x9b, 0x58, 0x72, 0xb0, 0x2d, 0x93, 0xd3, 0x35, 0x3b, 0xe8,
	0xf0, 0xbd, 0x6d, 0x1d, 0x48, 0x72, 0xb6, 0x04, 0xb3, 0x5b, 0x76, 0xf8, 0xfe, 0xa4, 0x72, 0x8a,
	0xdd, 0xdc, 0xef, 0x60, 0xeb, 0x79, 0xab, 0xa8, 0x63, 0x93, 0x9d, 0x83, 0xa4, 0x16, 0xee, 0xfa,
	0x03, 0x1a, 0x4f, 0x5e, 0x87, 0x9c, 0x9a, 0x71, 0x68, 0x50, 0x79, 0xdd, 0xc1, 0x1f, 0xfc, 0x87,
	0x93, 0xca, 0x1c, 0x9b, 0x19, 0x48, 0xea, 0x61, 0x2b, 0x7f, 0x44, 0xfe, 0x93, 0x8c, 0xc0, 0x06,
	0xf9, 0x23, 0x68, 0xfa, 0x31, 0xc9, 0x0c, 0x65, 0x50, 0x72, 0x0a, 0xe4, 0x4d, 0xfe, 0x13, 0x1a,
	0xf6, 0x40, 0x9a, 0xef, 0xb5, 0xfd, 0x94, 0xda, 0x60, 0xaa, 0x98, 0x3a, 0x01, 0x3b, 0x6c, 0xe5,
	0xcf, 0x08, 0x5f, 0x0e, 0x24, 0x2c, 0x3d, 0x9b, 0x25, 0x94, 0x39, 0xfc, 0xe7, 0x84, 0xaf, 0x01,
	0x1a, 0x79, 0x89, 0xff, 0x82, 0x3c, 0x6e, 0x64, 0xf2, 0x03, 0x10, 0xfd, 0x25, 0xa1, 0x0e, 0x26,
	0x0b, 0x38, 0x22, 0x1c, 0x89, 0x5f, 0x4d, 0x86, 0xd6, 0xb6, 0xbc, 0x96, 0x59, 0xc1, 0x84, 0xf6,
	0x3c, 0x4e, 0x09, 0x1b, 0xd6, 0x36, 0x91, 0x85, 0xf9, 0xf3, 0x39, 0x94, 0xe1, 0x63, 0x8e, 0x5e,
	0x76, 0xd0, 0x81, 0xfc, 0x05, 0x1c, 0x99, 0xf2, 0x7a, 0xde, 0x30, 0x97, 0xac, 0x40, 0xd2, 0xef,
	0x72, 0x34, 0x08, 0x12, 0x01, 0x2e, 0x4f, 0x61, 0xd5, 0x2f, 0xe4, 0x22, 0x1b, 0x2c, 0x5b, 0x61,
	0xea, 0xef, 0x71, 0x74, 0xe0, 0x80, 0x7f, 0x83, 0xa6, 0x17, 0x91, 0x78, 0xc0, 0x7b, 0xb8, 0xff,
	0xef, 0x73, 0xcc, 0x15, 0x60, 0x42, 0x9e, 0xbf, 0x98, 0x7e, 0xae, 0x80, 0x38, 0xfe, 0x12, 0x0e,
	0x35, 0x62, 0xbc, 0x60, 0xd9, 0x45, 0x91, 0x41, 0x1f, 0xe2, 0x98, 0x2e, 0x33, 0x39, 0x60, 0x05,
	0xb3, 0xff, 0x80, 0xc6, 0x81, 0x2b, 0x53, 0x46, 0x47, 0x3f, 0xf3, 0x3f, 0xa4, 0xe6, 0xb2, 0xfc,
	0x7a, 0x29, 0x59, 0x3c, 0x10, 0x0e, 0xe1, 0xdb, 0x3f, 0x92, 0xe3, 0xa3, 0xe0, 0x3a, 0x62, 0xe2,
	0xf0, 0x3f, 0xe6, 0x50, 0xe0, 0x1d, 0x81, 0xf4, 0xa9, 0xe7, 0x8c, 0xbc, 0x51, 0x1c, 0x04, 0xed,
	0xc3, 0x1c, 0x31, 0xb9, 0xeb, 0xe2, 0x2a, 0xb8, 0x5f, 0xc6, 0x65, 0xd6, 0xc1, 0x08, 0x07, 0x5c,
	0x2f, 0x97, 0xd6, 0x5b, 0x62, 0xfa, 0xf2, 0x3f, 0xe1, 0x38, 0x87, 0xb0, 0x07, 0xd2, 0x7a, 0xd0,
	0xf8, 0x53, 0x8e, 0xe1, 0x0f, 0xc8, 0xa2, 0xeb, 0x2b, 0x38, 0xc6, 0xb3, 0x0c, 0xf1, 0x77, 0x56,
	0x9c, 0x15, 0x6b, 0x35, 0x10, 0xf9, 0x67, 0x44, 0x77, 0x74, 0xc8, 0xd1, 0x03, 0xf3, 0xfd, 0xcf,
	0x39, 0x2e, 0x79, 0xbb, 0x1a, 0x98, 0x05, 0x44, 0x18, 0x39, 0xfe, 0x4a, 0xb2, 0x10, 0x08, 0xba,
	0xe9, 0xf4, 0xe0, 0xf1, 0x17, 0x3c, 0x58, 0x07, 0xf5, 0x5e, 0x78, 0x5e, 0xc5, 0x11, 0xa9, 0xd2,
	0x3b, 0x92, 0xe8, 0x94, 0xf2, 0x79, 0xcd, 0xbe, 0xc2, 0x5f, 0xcd, 0x43, 0xd3, 0x42, 0xb6, 0x49,
	0xf9, 0x7f, 0xc9, 0xa1, 0x24, 0xbf, 0x25, 0x34, 0xaf, 0xf5, 0x15, 0x5c, 0x90, 0x17, 0x75, 0x58,
	0x3a, 0x0a, 0x40, 0x0e, 0xa3, 0xf2, 0x35, 0x3d, 0xc7, 0xd0, 0xfa, 0xc9, 0x5f, 0xcb, 0x31, 0x8b,
	0x97, 0x71, 0xe5, 0xc9, 0x2f, 0xdb, 0x79, 0xad, 0xc0, 0xff, 0x8a, 0x8b, 0x44, 0x64, 0x97, 0x00,
	0x84, 0x0e, 0x2e, 0x17, 0x96, 0x29, 0x3c, 0xf3, 0x3a, 0xe2, 0xc5, 0xa8, 0x66, 0x00, 0xce, 0x3a,
	0xff, 0x6b, 0x1a, 0x57, 0xef, 0x5b, 0x74, 0xfa, 0x1b, 0xf2, 0xb4, 0xa3, 0x67, 0x2d, 0x27, 0x1c,
	0xc6, 0xd7, 0x13, 0x19, 0x8a, 0x99, 0x41, 0xf2, 0x23, 0x84, 0x60, 0xe1, 0x85, 0x52, 0x21, 0x8b,
	0x59, 0x4f, 0xbf, 0xc4, 0xdf, 0x40, 0x82, 0xcb, 0x0e, 0x55, 0x22, 0x30, 0xb1, 0x68, 0x6a, 0xfc,
	0xad, 0x14, 0x0c, 0x93, 0x03, 0xc6, 0xd4, 0x93, 0xf0, 0x46, 0xf2, 0xcb, 0x60, 0xf8, 0xa5, 0x5f,
	0xfe, 0x4e, 0x0a, 0x2f, 0x15, 0x20, 0xd7, 0x66, 0xc9, 0xbe, 0x92, 0xc3, 0xff, 0x5e, 0xca, 0x91,
	0xd4, 0x82, 0xad, 0x97, 0x0d, 0x7d, 0x95, 0xff, 0x03, 0x17, 0xb9, 0x79, 0x49, 0x2b, 0xe5, 0x20,
	0x77, 0xdc, 0x0f, 0xb9, 0x42, 0xbf, 0xbc, 0xa2, 0x01, 0xdc, 0xf3, 0xfc, 0x4d, 0x5c, 0xb9, 0x91,
	0x4d, 0xef, 0xda, 0x96, 0xc9, 0xf1, 0x37, 0x73, 0x5c, 0x13, 0xf6, 0x68, 0x75, 0x70, 0xd1, 0xe1,
	0x6f, 0xe1, 0x98, 0xf2, 0x76, 0xeb, 0x82, 0x56, 0xf3, 0xb7, 0x4a, 0x97, 0xc3, 0x9c, 0xcd, 0xe6,
	0x20, 0x4b, 0x5a, 0x26, 0x40, 0x94, 0x3c, 0xf1, 0x36, 0x72, 0x79, 0xcf, 0x58, 0xfe, 0xa8, 0xb4,
	0x72, 0x60, 0x48, 0x72, 0xb8, 0x6f, 0xe7, 0xa2, 0xc6, 0xc1, 0xba, 0x0b, 0xfc, 0x99, 0x2d, 0x3b,
	0xfc, 0x1d, 0x12, 0xb3, 0x7d, 0x92, 0xc8, 0x64, 0xef, 0x24, 0x31, 0xf0, 0x05, 0x95, 0xac, 0x81,
	0x5e, 0x07, 0xdd, 0x30, 0xe9, 0xc9, 0xcf, 0xef, 0x22, 0xe7, 0x3b, 0xa2, 0x70, 0x0a, 0xf4, 0xbe,
	0x9b, 0xec, 0xb0, 0x75, 0x58, 0x0f, 0x35, 0xc8, 0xbb, 0xfc, 0x3d, 0xd2, 0x89, 0xd4, 0xa9, 0x4f,
	0x7e, 0x2f, 0x17, 0xf5, 0x17, 0x16, 0xa0, 0x03, 0x93, 0xe4, 0x7d, 0x24, 0xb4, 0x57, 0x5d, 0xd2,
	0xfa, 0xc6, 0xdf, 0x4f, 0x6e, 0x1d, 0x5c, 0x4a, 0x7b, 0x9c, 0xfc, 0x03, 0xe4, 0xb3, 0xdd, 0xe7,
	0x95, 0xe5, 0xf0, 0x0f, 0x92, 0x44, 0x28, 0xc6, 0xcb, 0x5a, 0x7f, 0x3e, 0x7f, 0x88, 0xc6, 0x25,
	0x88, 0x72, 0xe2, 0xf4, 0xda, 0x3e, 0xcc, 0xfb, 0xc5, 0x2f, 0xe9, 0x17, 0x78, 0xc3, 0x44, 0xcb,
	0x3f, 0xc2, 0x45, 0x8d, 0x04, 0xb5, 0x50, 0xe6, 0x62, 0x8f, 0xe3, 0xa3, 0x94, 0x97, 0x24, 0x75,
	0xbb, 0xb8, 0x8f, 0x51, 0xcc, 0xc2, 0x15, 0x51, 0x30, 0xd6, 0x8f, 0x4b, 0x07, 0x0e, 0x54, 0x4b,
	0x9f, 0x20, 0x59, 0xdb, 0xc6, 0x8a, 0x15, 0x3f, 0x2c, 0x65, 0xfc, 0x93, 0x22, 0x2d, 0xe7, 0x0c,
	0x5c, 0xee, 0x02, 0x05, 0x9f, 0x22, 0x7b, 0x05, 0x71, 0xbb, 0xf2, 0x4f, 0x93, 0x6f, 0x76, 0x14,
	0xe4, 0x81, 0x05, 0x9f, 0x09, 0x66, 0x95, 0xee, 0x58, 0x25, 0x9b, 0x36, 0x1a, 0x45, 0x8b, 0xbf,
	0x77, 0x5a, 0x50, 0x01, 0x72, 0x20, 0x8f, 0xaa, 0x59, 0xa0, 0xbe, 0x6f, 0x5a, 0x94, 0x2b, 0x19,
	0x5b, 0x07, 0x6f, 0x14, 0x74, 0x00, 0x84, 0xb9, 0x2c, 0x9a, 0xde, 0x3f, 0x2d, 0x06, 0x52, 0x32,
	0x0d, 0x2d, 0x0b, 0xc9, 0x80, 0x5c, 0xf5, 0x81, 0x69, 0xda, 0x18, 0xc1, 0xa4, 0x29, 0x88, 0x5e,
	0x1f, 0x24, 0x82, 0x9d, 0x87, 0x8a, 0x57, 0x10, 0x3e, 0x44, 0x04, 0xb9, 0x14, 0x60, 0x46, 0xf9,
	0xf0, 0x34, 0xba, 0xaa, 0x6c, 0x40, 0x82, 0x91, 0xd4, 0xc0, 0xd0, 0x8f, 0x4c, 0x53, 0x1d, 0x88,
	0x24, 0xc0, 0x04, 0xe0, 0x13, 0xaa, 0xc8, 0x8f, 0x92, 0x99, 0x7d, 0x1a, 0x02, 0xd3, 0xe1, 0x1f,
	0x9b, 0xc6, 0x11, 0x4b, 0x76, 0x07, 0x0a, 0x53, 0x58, 0x98, 0xf4, 0x6c, 0xc6, 0x2a, 0xd1, 0x37,
	0xff, 0x38, 0x99, 0x2a, 0xaa, 0x85, 0x1e, 0xf1, 0x13, 0xd3, 0x08, 0x52, 0x88, 0x9e, 0xe9, 0x88,
	0x92, 0x56, 0x00, 0xeb, 0x93, 0xd3, 0x02, 0xa4, 0xe5, 0xbc, 0x1c, 0xb3, 0x6d, 0x2d, 0x83, 0x2a,
	0x87, 0x7f, 0x8a, 0x34, 0x17, 0x72, 0xb0, 0xa6, 0xe5, 0x65, 0x11, 0x06, 0xf9, 0xe2, 0xd3, 0xd3,
	0x38, 0xad, 0xca, 0x86, 0x53, 0x5a, 0x5c, 0xc2, 0xac, 0x09, 0x82, 0x3f, 0x33, 0x4d, 0x49, 0xd3,
	0xa0, 0x9d, 0x19, 0x2c, 0xaf, 0x3a, 0xff, 0x47, 0x62, 0x2d, 0x1b, 0x68, 0x6c, 0xe0, 0x75, 0x87,
	0xff, 0xd3, 0xb4, 0x88, 0x2b, 0x94, 0xde, 0xb2, 0xfc, 0x80, 0xfd, 0xeb, 0x3f, 0x93, 0xfa, 0xb2,
	0x11, 0x20, 0xbb, 0xb4, 0x08, 0xbf, 0x70, 0xe0, 0xff, 0x22, 0xdd, 0xd4, 0x93, 0x4a, 0x1b, 0x08,
	0xb0, 0x83, 0xff, 0xeb, 0x34, 0x6d, 0x12, 0x0a, 0x46, 0x66, 0x70, 0xab, 0xf1, 0xd8, 0x34, 0x16,
	0x0f, 0x19, 0x63, 0x89, 0x0a, 0x0f, 0xfe, 0x38, 0x19, 0x81, 0xdd, 0x42, 0x63, 0xe6, 0x6f, 0x9e,
	0x55, 0x6e, 0x65, 0xc7, 0x77, 0x16, 0xac, 0x7a, 0x76, 0x51, 0xa4, 0x6d, 0xb9, 0xc0, 0xbc, 0x65,
	0x16, 0x67, 0x63, 0xb0, 0x0e, 0x6e, 0x6f, 0x7d, 0xeb, 0xac, 0x72, 0x8c, 0x1d, 0x0d, 0xcd, 0x9e,
	0x6d, 0xed, 0x6f, 0x9b, 0x0d, 0x4c, 0xa4, 0x5a, 0xaf, 0x87, 0xd4, 0x47, 0x67, 0x71, 0x50, 0xdb,
	0x6c, 0x5a, 0xca, 0x01, 0x2a, 0xde, 0x3e, 0x2b, 0xb6, 0xec, 0x46, 0x86, 0x2a, 0x61, 0x03, 0xa3,
	0x63, 0xa2, 0xd7, 0xde, 0x31, 0x8b, 0xa3, 0xc2, 0x06, 0xbd, 0xb0, 0xec, 0xf0, 0x77, 0xce, 0x22,
	0x9c, 0xe4, 0xa7, 0x5e, 0x70, 0xf8, 0xbb, 0x66, 0x69, 0x6b, 0x04, 0x84, 0xac, 0x8e, 0x83, 0x29,
	0x5c, 0x5c, 0xc6, 0x4a, 0xea, 0xdd, 0xb3, 0x62, 0x13, 0x04, 0x9a, 0x68, 0x73, 0xec, 0xf0, 0xf7,
	0xcc, 0x52, 0xd2, 0x01, 0x4a, 0x39, 0x9f, 0xcf, 0x5a, 0xb0, 0x8d, 0x32, 0x1d, 0xfe, 0x5e, 0x12,
	0x97, 0xd7, 0x2e, 0x5b, 0x8b, 0x98, 0x86, 0x1d, 0xfe, 0xda, 0x9b, 0xd2, 0xe7, 0x21, 0x48, 0x5e,
	0xb3, 0xe9, 0xd2, 0x79, 0x12, 0x9d, 0x4a, 0x8c, 0xb1, 0xe1, 0x45, 0xab, 0xb8, 0xc2, 0x6f, 0x80,
	0xaa, 0x66, 0x6c, 0xc9, 0xa6, 0x40, 0x64, 0x79, 0x04, 0xb6, 0xde, 0xb1, 0x45, 0x48, 0x06, 0xf8,
	0x31, 0x94, 0x7e, 0x7f, 0x84, 0xb1, 0x15, 0xe8, 0xdd, 0xde, 0x6a, 0x74, 0xbc, 0x36, 0xb6, 0x65,
	0x45, 0x86, 0x07, 0xb6, 0xbb, 0x60, 0x06, 0xe4, 0x71, 0x0f, 0x5c, 0xd1, 0x9d, 0xcb, 0x3c, 0x92,
	0xbc, 0xed, 0xa1, 0x57, 0xa4, 0x42, 0x94, 0x87, 0x5f, 0x91, 0x3a, 0x5c, 0xce, 0x3f, 0x58, 0x6d,
	0xbb, 0x2a, 0x7c, 0xa9, 0x21, 0x29, 0x29, 0x16, 0xbd, 0x08, 0x95, 0xd8, 0x50, 0xf2, 0x28, 0x70,
	0xe0, 0x4f, 0xe8, 0x7a, 0x00, 0xfe, 0x84, 0xfb, 0x64, 0x00, 0x7c, 0x42, 0x54, 0xd9, 0xd1, 0x4c,
	0x1e, 0x4d, 0x2e, 0x40, 0xdf, 0x30, 0x09, 0x78, 0x6e, 0xda, 0x55, 0xbc, 0xfa, 0x60, 0xc3, 0x5f,
	0x57, 0xb1, 0x4b, 0xfa, 0x41, 0xd8, 0xb9, 0x6f, 0x56, 0xaf, 0xb9, 0x4b, 0x5e, 0x7b, 0xb3, 0xea,
	0x83, 0x53, 0x12, 0x30, 0x41, 0x2b, 0x4b, 0xf9, 0x62, 0xc5, 0x2a, 0x6b, 0x30, 0xd4, 0x29, 0x98,
	0x98, 0x92, 0x70, 0x29, 0x63, 0xad, 0x2e, 0xf0, 0x21, 0xf0, 0xef, 0x78, 0x40, 0x2a, 0xe7, 0xb3,
	0x17, 0x79, 0x34, 0xcc, 0x65, 0x6b, 0xab, 0x7c, 0x38, 0xdc, 0x05, 0xa2, 0x5c, 0xe4, 0x23, 0xe1,
	0x2e, 0x5a, 0xde, 0xe0, 0xa3, 0x69, 0x8d, 0xc5, 0xe4, 0xc5, 0x0b, 0xb6, 0x69, 0x65, 0x23, 0xb8,
	0x79, 0x01, 0xb7, 0x01, 0x7b, 0xf8, 0x2e, 0x06, 0xcc, 0x38, 0x08, 0xd3, 0x4a, 0xcc, 0xfa, 0x1e,
	0x71, 0x28, 0x7d, 0x6f, 0x70, 0x86, 0x96, 0xf7, 0xea, 0x14, 0xac, 0xec, 0x4a, 0xa6, 0x00, 0xec,
	0x8c, 0x8d, 0x22, 0x38, 0x8d, 0x0c, 0x30, 0xc6, 0x58, 0x14, 0x72, 0x14, 0x58, 0x0d, 0x4a, 0xb2,
	0x16, 0xc4, 0xcc, 0xae, 0x50, 0x61, 0x1b, 0x4d, 0xbf, 0x3b, 0xc2, 0xc6, 0x0b, 0x78, 0x7d, 0x56,
	0xf3, 0x36, 0xc8, 0x8c, 0x73, 0x80, 0x7b, 0x4c, 0x5d, 0x19, 0x2b, 0x57, 0xc1, 0x6d, 0x75, 0x05,
	0xca, 0x89, 0x0a, 0x50, 0x2e, 0x5f, 0xe1, 0x37, 0x24, 0x0f, 0x81, 0x6f, 0xe3, 0x40, 0x50, 0x81,
	0xe5, 0xb9, 0xd7, 0xdf, 0x07, 0x41, 0xf1, 0x6b, 0x2d, 0xe5, 0x1e, 0x36, 0xbb, 0x93, 0x65, 0x09,
	0xe6, 0x6d, 0x05, 0x8a, 0xb0, 0x15, 0x08, 0xf8, 0x0c, 0xb0, 0x4d, 0x20, 0xdb, 0x52, 0xb5, 0xe3,
	0xab, 0x85, 0xaa, 0xbf, 0xbe, 0x27, 0x2b, 0x6c, 0x8e, 0x43, 0xac, 0x43, 0x82, 0x15, 0x6f, 0xc6,
	0x06, 0x58, 0xbb, 0xf5, 0x56, 0xba, 0xc0, 0xc6, 0xa9, 0xa8, 0x96, 0xc6, 0xc3, 0x92, 0x32, 0x8c,
	0xdf, 0x60, 0xe5, 0x14, 0x84, 0x9c, 0x8e, 0xb9, 0xd4, 0x5e, 0xe3, 0x09, 0x36, 0x82, 0x04, 0x07,
	0x8d, 0x81, 0xd6, 0x43, 0x8e, 0x5b, 0xeb, 0x02, 0x20, 0x06, 0x3a, 0xa5, 0x5f, 0x18, 0x05, 0x0c,
	0x03, 0x25, 0xef, 0xfa, 0xeb, 0x5e, 0x5d, 0x39, 0xc3, 0x26, 0xf1, 0xab, 0x02, 0x75, 0xe6, 0x8a,
	0x95, 0xad, 0x2c, 0xeb, 0x80, 0xe5, 0x64, 0x12, 0x91, 0x08, 0x3f, 0x41, 0x08, 0xb5, 0xaa, 0xd7,
	0x5c, 0x5f, 0xdd, 0x14, 0x0c, 0x0b, 0x8c, 0x87, 0x19, 0xb0, 0x82, 0x01, 0x7d, 0x37, 0x02, 0xc7,
	0x30, 0xfe, 0x06, 0x16, 0x6a, 0x57, 0xd7, 0xdd, 0x6a, 0x3d, 0xe0, 0xd9, 0xa6, 0xa4, 0x50, 0x2a,
	0xc2, 0xa0, 0x49, 0x09, 0xfc, 0xec, 0x29, 0x69, 0x75, 0x7b, 0x4a, 0xee, 0x16, 0x7b, 0x89, 0x80,
	0x21, 0xab, 0xe7, 0xa0, 0xb4, 0x05, 0xd8, 0xab, 0xc0, 0x33, 0x2a, 0xbe, 0x80, 0x8d, 0xfa, 0xa8,
	0x75, 0x77, 0xc3, 0xf5, 0xdd, 0x3d, 0xcc, 0x2b, 0x20, 0x00, 0x86, 0x85, 0x79, 0xf8, 0xbb, 0x67,
	0x5e, 0xcb, 0xeb, 0xf4, 0xb4, 0x3d, 0x8d, 0x1d, 0x0c, 0xf3, 0x58, 0x05, 0x5a, 0x3a, 0xf8, 0x48,
	0x32, 0x05, 0x6c, 0x31, 0xf9, 0x09, 0x9c, 0xd4, 0x4b, 0x95, 0xf7, 0xb1, 0x01, 0xf3, 0x79, 0x36,
	0x15, 0x66, 0xc6, 0xd2, 0x41, 0xe7, 0xa3, 0xc9, 0x63, 0xc0, 0x3a, 0x42, 0x1f, 0xc0, 0x48, 0x3d,
	0x54, 0xbf, 0x5d, 0xad, 0x05, 0x76, 0xa6, 0xdf, 0x18, 0x61, 0x09, 0xa4, 0x96, 0xdd, 0x76, 0x07,
	0xcf, 0xb4, 0x6f, 0x67, 0xf1, 0x67, 0xea, 0xb6, 0x55, 0x31, 0x71, 0xd3, 0x78, 0x43, 0xf2, 0x66,
	0x74, 0xce, 0xd9, 0xf9, 0x7b, 0x80, 0xf9, 0xa8, 0xb0, 0x57, 0xc6, 0x4f, 0xdd, 0x12, 0x0c, 0x2a,
	0x34, 0xc2, 0x60, 0xc7, 0x2c, 0x53, 0xaf, 0x20, 0x23, 0xc4, 0x80, 0x78, 0xce, 0xcd, 0x9f, 0xdd,
	0x9b, 0x07, 0x1a, 0x01, 0xfa, 0x31, 0xe4, 0x81, 0xff, 0x20, 0x06, 0x92, 0xe5, 0xdc, 0x7e, 0x2c,
	0xe7, 0xd2, 0x9f, 0x8f, 0xb0, 0x23, 0xd8, 0x6a, 0xbb, 0xf5, 0x46, 0x1b, 0x72, 0xa6, 0xb8, 0x88,
	0xc8, 0xe0, 0x4c, 0x7c, 0x3a, 0x9b, 0xa3, 0xd1, 0xc3, 0xce, 0xd9, 0x80, 0xf5, 0xab, 0x58, 0x11,
	0x6b, 0x68, 0x25, 0x63, 0x65, 0xf5, 0xca, 0xed, 0x67, 0xcf, 0xf1, 0x37, 0x41, 0x5e, 0xc3, 0xdc,
	0x07, 0xbf, 0xd5, 0xbc, 0xb7, 0xe5, 0xd6, 0xd5, 0x82, 0x0b, 0xe9, 0xa7, 0xe9, 0x36, 0xfd, 0x8d,
	0xeb, 0x60, 0xcc, 0xbe, 0xec, 0x0b, 0xfc, 0xcd, 0x43, 0xc9, 0x09, 0x60, 0x8f, 0xc3, 0x6f, 0x75,
	0xc9, 0xeb, 0x36, 0xeb, 0xca, 0xa5, 0xfd, 0x59, 0xee, 0xe2, 0x6f, 0x1f, 0x4a, 0x9e, 0x06, 0x96,
	0x53, 0xf0, 0x5b, 0x6a, 0x2c, 0xba, 0x9b, 0x2d, 0xaf, 0x5d, 0x6d, 0x37, 0x36, 0xae, 0xab, 0x27,
	0xbd, 0x26, 0xfc, 0x7b, 0x15, 0x12, 0x23, 0x4a, 0x39, 0x03, 0xc3, 0x3b, 0x95, 0x7e, 0xf5, 0x10,
	0x9b, 0xed, 0xdd, 0x17, 0x06, 0xb7, 0x71, 0xa1, 0x41, 0xde, 0xc1, 0x4e, 0x90, 0xca, 0x9c, 0x05,
	0xa5, 0x2c, 0x28, 0x76, 0x0a, 0x80, 0x07, 0x7d, 0x40, 0xf1, 0xc2, 0xd9, 0xb3, 0xfc, 0x33, 0x91,
	0x24, 0x03, 0xc5, 0xa3, 0xf0, 0x5b, 0xb5, 0x2e, 0x02, 0xaa, 0x9e, 0x94, 0xeb, 0x8e, 0xb3, 0xb7,
	0xf3, 0x97, 0x45, 0xc5, 0x54, 0x86, 0xdf, 0x30, 0xc2, 0xf6, 0x5a, 0xa3, 0x5e, 0x77, 0x9b, 0xbf,
	0x1e, 0xf3, 0x1d, 0xfc, 0xe5, 0x3d, 0xe6, 0x3b, 0x54, 0xd3, 0xf3, 0xa5, 0x8b, 0xcc, 0x5f, 0x83,
	0x79, 0xe1, 0x1e, 0xfe, 0xa6, 0x68, 0xf2, 0x66, 0x60, 0x56, 0xe1, 0xb7, 0x5a, 0xf4, 0x3c, 0x35,
	0x5f, 0x6d, 0x5e, 0x57, 0x6d, 0xf7, 0x39, 0x5d, 0xb7, 0xe3, 0x77, 0xd4, 0x93, 0xf6, 0x52, 0x46,
	0xbd, 0xf3, 0xfc, 0xdd, 0xe7, 0x4f, 0xa5, 0x7f, 0x87, 0xc5, 0xf3, 0x55, 0xbf, 0xb6, 0x9e, 0xa9,
	0x76, 0xd0, 0x19, 0xb0, 0x3b, 0x31, 0x1d, 0xa3, 0x68, 0x94, 0x11, 0xa8, 0xb7, 0x60, 0xb2, 0x74,
	0xdc, 0x66, 0xa7, 0xe1, 0x37, 0xb6, 0x5c, 0xcc, 0x3a, 0x35, 0xe8, 0xa5, 0x76, 0x02, 0x8a, 0xba,
	0x89, 0x9c, 0xca, 0x05, 0x58, 0x13, 0xcc, 0x3e, 0x5f, 0x24, 0x79, 0x0a, 0x17, 0x30, 0xa3, 0xd9,
	0x09, 0x71, 0x1e, 0x21, 0xce, 0x46, 0x73, 0x1b, 0x6f, 0xfa, 0xa1, 0x08, 0x3b, 0x40, 0xfa, 0x7b,
	0x77, 0x7f, 0x30, 0xe9, 0x46, 0x0c, 0xa7, 0x62, 0x98, 0x60, 0x40, 0x1a, 0x27, 0x9a, 0xd1, 0x01,
	0x3e, 0x10, 0x31, 0xd7, 0xe8, 0x04, 0x57, 0xaf, 0x35, 0x79, 0x77, 0x06, 0xf1, 0xa7, 0x6b, 0xa6,
	0x93, 0x9d, 0x53, 0x8a, 0xc6, 0xe2, 0xc0, 0x66, 0x5a, 0x45, 0x64, 0x8d, 0xd0, 0x22, 0x1a, 0x07,
	0xd6, 0xa6, 0xe7, 0x0b, 0xf6, 0xe3, 0x8d, 0xe0, 0x63, 0x2f, 0x11, 0xe9, 0x57, 0xc5, 0x60, 0xbe,
	0xc3, 0x32, 0x34, 0x68, 0xcf, 0x7d, 0x90, 0x53, 0xb3, 0x76, 0x45, 0xbf, 0x6c, 0x60, 0xe9, 0x1a,
	0x49, 0x9e, 0xc1, 0x3c, 0xa5, 0x3f, 0xb7, 0x01, 0x8e, 0x44, 0xb1, 0x98, 0x0b, 0xdd, 0xb6, 0xea,
	0x12, 0x21, 0x90, 0x2e, 0x6f, 0x85, 0xc9, 0xdd, 0xca, 0x2a, 0x24, 0x3c, 0x10, 0x90, 0xb5, 0x74,
	0x61, 0x1f, 0x49, 0x82, 0x09, 0x7a, 0x1f, 0x08, 0x3a, 0x90, 0xf5, 0x5c, 0x61, 0x17, 0x09, 0x40,
	0x6c, 0x4b, 0x81, 0xf5, 0x81, 0x86, 0x3d, 0x04, 0x4f, 0xa2, 0xe0, 0x45, 0x7d, 0x19, 0xfc, 0x5f,
	0x59, 0x35, 0x60, 0xbd, 0x89, 0x26, 0x17, 0xd1, 0xf9, 0x8b, 0x78, 0x5f, 0xde, 0xa1, 0xfa, 0x00,
	0x44, 0x9e, 0x91, 0x22, 0x69, 0xa0, 0xea, 0x5a, 0xbf, 0x6d, 0xd0, 0x13, 0x7d, 0x5f, 0xb6, 0xd8,
	0xf4, 0x80, 0xc5, 0xa4, 0x41, 0x28, 0x18, 0x4e, 0x3a, 0xa0, 0xe0, 0x60, 0xcf, 0x6c, 0x92, 0x16,
	0x28, 0xba, 0x7b, 0x40, 0x51, 0x7d, 0xa0, 0xcf, 0xfe, 0x1a, 0x2f, 0xc2, 0x5a, 0x08, 0x1a, 0xb1,
	0x48, 0xa6, 0xc2, 0x6e, 0x24, 0x79, 0x0f, 0xa8, 0x19, 0x83, 0x42, 0xce, 0xaf, 0x02, 0x6f, 0xc8,
	0x2f, 0x42, 0x76, 0x4d, 0x36, 0xec, 0x0a, 0x05, 0x97, 0x1d, 0x1a, 0x30, 0x5f, 0x4a, 0x85, 0xcc,
	0x7d, 0x11, 0x84, 0xf2, 0x9e, 0xed, 0x52, 0x08, 0x08, 0xbf, 0x7d, 0x40, 0x78, 0xdf, 0xf2, 0x7d,
	0xd5, 0xd8, 0x6c, 0x82, 0x80, 0x61, 0x66, 0xa5, 0xf3, 0x63, 0x14, 0xd2, 0xb8, 0xde, 0xac, 0xf7,
	0x5c, 0x3f, 0x3f, 0x20, 0xd8, 0x0d, 0x5a, 0xf6, 0x44, 0xf1, 0x03, 0xec, 0xf0, 0x20, 0x56, 0xcc,
	0xac, 0x90, 0x3d, 0x96, 0x2c, 0x80, 0xec, 0xa9, 0x3e, 0x5c, 0x9a, 0xf5, 0x40, 0xc7, 0x5d, 0xbb,
	0x7b, 0xfd, 0xc9, 0x95, 0x19, 0x12, 0xd9, 0x97, 0x70, 0x2f, 0xc1, 0xe3, 0xe4, 0xf2, 0x51, 0xfd,
	0x39, 0xdd, 0xea, 0x06, 0x3a, 0xfc, 0x29, 0x83, 0xa6, 0x13, 0x79, 0x4f, 0x51, 0x6b, 0xdb, 0x31,
	0x8e, 0x32, 0x39, 0x4b, 0xde, 0x3f, 0x88, 0x71, 0x14, 0x02, 0xa2, 0xef, 0xd8, 0xc3, 0xe2, 0x7d,
	0x75, 0xa4, 0x7f, 0x31, 0x0c, 0x1b, 0x5e, 0xba, 0x47, 0xef, 0x4f, 0xce, 0x65, 0x96, 0x08, 0xc3,
	0x3f, 0x92, 0xbc, 0x73, 0x27, 0xfc, 0x4f, 0xec, 0x89, 0xbf, 0xd0, 0x00, 0x2a, 0xec, 0xe0, 0x6e,
	0x70, 0x1f, 0x4a, 0x2e, 0xed, 0x0d, 0xf7, 0xa7, 0xd4, 0x77, 0x92, 0xf7, 0x54, 0xf0, 0x0c, 0xd8,
	0xdb, 0x05, 0xe8, 0x8e, 0x26, 0xcf, 0x6e, 0x43, 0x77, 0x1f, 0x69, 0x7b, 0xf1, 0x97, 0x19, 0xdf,
	0x01, 0xe8, 0xe1, 0xe4, 0x6f, 0xed, 0x01, 0xe8, 0x93, 0xdb, 0x21, 0xbc, 0x5f, 0xde, 0xec, 0x23,
	0x78, 0x44, 0xe4, 0xcd, 0x30, 0x82, 0x8f, 0x3f, 0x39, 0x8e, 0xae, 0xb0, 0xa9, 0x9d, 0x80, 0x1d,
	0xa5, 0x4c, 0xb4, 0x2b, 0x60, 0x4f, 0xd5, 0xb7, 0x13, 0xf7, 0x14, 0x7d, 0x37, 0x1b, 0x95, 0xf0,
	0x8c, 0x25, 0x9f, 0x3a, 0x00, 0xcf, 0x63, 0x4f, 0x82, 0xc8, 0x02, 0x3b, 0xb0, 0x0d, 0x8d, 0x63,
	0xc9, 0x7b, 0x77, 0x45, 0xe3, 0xad, 0x83, 0x00, 0xdc, 0x13, 0x7f, 0x55, 0x76, 0xf0, 0x52, 0xd7,
	0x6d, 0x5f, 0xdf, 0xb6, 0x3e, 0xdc, 0xcf, 0x0e, 0x5d, 0x2a, 0xe9, 0xf6, 0x95, 0x4a, 0x1e, 0x0f,
	0x6c, 0xfb, 0x29, 0x2c, 0xf2, 0x9b, 0x07, 0x39, 0xbd, 0x08, 0x7b, 0xe3, 0xfa, 0x66, 0x43, 0x3c,
	0x60, 0x81, 0xbd, 0x76, 0x0c, 0x36, 0xbf, 0x78, 0x6b, 0x03, 0x6b, 0x61, 0x02, 0xeb, 0x55, 0xbd,
	0x89, 0xef, 0xe2, 0xea, 0x4a, 0x92, 0x8d, 0xc9, 0xa3, 0x60, 0x2c, 0xd0, 0xc7, 0x51, 0x4f, 0xb6,
	0xd1, 0xa1, 0xb6, 0xf4, 0xa7, 0x86, 0x18, 0xdf, 0xf1, 0x8e, 0x07, 0xb6, 0xb3, 0x78, 0x5b, 0x58,
	0x29, 0xe1, 0xc6, 0x6a, 0x82, 0xc5, 0xe9, 0x23, 0x6b, 0xad, 0x9a, 0x62, 0x6f, 0x48, 0x9f, 0x74,
	0x80, 0x62, 0x98, 0xcb, 0xb0, 0xcb, 0x52, 0xd8, 0x01, 0x22, 0xf5, 0x4f, 0x3f, 0xa2, 0xbd, 0x6e,
	0x86, 0x89, 0xfb, 0x7e, 0x58, 0xe8, 0x87, 0x7b, 0xa4, 0x9e, 0x2d, 0xb4, 0x41, 0x14, 0x8a, 0x4c,
	0xd8, 0xfa, 0x65, 0xf9, 0x28, 0x6e, 0x02, 0x25, 0xe1, 0xa2, 0x89, 0xfa, 0xf0, 0xc2, 0x7f, 0x92,
	0x28, 0xb0, 0x6f, 0x02, 0xc9, 0x0e, 0x6a, 0x1c, 0x53, 0x0e, 0xb3, 0x29, 0x29, 0x1d, 0xaa, 0x08,
	0x2d, 0x67, 0x3c, 0x13, 0xc9, 0xf8, 0x92, 0xe5, 0x20, 0x91, 0x75, 0xdb, 0xb6, 0x42, 0x7a, 0x98,
	0x72, 0x13, 0x9b, 0xa5, 0x06, 0x6d, 0x55, 0x33, 0x8a, 0xe0, 0x7a, 0x13, 0x22, 0x5c, 0xe9, 0x9d,
	0xf6, 0xf0, 0x44, 0x6f, 0x08, 0xe2, 0xd0, 0x13, 0xa5, 0x8d, 0x2b, 0x47, 0x98, 0x42, 0x34, 0x28,
	0x98, 0x42, 0xca, 0x27, 0x94, 0x43, 0xe0, 0x31, 0xb2, 0x48, 0xb3, 0x8b, 0x06, 0xee, 0x08, 0x40,
	0xc5, 0x81, 0xf4, 0xd7, 0x86, 0x98, 0xb2, 0xf3, 0x59, 0x11, 0x7a, 0xaf, 0xf7, 0xb0, 0x08, 0x9c,
	0x09, 0x03, 0x96, 0x9f, 0xd2, 0x9d, 0x30, 0x3c, 0x49, 0x08, 0x39, 0xf4, 0x10, 0xdd, 0x57, 0x20,
	0x31, 0xec, 0xd2, 0x7e, 0xd7, 0x90, 0x53, 0xfb, 0xc4, 0x90, 0x5b, 0xa7, 0xe8, 0x62, 0x83, 0x94,
	0x06, 0x8e, 0x55, 0xe8, 0x86, 0x5b, 0x90, 0x02, 0xd7, 0x82, 0x17, 0x25, 0x6d, 0xc0, 0xb9, 0xe0,
	0xc5, 0x9e, 0x9e, 0x01, 0xf7, 0x1e, 0xa5, 0xab, 0x34, 0x6c, 0xd8, 0xe1, 0xe0, 0xe3, 0x6c, 0x4e,
	0x36, 0xed, 0xe9, 0xe2, 0xfe, 0xa0, 0xc2, 0x4e, 0x9e, 0xa1, 0x4b, 0x76, 0xa4, 0x6e, 0x77, 0x33,
	0xb8, 0x3f, 0xb0, 0x6e, 0xc0, 0xd1, 0x1e, 0x8b, 0x17, 0xda, 0x8d, 0xad, 0xc6, 0x86, 0x7b, 0xcd,
	0x55, 0x6e, 0x64, 0x71, 0xd3, 0xaa, 0x68, 0x19, 0x64, 0x03, 0xd8, 0x4f, 0x60, 0x3e, 0x32, 0x3d,
	0x55, 0xa3, 0x27, 0x95, 0x8a, 0xca, 0x12, 0xe0, 0xd4, 0x6c, 0xd0, 0x1e, 0x49, 0x4e, 0x62, 0xbe,
	0xb7, 0x71, 0x3f, 0x2a, 0x7b, 0xa4, 0xd8, 0xf8, 0xaa, 0x6d, 0x14, 0xf5, 0xa0, 0xcb, 0x50, 0x92,
	0x43, 0x97, 0xf1, 0xd5, 0x76, 0x03, 0x36, 0x92, 0xa2, 0x4f, 0xfa, 0xd1, 0x21, 0x7c, 0x89, 0xda,
	0xf1, 0xba, 0xed, 0x9a, 0x9b, 0x81, 0x98, 0x5e, 0xf3, 0xda, 0xd7, 0x61, 0xc3, 0x35, 0x17, 0xc4,
	0xa6, 0x82, 0x2f, 0x41, 0x96, 0x2d, 0x98, 0xd3, 0xe1, 0x6b, 0xf8, 0x1b, 0x84, 0x32, 0xad, 0xd5,
	0xda, 0x68, 0xd4, 0xc4, 0xdc, 0x4f, 0xb3, 0xa3, 0xbb, 0xf0, 0x64, 0xe8, 0xd0, 0x12, 0x8c, 0xa3,
	0x39, 0x0b, 0x3a, 0xa1, 0x72, 0xf7, 0x95, 0xa7, 0xb2, 0xe4, 0xce, 0xbe, 0xf2, 0x4a, 0x1e, 0xcd,
	0xa4, 0x59, 0x0c, 0x5b, 0x79, 0x7c, 0x0a, 0xd8, 0x81, 0xc4, 0xa7, 0xee, 0xec, 0x6d, 0x98, 0x4b,
	0xb6, 0x86, 0xb7, 0x25, 0x99, 0x62, 0xc9, 0xc6, 0x3d, 0xb3, 0x82, 0x09, 0xcd, 0x68, 0x5e, 0x6d,
	0x57, 0x3b, 0x7e, 0xbb, 0x5b, 0xf3, 0x21, 0x9b, 0x28, 0x27, 0xd9, 0xcc, 0x4e, 0x4e, 0xf1, 0xb6,
	0x01, 0x16, 0x0c, 0x86, 0x49, 0xd4, 0xb9, 0xde, 0xf1, 0xdd, 0xcd, 0xdd, 0x2d, 0x0a, 0x0e, 0xe7,
	0x61, 0x2d, 0x20, 0x8b, 0xe8, 0xa0, 0xa1, 0xe1, 0x5f, 0x4f, 0x3f, 0x43, 0x3c, 0xe2, 0x92, 0xef,
	0xb4, 0x00, 0x52, 0x78, 0xba, 0x58, 0x11, 0x67, 0x80, 0x15, 0x71, 0xfc, 0x8e, 0x47, 0x3c, 0xdb,
	0x1a, 0xc4, 0x86, 0x1e, 0x8f, 0x79, 0x5e, 0x3d, 0x26, 0x9f, 0xee, 0x78, 0xe0, 0xbe, 0xeb, 0xe5,
	0x6a, 0x5b, 0x71, 0x18, 0x6d, 0x4c, 0x2b, 0xe2, 0x1e, 0xa0, 0x52, 0xd6, 0x20, 0x07, 0xd1, 0x09,
	0x79, 0xc5, 0x28, 0x80, 0xf7, 0xee, 0x80, 0x94, 0x79, 0x16, 0xfa, 0x35, 0xe8, 0x2d, 0xb0, 0xef,
	0xd1, 0x49, 0x45, 0x6d, 0xa3, 0x81, 0x6f, 0x31, 0x77, 0x79, 0x2d, 0x2a, 0x8b, 0xe2, 0x2b, 0x50,
	0xbb, 0x6e, 0x13, 0x5a, 0x76, 0x2a, 0x78, 0xc2, 0x0c, 0x3e, 0xbe, 0x17, 0x8b, 0xd4, 0xed, 0x22,
	0xb7, 0x1a, 0x6d, 0x1f, 0xf3, 0x3e, 0x3e, 0x88, 0x6a, 0xc0, 0x2e, 0x9e, 0x9e, 0x30, 0x87, 0x44,
	0xaa, 0x35, 0x7a, 0x31, 0xd5, 0x84, 0xba, 0xf2, 0xf0, 0x2e, 0xa2, 0xc1, 0xd6, 0x68, 0xf2, 0x7e,
	0x10, 0xbc, 0xb4, 0x5d, 0xf0, 0x4e, 0x23, 0xb7, 0xab, 0xda, 0xa1, 0x05, 0x36, 0xaf, 0xca, 0xb3,
	0xd8, 0xcc, 0x76, 0x35, 0xf4, 0x0d, 0x05, 0x16, 0xae, 0xf8, 0xa0, 0xe9, 0xde, 0x1d, 0x43, 0xa0,
	0x42, 0x4a, 0x2a, 0xe9, 0x1d, 0xd1, 0x40, 0x85, 0xb5, 0xdb, 0xb6, 0xc1, 0x66, 0xb7, 0x6e, 0x97,
	0xef, 0x38, 0xb9, 0xc0, 0xf5, 0x4b, 0x30, 0x57, 0xf1, 0x3a, 0xc1, 0x00, 0x04, 0x8f, 0x24, 0x6f,
	0x05, 0x6d, 0x29, 0x68, 0x55, 0x33, 0xc2, 0xef, 0x19, 0xb7, 0xed, 0x37, 0xae, 0x22, 0xfc, 0xf1,
	0xf5, 0x6c, 0xf3, 0x9a, 0xdb, 0x6e, 0x41, 0x41, 0xe6, 0x2b, 0x16, 0x3b, 0xbe, 0x8f, 0x4c, 0x47,
	0xb7, 0x21, 0xe9, 0x40, 0x49, 0x70, 0x12, 0xc4, 0xdd, 0xbc, 0x87, 0x38, 0xf0, 0x49, 0x03, 0x5c,
	0x23, 0x9e, 0xb2, 0x29, 0xf9, 0x7d, 0x05, 0x1a, 0x8e, 0x03, 0x4b, 0x2e, 0xd4, 0x04, 0xfb, 0xd9,
	0x67, 0x74, 0x3a, 0xb0, 0x5c, 0xab, 0xf8, 0x60, 0x0d, 0xec, 0x4b, 0xed, 0x67, 0x5f, 0x89, 0x8e,
	0x8f, 0xa1, 0x42, 0xb8, 0x0d, 0xeb, 0xc5, 0x3d, 0xe4, 0x39, 0x5d, 0x7a, 0xe8, 0x26, 0x04, 0x5e,
	0x66, 0xc7, 0xf6, 0x11, 0x88, 0xc7, 0xa7, 0x71, 0x01, 0xe0, 0x22, 0xb8, 0xff, 0xc1, 0x75, 0x0f,
	0x5f, 0xb3, 0x83, 0x58, 0x09, 0xdf, 0x5a, 0x48, 0x2c, 0x84, 0xa8, 0xaa, 0x16, 0xf4, 0x3c, 0xc6,
	0x1e, 0xcf, 0x6e, 0x2f, 0xb1, 0x1b, 0x77, 0x93, 0x1c, 0x9c, 0x32, 0x42, 0x51, 0x7d, 0x06, 0x6b,
	0x4f, 0x94, 0xd6, 0x3b, 0xd1, 0x69, 0x42, 0x0a, 0xf3, 0x1b, 0x20, 0xad, 0x4e, 0xc7, 0x1f, 0xfe,
	0x7a, 0x83, 0xb6, 0x2c, 0xf2, 0x10, 0x1c, 0x4a, 0x94, 0x9b, 0x76, 0x13, 0x29, 0x2e, 0x00, 0x2a,
	0xa6, 0x96, 0xd7, 0x79, 0x22, 0x79, 0x0b, 0x16, 0x7b, 0xe2, 0x0d, 0x25, 0x0d, 0x31, 0xc0, 0x0b,
	0xc8, 0xf4, 0xd7, 0xdb, 0x5e, 0xf7, 0xda, 0xba, 0xea, 0x98, 0x06, 0x6c, 0x3a, 0x77, 0x4c, 0x5a,
	0x3a, 0xe4, 0x25, 0x29, 0xe3, 0xc9, 0xbb, 0xb1, 0xbc, 0x2f, 0x75, 0xf0, 0xbd, 0x28, 0x4e, 0x9a,
	0x35, 0xac, 0x77, 0xd0, 0xaa, 0xb6, 0xb7, 0xa9, 0xae, 0xfb, 0x7e, 0xab, 0x07, 0xf7, 0x6e, 0x07,
	0x5f, 0x7d, 0xaf, 0x55, 0x3b, 0x8d, 0x9a, 0x5a, 0xed, 0xfa, 0xeb, 0xe9, 0x97, 0x46, 0x61, 0x61,
	0xdd, 0xf0, 0xba, 0x75, 0x3a, 0xc5, 0x55, 0x19, 0xa3, 0xab, 0x16, 0xa8, 0xdf, 0xe8, 0xd0, 0x0c,
	0x93, 0xf8, 0xb0, 0xe9, 0x35, 0xf1, 0x30, 0x81, 0xfe, 0x42, 0x48, 0x27, 0x44, 0x8f, 0xe0, 0x9d,
	0x42, 0x84, 0xea, 0xbb, 0xa4, 0x3c, 0x2a, 0x97, 0xef, 0x5c, 0xcf, 0x6c, 0x39, 0xad, 0x75, 0x57,
	0x1c, 0x9d, 0x3f, 0xbc, 0x6f, 0x2b, 0x9e, 0x64, 0x0a, 0x81, 0x50, 0x0b, 0xe0, 0xfd, 0x45, 0xe6,
	0xa2, 0x3c, 0xc9, 0x8c, 0x43, 0x39, 0x85, 0x8b, 0x7f, 0xed, 0x81, 0x87, 0xc3, 0x1f, 0xca, 0x69,
	0x30, 0x98, 0x18, 0xb4, 0x55, 0xac, 0xe9, 0xf1, 0x58, 0x30, 0x0a, 0x3f, 0xf1, 0x34, 0x51, 0xdb,
	0xac, 0xfe, 0xb6, 0xd7, 0x54, 0x57, 0xdd, 0x35, 0xd5, 0x11, 0x73, 0xbd, 0x83, 0xc7, 0x97, 0xa2,
	0x3b, 0xfd, 0x2b, 0x14, 0x88, 0xe3, 0x4b, 0x46, 0xe3, 0x0e, 0x34, 0x84, 0xbe, 0x80, 0x27, 0x1e,
	0x0c, 0x52, 0x83, 0xe9, 0x78, 0x02, 0x3b, 0x6f, 0x51, 0xbb, 0xaa, 0x35, 0xda, 0x78, 0xfc, 0xd8,
	0x1b, 0x50, 0x40, 0xec, 0xbb, 0x0e, 0x2f, 0x4b, 0x60, 0xd2, 0x91, 0xeb, 0xb4, 0x56, 0xa3, 0xf6,
	0xb0, 0xfc, 0xab, 0x9c, 0x80, 0x9a, 0x85, 0x7a, 0xe4, 0x21, 0xfd, 0x63, 0x69, 0x8d, 0xeb, 0xc8,
	0x48, 0x1e, 0x56, 0x44, 0x2c, 0x53, 0xc5, 0x8f, 0xf4, 0x75, 0x06, 0xb9, 0xbf, 0xec, 0xb6, 0xcd,
	0xee, 0x26, 0xac, 0x46, 0x63, 0xb0, 0x98, 0x23, 0x58, 0xce, 0x81, 0x9b, 0xd3, 0x58, 0x34, 0x43,
	0x8b, 0x7a, 0x4e, 0x75, 0xf4, 0xdb, 0x00, 0x69, 0x6d, 0x17, 0x81, 0x5c, 0x2a, 0x19, 0x59, 0x11,
	0x68, 0x28, 0x61, 0x2b, 0x75, 0x17, 0x1f, 0x3e, 0x2b, 0xb7, 0xf7, 0x38, 0x17, 0xc0, 0x9b, 0x84,
	0x31, 0xe4, 0x5c, 0xd8, 0x83, 0x73, 0xcb, 0x6c, 0xd4, 0xce, 0xa6, 0x37, 0xd9, 0xa4, 0xd6, 0xf5,
	0x3d, 0xa7, 0x56, 0xdd, 0x70, 0xe5, 0x7a, 0x73, 0x1a, 0xe4, 0xc8, 0x07, 0x04, 0x80, 0x86, 0x9b,
	0x40, 0xce, 0xac, 0xc4, 0x6a, 0xaf, 0xa7, 0xea, 0x75, 0x7d, 0x55, 0x76, 0x7f, 0x0a, 0x8b, 0x51,
	0x77, 0x3a, 0x0b, 0x3a, 0x86, 0x81, 0xdf, 0xd1, 0x1b, 0xe6, 0x9d, 0xe8, 0x9c, 0x9e, 0xa3, 0x8a,
	0x0e, 0x6f, 0xac, 0x8a, 0x0e, 0x5e, 0x3b, 0xc9, 0x8b, 0x9f, 0x4a, 0xbe, 0x58, 0xe2, 0x9f, 0x4b,
	0x2c, 0xce, 0xb1, 0x99, 0x9a, 0xb7, 0x39, 0x5f, 0xdd, 0x6a, 0xc8, 0xb7, 0xd1, 0xf2, 0xff, 0xd7,
	0x59, 0xeb, 0x5e, 0x7d, 0x71, 0x24, 0xf2, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xdb, 0x88,
	0x86, 0xd3, 0x33, 0x00, 0x00,
}
