// Code generated by protoc-gen-go.
// source: rate.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RateLimiterActionType int32

const (
	RateLimiterActionType_RL_ACTION_NONE RateLimiterActionType = 0
	// L4 only
	RateLimiterActionType_RL_ACTION_DROP_CONN  RateLimiterActionType = 1
	RateLimiterActionType_RL_ACTION_RESET_CONN RateLimiterActionType = 2
	// L7 only
	RateLimiterActionType_RL_ACTION_CLOSE_CONN RateLimiterActionType = 3
	RateLimiterActionType_RL_ACTION_LOCAL_RSP  RateLimiterActionType = 4
	RateLimiterActionType_RL_ACTION_REDIRECT   RateLimiterActionType = 5
)

var RateLimiterActionType_name = map[int32]string{
	0: "RL_ACTION_NONE",
	1: "RL_ACTION_DROP_CONN",
	2: "RL_ACTION_RESET_CONN",
	3: "RL_ACTION_CLOSE_CONN",
	4: "RL_ACTION_LOCAL_RSP",
	5: "RL_ACTION_REDIRECT",
}
var RateLimiterActionType_value = map[string]int32{
	"RL_ACTION_NONE":       0,
	"RL_ACTION_DROP_CONN":  1,
	"RL_ACTION_RESET_CONN": 2,
	"RL_ACTION_CLOSE_CONN": 3,
	"RL_ACTION_LOCAL_RSP":  4,
	"RL_ACTION_REDIRECT":   5,
}

func (x RateLimiterActionType) Enum() *RateLimiterActionType {
	p := new(RateLimiterActionType)
	*p = x
	return p
}
func (x RateLimiterActionType) String() string {
	return proto.EnumName(RateLimiterActionType_name, int32(x))
}
func (x *RateLimiterActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RateLimiterActionType_value, data, "RateLimiterActionType")
	if err != nil {
		return err
	}
	*x = RateLimiterActionType(value)
	return nil
}
func (RateLimiterActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor79, []int{0} }

type RateProfile struct {
	Count            *int32             `protobuf:"varint,1,opt,name=count,def=0" json:"count,omitempty"`
	BurstSz          *int32             `protobuf:"varint,2,opt,name=burst_sz,def=0" json:"burst_sz,omitempty"`
	Period           *int32             `protobuf:"varint,3,opt,name=period,def=1" json:"period,omitempty"`
	ExplicitTracking *bool              `protobuf:"varint,4,opt,name=explicit_tracking,def=0" json:"explicit_tracking,omitempty"`
	FineGrain        *bool              `protobuf:"varint,5,opt,name=fine_grain,def=0" json:"fine_grain,omitempty"`
	Action           *RateLimiterAction `protobuf:"bytes,6,opt,name=action" json:"action,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *RateProfile) Reset()                    { *m = RateProfile{} }
func (m *RateProfile) String() string            { return proto.CompactTextString(m) }
func (*RateProfile) ProtoMessage()               {}
func (*RateProfile) Descriptor() ([]byte, []int) { return fileDescriptor79, []int{0} }

const Default_RateProfile_Count int32 = 0
const Default_RateProfile_BurstSz int32 = 0
const Default_RateProfile_Period int32 = 1
const Default_RateProfile_ExplicitTracking bool = false
const Default_RateProfile_FineGrain bool = false

func (m *RateProfile) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return Default_RateProfile_Count
}

func (m *RateProfile) GetBurstSz() int32 {
	if m != nil && m.BurstSz != nil {
		return *m.BurstSz
	}
	return Default_RateProfile_BurstSz
}

func (m *RateProfile) GetPeriod() int32 {
	if m != nil && m.Period != nil {
		return *m.Period
	}
	return Default_RateProfile_Period
}

func (m *RateProfile) GetExplicitTracking() bool {
	if m != nil && m.ExplicitTracking != nil {
		return *m.ExplicitTracking
	}
	return Default_RateProfile_ExplicitTracking
}

func (m *RateProfile) GetFineGrain() bool {
	if m != nil && m.FineGrain != nil {
		return *m.FineGrain
	}
	return Default_RateProfile_FineGrain
}

func (m *RateProfile) GetAction() *RateLimiterAction {
	if m != nil {
		return m.Action
	}
	return nil
}

type RateLimiterAction struct {
	Type             *RateLimiterActionType       `protobuf:"varint,1,opt,name=type,enum=RateLimiterActionType,def=0" json:"type,omitempty"`
	Redirect         *HTTPRedirectAction          `protobuf:"bytes,2,opt,name=redirect" json:"redirect,omitempty"`
	StatusCode       *HTTPLocalResponseStatusCode `protobuf:"varint,3,opt,name=status_code,enum=HTTPLocalResponseStatusCode,def=429" json:"status_code,omitempty"`
	File             *HTTPLocalFile               `protobuf:"bytes,4,opt,name=file" json:"file,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *RateLimiterAction) Reset()                    { *m = RateLimiterAction{} }
func (m *RateLimiterAction) String() string            { return proto.CompactTextString(m) }
func (*RateLimiterAction) ProtoMessage()               {}
func (*RateLimiterAction) Descriptor() ([]byte, []int) { return fileDescriptor79, []int{1} }

const Default_RateLimiterAction_Type RateLimiterActionType = RateLimiterActionType_RL_ACTION_NONE
const Default_RateLimiterAction_StatusCode HTTPLocalResponseStatusCode = HTTPLocalResponseStatusCode_HTTP_LOCAL_RESPONSE_STATUS_CODE_429

func (m *RateLimiterAction) GetType() RateLimiterActionType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_RateLimiterAction_Type
}

func (m *RateLimiterAction) GetRedirect() *HTTPRedirectAction {
	if m != nil {
		return m.Redirect
	}
	return nil
}

func (m *RateLimiterAction) GetStatusCode() HTTPLocalResponseStatusCode {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return Default_RateLimiterAction_StatusCode
}

func (m *RateLimiterAction) GetFile() *HTTPLocalFile {
	if m != nil {
		return m.File
	}
	return nil
}

type RateLimiterProfile struct {
	// L4/L7 Rate Limiters
	ClientIpConnectionsRateLimit *RateProfile `protobuf:"bytes,1,opt,name=client_ip_connections_rate_limit" json:"client_ip_connections_rate_limit,omitempty"`
	// L7 Rate Limiters
	ClientIpRequestsRateLimit            *RateProfile `protobuf:"bytes,2,opt,name=client_ip_requests_rate_limit" json:"client_ip_requests_rate_limit,omitempty"`
	UriRequestsRateLimit                 *RateProfile `protobuf:"bytes,3,opt,name=uri_requests_rate_limit" json:"uri_requests_rate_limit,omitempty"`
	ClientIpToUriRequestsRateLimit       *RateProfile `protobuf:"bytes,4,opt,name=client_ip_to_uri_requests_rate_limit" json:"client_ip_to_uri_requests_rate_limit,omitempty"`
	ClientIpFailedRequestsRateLimit      *RateProfile `protobuf:"bytes,5,opt,name=client_ip_failed_requests_rate_limit" json:"client_ip_failed_requests_rate_limit,omitempty"`
	UriFailedRequestsRateLimit           *RateProfile `protobuf:"bytes,6,opt,name=uri_failed_requests_rate_limit" json:"uri_failed_requests_rate_limit,omitempty"`
	ClientIpToUriFailedRequestsRateLimit *RateProfile `protobuf:"bytes,7,opt,name=client_ip_to_uri_failed_requests_rate_limit" json:"client_ip_to_uri_failed_requests_rate_limit,omitempty"`
	ClientIpScannersRequestsRateLimit    *RateProfile `protobuf:"bytes,8,opt,name=client_ip_scanners_requests_rate_limit" json:"client_ip_scanners_requests_rate_limit,omitempty"`
	UriScannersRequestsRateLimit         *RateProfile `protobuf:"bytes,9,opt,name=uri_scanners_requests_rate_limit" json:"uri_scanners_requests_rate_limit,omitempty"`
	XXX_unrecognized                     []byte       `json:"-"`
}

func (m *RateLimiterProfile) Reset()                    { *m = RateLimiterProfile{} }
func (m *RateLimiterProfile) String() string            { return proto.CompactTextString(m) }
func (*RateLimiterProfile) ProtoMessage()               {}
func (*RateLimiterProfile) Descriptor() ([]byte, []int) { return fileDescriptor79, []int{2} }

func (m *RateLimiterProfile) GetClientIpConnectionsRateLimit() *RateProfile {
	if m != nil {
		return m.ClientIpConnectionsRateLimit
	}
	return nil
}

func (m *RateLimiterProfile) GetClientIpRequestsRateLimit() *RateProfile {
	if m != nil {
		return m.ClientIpRequestsRateLimit
	}
	return nil
}

func (m *RateLimiterProfile) GetUriRequestsRateLimit() *RateProfile {
	if m != nil {
		return m.UriRequestsRateLimit
	}
	return nil
}

func (m *RateLimiterProfile) GetClientIpToUriRequestsRateLimit() *RateProfile {
	if m != nil {
		return m.ClientIpToUriRequestsRateLimit
	}
	return nil
}

func (m *RateLimiterProfile) GetClientIpFailedRequestsRateLimit() *RateProfile {
	if m != nil {
		return m.ClientIpFailedRequestsRateLimit
	}
	return nil
}

func (m *RateLimiterProfile) GetUriFailedRequestsRateLimit() *RateProfile {
	if m != nil {
		return m.UriFailedRequestsRateLimit
	}
	return nil
}

func (m *RateLimiterProfile) GetClientIpToUriFailedRequestsRateLimit() *RateProfile {
	if m != nil {
		return m.ClientIpToUriFailedRequestsRateLimit
	}
	return nil
}

func (m *RateLimiterProfile) GetClientIpScannersRequestsRateLimit() *RateProfile {
	if m != nil {
		return m.ClientIpScannersRequestsRateLimit
	}
	return nil
}

func (m *RateLimiterProfile) GetUriScannersRequestsRateLimit() *RateProfile {
	if m != nil {
		return m.UriScannersRequestsRateLimit
	}
	return nil
}

func init() {
	proto.RegisterType((*RateProfile)(nil), "RateProfile")
	proto.RegisterType((*RateLimiterAction)(nil), "RateLimiterAction")
	proto.RegisterType((*RateLimiterProfile)(nil), "RateLimiterProfile")
	proto.RegisterEnum("RateLimiterActionType", RateLimiterActionType_name, RateLimiterActionType_value)
}

var fileDescriptor79 = []byte{
	// 1727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x58, 0x4f, 0x6f, 0x23, 0x49,
	0x15, 0xc7, 0x71, 0xec, 0x0d, 0x9d, 0x25, 0xca, 0xf6, 0x02, 0x13, 0x65, 0x27, 0x50, 0xca, 0xae,
	0xd8, 0x15, 0x3b, 0xd3, 0x38, 0x9e, 0xec, 0x22, 0xb2, 0x12, 0xc8, 0x76, 0xbc, 0x10, 0xe1, 0x75,
	0x8c, 0xed, 0x0c, 0x1a, 0x04, 0x6a, 0x95, 0xdb, 0xe5, 0xb8, 0x94, 0xee, 0x2e, 0x53, 0x55, 0x3d,
	0x19, 0x33, 0x42, 0x7c, 0x02, 0x24, 0x18, 0x09, 0xcd, 0x01, 0x2e, 0x20, 0x94, 0x03, 0x47, 0x04,
	0x17, 0x4e, 0x7c, 0x03, 0x2e, 0x1c, 0x10, 0x73, 0xe4, 0xc2, 0x85, 0xaf, 0x80, 0x78, 0xaf, 0xba,
	0xdb, 0x6e, 0x3b, 0x9d, 0x28, 0x9a, 0x3f, 0x1c, 0x10, 0x52, 0x14, 0xb9, 0xbb, 0x5f, 0xbd, 0xf7,
	0x7b, 0xef, 0xf7, 0x7e, 0xaf, 0xab, 0xda, 0xb2, 0x24, 0xd5, 0xcc, 0x99, 0x48, 0xa1, 0xc5, 0xf6,
	0xeb, 0x9e, 0x08, 0x02, 0x11, 0x26, 0x57, 0x9f, 0x11, 0x13, 0xcd, 0x45, 0xa8, 0xd2, 0x87, 0xd4,
	0xc3, 0xcb, 0xf8, 0x6a, 0xf7, 0xcf, 0xab, 0xd6, 0x7a, 0x17, 0x56, 0x76, 0xa4, 0x18, 0x71, 0x9f,
	0xd9, 0x67, 0x56, 0xc9, 0x13, 0x51, 0xa8, 0xb7, 0x0a, 0xa4, 0xf0, 0x5e, 0xe9, 0xa0, 0x50, 0xa9,
	0x3f, 0xf8, 0xcd, 0xc5, 0xce, 0xfe, 0x27, 0xf4, 0x11, 0x0f, 0xa2, 0x80, 0x84, 0x51, 0x30, 0x60,
	0x92, 0x88, 0x11, 0xf1, 0x44, 0x18, 0x32, 0xe3, 0x49, 0x11, 0x21, 0x89, 0x64, 0x3f, 0x8c, 0x98,
	0xd2, 0xe6, 0xf7, 0x84, 0x7a, 0x67, 0x4c, 0xab, 0xdf, 0x5f, 0xec, 0xbc, 0xb6, 0x57, 0xb9, 0x5b,
	0xfd, 0xa0, 0x52, 0xf9, 0xfb, 0xc5, 0x8e, 0xfd, 0x98, 0x54, 0x0e, 0xc8, 0xbb, 0x51, 0xe8, 0xf3,
	0x80, 0x6b, 0x36, 0x7c, 0x97, 0xfc, 0xd8, 0xfe, 0x59, 0xc1, 0x5a, 0x1b, 0x44, 0x52, 0x69, 0x57,
	0xfd, 0x68, 0x6b, 0x25, 0x0d, 0xf8, 0x18, 0x02, 0xde, 0x7f, 0x9e, 0x80, 0x44, 0x0b, 0x32, 0x60,
	0xc4, 0x67, 0x9a, 0xe8, 0xb1, 0x14, 0xd1, 0xe9, 0x98, 0xf0, 0x50, 0x69, 0x1a, 0xc2, 0x1f, 0x13,
	0x91, 0xf2, 0xa7, 0xb9, 0x90, 0x68, 0xa4, 0x45, 0x40, 0x35, 0xf7, 0x10, 0x52, 0xd7, 0x2a, 0x4f,
	0x98, 0xe4, 0x62, 0xb8, 0x55, 0x8c, 0xf1, 0xec, 0xd5, 0xbf, 0x01, 0x78, 0xde, 0xef, 0xf3, 0x80,
	0x91, 0x87, 0xd4, 0x8f, 0x18, 0xf8, 0x24, 0x8a, 0x01, 0x9a, 0xa1, 0x09, 0xc8, 0xc2, 0x91, 0x90,
	0x1e, 0x23, 0x58, 0x7e, 0x62, 0x4a, 0xf7, 0xbb, 0x8b, 0x9d, 0x22, 0x18, 0x40, 0xac, 0xd2, 0xde,
	0xdd, 0x7b, 0x95, 0x8a, 0xfd, 0x5d, 0xeb, 0x0d, 0xf6, 0x68, 0xe2, 0x73, 0x8f, 0x6b, 0x57, 0x4b,
	0xc0, 0xca, 0xc3, 0xd3, 0xad, 0x55, 0x70, 0xbf, 0x76, 0x50, 0x1a, 0x51, 0x5f, 0xb1, 0xfa, 0x07,
	0x10, 0x62, 0xaf, 0x99, 0xd8, 0xf8, 0x53, 0x62, 0xac, 0x14, 0xa1, 0x21, 0xa1, 0x5a, 0x63, 0x72,
	0x92, 0x50, 0x4f, 0x0a, 0xa5, 0xe2, 0x30, 0x31, 0x42, 0x65, 0x7f, 0x68, 0x59, 0x23, 0x1e, 0x32,
	0xf7, 0x54, 0x52, 0x1e, 0x6e, 0x95, 0xb2, 0x1e, 0xdf, 0x02, 0x8f, 0xb7, 0x9a, 0x21, 0x1d, 0xf8,
	0x8c, 0xa0, 0x0d, 0x01, 0x9b, 0x30, 0xf2, 0xa9, 0xe4, 0x7a, 0x6a, 0xb7, 0xac, 0x72, 0xdc, 0x04,
	0x5b, 0x65, 0x58, 0xb3, 0x5e, 0xb5, 0x1d, 0x6c, 0x81, 0x96, 0x21, 0x46, 0xd6, 0xcc, 0x93, 0xfa,
	0x7b, 0xe0, 0xe0, 0x9d, 0xf8, 0x37, 0xa6, 0x09, 0x21, 0x21, 0xcf, 0x80, 0x44, 0x13, 0xb8, 0x36,
	0x20, 0x0c, 0x8f, 0x90, 0xc9, 0xee, 0xdf, 0x8a, 0xd6, 0x1b, 0x97, 0xd6, 0xdb, 0xda, 0x5a, 0xd5,
	0xd3, 0x09, 0x33, 0x7d, 0xb4, 0x51, 0xfd, 0xfc, 0xe5, 0x08, 0x7d, 0x78, 0x7a, 0xb0, 0xd1, 0x6d,
	0xb9, 0xb5, 0x46, 0xff, 0xe8, 0xb8, 0xed, 0xb6, 0x8f, 0xdb, 0xcd, 0xfa, 0xd7, 0x21, 0xea, 0x01,
	0x3e, 0x41, 0xc6, 0xe9, 0x2c, 0x3a, 0xb0, 0x9a, 0xd4, 0x79, 0x18, 0x23, 0x18, 0x73, 0x8d, 0xb1,
	0x81, 0x67, 0x96, 0x41, 0xe3, 0xd8, 0xdf, 0xb3, 0xd6, 0x24, 0x1b, 0x72, 0x09, 0x8d, 0x62, 0x1a,
	0x6a, 0xbd, 0xfa, 0xa6, 0xf3, 0xad, 0x7e, 0xbf, 0xd3, 0x4d, 0x6e, 0x26, 0xc9, 0xdd, 0x83, 0x30,
	0x5f, 0xe9, 0x50, 0x49, 0x03, 0x06, 0x78, 0x14, 0x01, 0xd7, 0x04, 0xcd, 0x48, 0x6a, 0x97, 0x71,
	0x9a, 0xc0, 0x70, 0xec, 0x27, 0x05, 0x6b, 0x1d, 0xba, 0x49, 0x47, 0xca, 0xf5, 0xc4, 0x90, 0x99,
	0x06, 0xd9, 0xa8, 0xde, 0x36, 0xfe, 0x5b, 0xc2, 0xa3, 0x7e, 0x97, 0x29, 0xc0, 0xa6, 0x58, 0xcf,
	0x18, 0x35, 0xc0, 0xe6, 0xe0, 0x6d, 0x7c, 0xe8, 0xb6, 0x8e, 0x1b, 0xb5, 0x96, 0xdb, 0x6d, 0xf6,
	0x3a, 0xc7, 0xed, 0x5e, 0xd3, 0xed, 0xf5, 0x6b, 0xfd, 0x93, 0x9e, 0xdb, 0x38, 0x3e, 0x6c, 0xba,
	0xfb, 0xd5, 0xaf, 0xd5, 0x0f, 0x00, 0xcd, 0x87, 0x26, 0x7c, 0xec, 0x9e, 0xa0, 0x7b, 0x83, 0xc9,
	0xb8, 0x25, 0xa9, 0xdf, 0x3c, 0x50, 0xdf, 0xb7, 0x56, 0x51, 0xb7, 0xa6, 0x9d, 0xd6, 0xab, 0x1b,
	0x73, 0x30, 0x1f, 0xc3, 0xdd, 0xb8, 0x9c, 0xf8, 0x2b, 0x29, 0x62, 0xa4, 0xa0, 0x80, 0xb3, 0x64,
	0x63, 0xef, 0xf2, 0x6a, 0xef, 0xbb, 0xcf, 0x6e, 0x5b, 0x76, 0x86, 0xb8, 0x74, 0x48, 0xfc, 0xa2,
	0x60, 0x11, 0xcf, 0xe7, 0x2c, 0xd4, 0x2e, 0x9f, 0xb8, 0x19, 0x61, 0xba, 0xe8, 0xc3, 0x35, 0x3e,
	0x0c, 0xf1, 0xeb, 0xd5, 0xd7, 0x9d, 0xcc, 0x74, 0xa9, 0xff, 0x00, 0xf0, 0x3c, 0xc0, 0x1b, 0xa4,
	0x15, 0xc7, 0xf1, 0xfd, 0x05, 0x5d, 0x07, 0x14, 0x13, 0x97, 0x22, 0x80, 0xd6, 0x9f, 0x12, 0x05,
	0x0c, 0x03, 0xf4, 0x38, 0x12, 0x39, 0xea, 0x10, 0x3a, 0x1c, 0x02, 0x5a, 0x23, 0x3b, 0x24, 0xfe,
	0x3e, 0x97, 0x3a, 0x82, 0x0c, 0x7a, 0x4c, 0x3e, 0xe4, 0x1e, 0x73, 0xec, 0x5f, 0x16, 0xac, 0x9d,
	0x39, 0xae, 0x74, 0x42, 0x64, 0x41, 0xad, 0xe4, 0x80, 0x1a, 0x01, 0xa8, 0xc1, 0x12, 0x28, 0x53,
	0x9f, 0xd9, 0x88, 0xb9, 0x11, 0x22, 0x5c, 0x76, 0xd2, 0x6d, 0x29, 0xec, 0xdc, 0x5c, 0x74, 0x3f,
	0xb1, 0x6e, 0x45, 0x92, 0xe7, 0xc2, 0x2a, 0xe6, 0xc0, 0xea, 0x00, 0xac, 0xd6, 0x0d, 0x60, 0x61,
	0x09, 0x97, 0xf1, 0xb0, 0x18, 0xd1, 0x1c, 0x31, 0x00, 0x73, 0xec, 0x9f, 0x17, 0xac, 0x77, 0xe6,
	0xe5, 0xd1, 0xc2, 0xbd, 0x0a, 0xce, 0x6a, 0x0e, 0x9c, 0x13, 0x80, 0xf3, 0x9d, 0x97, 0x50, 0xa5,
	0x25, 0x4c, 0xff, 0x28, 0x66, 0x31, 0x8d, 0x28, 0x84, 0x1a, 0xe6, 0x62, 0x2a, 0xe5, 0x60, 0xba,
	0x28, 0x02, 0xa8, 0x5f, 0x17, 0x97, 0x50, 0x2d, 0x01, 0x4a, 0x71, 0x60, 0xdb, 0x53, 0xa2, 0x26,
	0xcc, 0xe3, 0x23, 0x0e, 0x32, 0x88, 0x87, 0xa8, 0x61, 0x0b, 0x67, 0xbb, 0x08, 0x61, 0x88, 0x23,
	0x6f, 0x66, 0x86, 0xe3, 0xed, 0x18, 0xcc, 0x92, 0x3b, 0x3d, 0xa6, 0x3a, 0xf5, 0x68, 0x26, 0x32,
	0x94, 0x9a, 0xe2, 0xeb, 0x86, 0xa9, 0xb1, 0xf0, 0x63, 0x71, 0x19, 0x9b, 0xd8, 0xbd, 0x43, 0x1a,
	0xc6, 0x16, 0x8c, 0x24, 0x8b, 0xc7, 0x3a, 0xb8, 0x1c, 0x50, 0xd4, 0x21, 0x8e, 0xb6, 0x31, 0xe3,
	0x32, 0x53, 0x21, 0x30, 0x37, 0xd1, 0x69, 0x38, 0x8c, 0x51, 0x25, 0x20, 0x71, 0xf1, 0x1c, 0x79,
	0xfa, 0x72, 0x43, 0xb4, 0x99, 0x72, 0x38, 0x30, 0x28, 0x12, 0xa8, 0x68, 0x3f, 0x64, 0x2c, 0x40,
	0xb5, 0xc7, 0x59, 0xcc, 0x42, 0x26, 0xd8, 0x01, 0xa6, 0x82, 0xc6, 0x84, 0x17, 0x8b, 0xe2, 0xa0,
	0x39, 0x26, 0x25, 0xde, 0x99, 0x8f, 0x1f, 0x75, 0x07, 0x85, 0xa9, 0xb8, 0xd2, 0x68, 0x7d, 0xce,
	0xf5, 0x98, 0x8c, 0xc5, 0x39, 0xa9, 0x3d, 0xe4, 0x30, 0x36, 0x4e, 0x95, 0x41, 0xf8, 0x09, 0xd3,
	0x92, 0x7b, 0x8a, 0xa8, 0x68, 0xa0, 0xa6, 0x60, 0x18, 0xa0, 0x80, 0xe5, 0xd9, 0x72, 0xe1, 0x1c,
	0x62, 0xff, 0xb6, 0x68, 0x7d, 0x01, 0x9b, 0xed, 0x1a, 0x7e, 0xcb, 0x39, 0xfc, 0xfe, 0x6b, 0x05,
	0xf8, 0xfd, 0xe7, 0xca, 0x55, 0xfc, 0x62, 0x3b, 0x41, 0x17, 0x1d, 0xbd, 0x38, 0xb5, 0x66, 0xa0,
	0x00, 0x69, 0xe8, 0xec, 0x66, 0xac, 0xfe, 0x4f, 0xd2, 0xf4, 0xef, 0xa2, 0xf5, 0xfe, 0xa5, 0x01,
	0x71, 0x0d, 0x67, 0xaf, 0xe5, 0x70, 0xf6, 0x27, 0xd4, 0xe4, 0x1f, 0x6f, 0xa8, 0xc9, 0x97, 0xc7,
	0xe0, 0x25, 0x71, 0x26, 0xef, 0x88, 0x9b, 0x33, 0xfa, 0x7f, 0x9d, 0x12, 0xfb, 0x59, 0xd9, 0xfa,
	0xd2, 0xbc, 0x01, 0x94, 0x47, 0xe1, 0xd5, 0x2c, 0x55, 0x2e, 0xf7, 0x6b, 0x39, 0xdc, 0xff, 0xaa,
	0x0c, 0xdc, 0x3f, 0x2d, 0xd7, 0xd2, 0x0d, 0x35, 0x30, 0x9f, 0xec, 0x65, 0x93, 0x74, 0x62, 0x3c,
	0x9e, 0x4f, 0x95, 0xe2, 0xa3, 0x29, 0x16, 0x26, 0x80, 0xed, 0x34, 0x50, 0x75, 0x0f, 0xf6, 0xa7,
	0x22, 0x9a, 0x28, 0x72, 0x97, 0x7c, 0x53, 0x88, 0xe1, 0x1d, 0x52, 0xa7, 0xf0, 0xef, 0x24, 0x3c,
	0x0b, 0xc5, 0x79, 0x78, 0x53, 0x72, 0x6a, 0x33, 0x72, 0x32, 0xe6, 0xc0, 0x18, 0x52, 0x11, 0x77,
	0x03, 0xfa, 0x8e, 0x23, 0x91, 0xf3, 0x31, 0x33, 0x4b, 0x4d, 0xa9, 0x7a, 0x90, 0x29, 0x39, 0x84,
	0xbd, 0x60, 0xbc, 0xe3, 0x8c, 0xab, 0x44, 0x06, 0x11, 0xf7, 0x61, 0x93, 0x3f, 0x86, 0xe2, 0x0a,
	0x39, 0xc5, 0xae, 0x5b, 0x6e, 0x37, 0x96, 0xf6, 0x9c, 0x08, 0x26, 0x70, 0xec, 0x00, 0xf2, 0x23,
	0xcf, 0x03, 0x08, 0xa3, 0x08, 0x32, 0xbf, 0x02, 0x47, 0x92, 0xd4, 0x12, 0x0c, 0xb0, 0xe0, 0x0a,
	0x8f, 0x2b, 0xd1, 0x68, 0x04, 0x87, 0x00, 0x24, 0x33, 0x8d, 0x4b, 0x07, 0x22, 0xd2, 0x26, 0x58,
	0xa6, 0x73, 0x0c, 0x00, 0x88, 0x36, 0x9e, 0x57, 0x56, 0x66, 0xb7, 0x70, 0xf3, 0x9c, 0xcd, 0xbd,
	0x79, 0x53, 0xf2, 0xf0, 0x72, 0x3f, 0x7e, 0xcc, 0x43, 0xa4, 0xea, 0xce, 0x0c, 0x70, 0xdc, 0x47,
	0xf3, 0xbc, 0x97, 0xd5, 0xb6, 0x90, 0x10, 0x50, 0x95, 0x24, 0x63, 0xe4, 0x60, 0xd8, 0x58, 0xb0,
	0x5c, 0x40, 0x65, 0x5c, 0x2b, 0x6c, 0x48, 0xd8, 0x50, 0xce, 0x05, 0xa9, 0xb0, 0x90, 0x31, 0xb4,
	0xb4, 0x40, 0x29, 0x18, 0xe3, 0xdb, 0x21, 0xfd, 0x6b, 0xb9, 0xa2, 0x8b, 0x3d, 0x17, 0x85, 0xa0,
	0x77, 0xae, 0x15, 0xf3, 0x47, 0x44, 0x25, 0xc3, 0x3d, 0x6d, 0x80, 0xa4, 0xb9, 0x10, 0x6c, 0x1a,
	0x6a, 0xb6, 0x55, 0x49, 0xa2, 0x91, 0x80, 0xe1, 0xb1, 0x53, 0x8d, 0xf9, 0x84, 0x78, 0x80, 0xeb,
	0x14, 0xbc, 0x0d, 0xa7, 0x21, 0x0d, 0x12, 0xff, 0x26, 0x09, 0x33, 0x8f, 0x92, 0x87, 0x58, 0x55,
	0x49, 0x91, 0x3a, 0x38, 0x8c, 0x6a, 0xc8, 0x2c, 0x54, 0x0b, 0xf2, 0xaf, 0x1d, 0x36, 0x1c, 0xfb,
	0xa7, 0x65, 0x8b, 0xe0, 0x44, 0xbd, 0x56, 0x57, 0x9f, 0xce, 0xd1, 0xd5, 0x5f, 0x4b, 0xa0, 0xab,
	0xbf, 0x94, 0xf2, 0x74, 0x05, 0xf3, 0xed, 0x79, 0x45, 0x15, 0x2f, 0x7d, 0x65, 0x12, 0xc1, 0x56,
	0xc7, 0x08, 0xd7, 0x09, 0xe4, 0x32, 0x84, 0x97, 0xa4, 0x0e, 0x1c, 0x92, 0x28, 0x8e, 0x59, 0x80,
	0x17, 0x55, 0x86, 0x71, 0xf4, 0x02, 0xb2, 0x58, 0xdc, 0x6a, 0x60, 0xc3, 0x3e, 0xbf, 0x30, 0x0c,
	0x96, 0xff, 0x82, 0x2a, 0xe6, 0x71, 0x5e, 0x89, 0x1e, 0xbe, 0xfc, 0x87, 0xa2, 0xf5, 0xb9, 0xdc,
	0xcf, 0x02, 0xf6, 0xbe, 0xb5, 0xf4, 0x61, 0x60, 0xf3, 0x53, 0xdb, 0xe4, 0xc9, 0xd3, 0xdd, 0xdb,
	0x6d, 0x91, 0x7e, 0x15, 0x40, 0x8a, 0x17, 0xbe, 0x43, 0x38, 0xb0, 0xea, 0xcd, 0xf9, 0xaa, 0xc3,
	0xee, 0x71, 0x07, 0x8e, 0xd8, 0xed, 0xf6, 0x66, 0x61, 0xfb, 0x2d, 0x58, 0x7a, 0xeb, 0x50, 0x8a,
	0xc9, 0x62, 0xc5, 0xd5, 0x34, 0x54, 0x8e, 0x7d, 0x62, 0x7d, 0x76, 0xbe, 0x0a, 0xce, 0xe8, 0xcd,
	0x7e, 0xbc, 0x6c, 0x65, 0xfb, 0x23, 0x58, 0xf6, 0xd5, 0xfc, 0x65, 0xa6, 0x4e, 0x8a, 0xc1, 0x3f,
	0x8a, 0x07, 0x68, 0xa6, 0x31, 0x63, 0x0f, 0xde, 0x48, 0xd8, 0x16, 0xfd, 0x46, 0xc7, 0xb1, 0xdb,
	0x59, 0xb7, 0x8d, 0xd6, 0x31, 0x9c, 0xfb, 0x8d, 0xdb, 0xe2, 0xf6, 0x3e, 0xb8, 0xad, 0x34, 0x7c,
	0xa1, 0x58, 0xe6, 0xec, 0x1b, 0xb7, 0xfa, 0xac, 0x4b, 0x4e, 0x99, 0x5e, 0x08, 0xea, 0xd8, 0xdf,
	0xce, 0x26, 0x97, 0x7c, 0x50, 0xe8, 0x75, 0x36, 0x57, 0xb7, 0xab, 0xe0, 0xce, 0xe9, 0x21, 0x14,
	0x7f, 0xf1, 0x3c, 0xbf, 0x58, 0xa1, 0xec, 0x8b, 0xde, 0xfe, 0x08, 0x8e, 0xf5, 0x99, 0x9c, 0x0f,
	0x8f, 0xba, 0xcd, 0x46, 0x7f, 0xb3, 0xb4, 0xfd, 0x36, 0xf8, 0xfa, 0x62, 0xce, 0x37, 0x90, 0xec,
	0xe2, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x8c, 0x9e, 0x32, 0x6a, 0x14, 0x00, 0x00,
}
