// Code generated by protoc-gen-go.
// source: application_policy.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HTTPSecurityActionType int32

const (
	HTTPSecurityActionType_HTTP_SECURITY_ACTION_CLOSE_CONN        HTTPSecurityActionType = 1
	HTTPSecurityActionType_HTTP_SECURITY_ACTION_SEND_RESPONSE     HTTPSecurityActionType = 2
	HTTPSecurityActionType_HTTP_SECURITY_ACTION_ALLOW             HTTPSecurityActionType = 3
	HTTPSecurityActionType_HTTP_SECURITY_ACTION_REDIRECT_TO_HTTPS HTTPSecurityActionType = 4
	HTTPSecurityActionType_HTTP_SECURITY_ACTION_RATE_LIMIT        HTTPSecurityActionType = 5
)

var HTTPSecurityActionType_name = map[int32]string{
	1: "HTTP_SECURITY_ACTION_CLOSE_CONN",
	2: "HTTP_SECURITY_ACTION_SEND_RESPONSE",
	3: "HTTP_SECURITY_ACTION_ALLOW",
	4: "HTTP_SECURITY_ACTION_REDIRECT_TO_HTTPS",
	5: "HTTP_SECURITY_ACTION_RATE_LIMIT",
}
var HTTPSecurityActionType_value = map[string]int32{
	"HTTP_SECURITY_ACTION_CLOSE_CONN":        1,
	"HTTP_SECURITY_ACTION_SEND_RESPONSE":     2,
	"HTTP_SECURITY_ACTION_ALLOW":             3,
	"HTTP_SECURITY_ACTION_REDIRECT_TO_HTTPS": 4,
	"HTTP_SECURITY_ACTION_RATE_LIMIT":        5,
}

func (x HTTPSecurityActionType) Enum() *HTTPSecurityActionType {
	p := new(HTTPSecurityActionType)
	*p = x
	return p
}
func (x HTTPSecurityActionType) String() string {
	return proto.EnumName(HTTPSecurityActionType_name, int32(x))
}
func (x *HTTPSecurityActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HTTPSecurityActionType_value, data, "HTTPSecurityActionType")
	if err != nil {
		return err
	}
	*x = HTTPSecurityActionType(value)
	return nil
}
func (HTTPSecurityActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

type HTTPSecurityAction struct {
	Action *HTTPSecurityActionType `protobuf:"varint,1,req,name=action,enum=HTTPSecurityActionType" json:"action,omitempty"`
	// Send Response
	StatusCode       *HTTPLocalResponseStatusCode `protobuf:"varint,2,opt,name=status_code,enum=HTTPLocalResponseStatusCode" json:"status_code,omitempty"`
	HttpsPort        *Port                        `protobuf:"bytes,3,opt,name=https_port" json:"https_port,omitempty"`
	File             *HTTPLocalFile               `protobuf:"bytes,4,opt,name=file" json:"file,omitempty"`
	RateLimit        *RateProfile                 `protobuf:"bytes,5,opt,name=rate_limit" json:"rate_limit,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *HTTPSecurityAction) Reset()                    { *m = HTTPSecurityAction{} }
func (m *HTTPSecurityAction) String() string            { return proto.CompactTextString(m) }
func (*HTTPSecurityAction) ProtoMessage()               {}
func (*HTTPSecurityAction) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *HTTPSecurityAction) GetAction() HTTPSecurityActionType {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return HTTPSecurityActionType_HTTP_SECURITY_ACTION_CLOSE_CONN
}

func (m *HTTPSecurityAction) GetStatusCode() HTTPLocalResponseStatusCode {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return HTTPLocalResponseStatusCode_HTTP_LOCAL_RESPONSE_STATUS_CODE_200
}

func (m *HTTPSecurityAction) GetHttpsPort() *Port {
	if m != nil {
		return m.HttpsPort
	}
	return nil
}

func (m *HTTPSecurityAction) GetFile() *HTTPLocalFile {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *HTTPSecurityAction) GetRateLimit() *RateProfile {
	if m != nil {
		return m.RateLimit
	}
	return nil
}

type HTTPSecurityRule struct {
	Name             *string             `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Index            *int32              `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
	Enable           *bool               `protobuf:"varint,3,req,name=enable,def=1" json:"enable,omitempty"`
	Match            *MatchTarget        `protobuf:"bytes,4,opt,name=match" json:"match,omitempty"`
	Action           *HTTPSecurityAction `protobuf:"bytes,5,opt,name=action" json:"action,omitempty"`
	Log              *bool               `protobuf:"varint,6,opt,name=log" json:"log,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *HTTPSecurityRule) Reset()                    { *m = HTTPSecurityRule{} }
func (m *HTTPSecurityRule) String() string            { return proto.CompactTextString(m) }
func (*HTTPSecurityRule) ProtoMessage()               {}
func (*HTTPSecurityRule) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

const Default_HTTPSecurityRule_Enable bool = true

func (m *HTTPSecurityRule) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *HTTPSecurityRule) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *HTTPSecurityRule) GetEnable() bool {
	if m != nil && m.Enable != nil {
		return *m.Enable
	}
	return Default_HTTPSecurityRule_Enable
}

func (m *HTTPSecurityRule) GetMatch() *MatchTarget {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *HTTPSecurityRule) GetAction() *HTTPSecurityAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *HTTPSecurityRule) GetLog() bool {
	if m != nil && m.Log != nil {
		return *m.Log
	}
	return false
}

type HTTPSecurityPolicy struct {
	Rules            []*HTTPSecurityRule `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *HTTPSecurityPolicy) Reset()                    { *m = HTTPSecurityPolicy{} }
func (m *HTTPSecurityPolicy) String() string            { return proto.CompactTextString(m) }
func (*HTTPSecurityPolicy) ProtoMessage()               {}
func (*HTTPSecurityPolicy) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *HTTPSecurityPolicy) GetRules() []*HTTPSecurityRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type HTTPRequestRule struct {
	Name   *string      `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Index  *int32       `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
	Enable *bool        `protobuf:"varint,3,req,name=enable,def=1" json:"enable,omitempty"`
	Match  *MatchTarget `protobuf:"bytes,4,opt,name=match" json:"match,omitempty"`
	// Rewrite and Switching actions are typically possible concurrently but
	// Redirect action is not. This has to be enforced by UI or CLI.
	RedirectAction   *HTTPRedirectAction   `protobuf:"bytes,5,opt,name=redirect_action" json:"redirect_action,omitempty"`
	HdrAction        []*HTTPHdrAction      `protobuf:"bytes,6,rep,name=hdr_action" json:"hdr_action,omitempty"`
	RewriteUrlAction *HTTPRewriteURLAction `protobuf:"bytes,7,opt,name=rewrite_url_action" json:"rewrite_url_action,omitempty"`
	SwitchingAction  *HTTPSwitchingAction  `protobuf:"bytes,8,opt,name=switching_action" json:"switching_action,omitempty"`
	Log              *bool                 `protobuf:"varint,9,opt,name=log" json:"log,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *HTTPRequestRule) Reset()                    { *m = HTTPRequestRule{} }
func (m *HTTPRequestRule) String() string            { return proto.CompactTextString(m) }
func (*HTTPRequestRule) ProtoMessage()               {}
func (*HTTPRequestRule) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

const Default_HTTPRequestRule_Enable bool = true

func (m *HTTPRequestRule) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *HTTPRequestRule) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *HTTPRequestRule) GetEnable() bool {
	if m != nil && m.Enable != nil {
		return *m.Enable
	}
	return Default_HTTPRequestRule_Enable
}

func (m *HTTPRequestRule) GetMatch() *MatchTarget {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *HTTPRequestRule) GetRedirectAction() *HTTPRedirectAction {
	if m != nil {
		return m.RedirectAction
	}
	return nil
}

func (m *HTTPRequestRule) GetHdrAction() []*HTTPHdrAction {
	if m != nil {
		return m.HdrAction
	}
	return nil
}

func (m *HTTPRequestRule) GetRewriteUrlAction() *HTTPRewriteURLAction {
	if m != nil {
		return m.RewriteUrlAction
	}
	return nil
}

func (m *HTTPRequestRule) GetSwitchingAction() *HTTPSwitchingAction {
	if m != nil {
		return m.SwitchingAction
	}
	return nil
}

func (m *HTTPRequestRule) GetLog() bool {
	if m != nil && m.Log != nil {
		return *m.Log
	}
	return false
}

type HTTPRequestPolicy struct {
	Rules            []*HTTPRequestRule `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *HTTPRequestPolicy) Reset()                    { *m = HTTPRequestPolicy{} }
func (m *HTTPRequestPolicy) String() string            { return proto.CompactTextString(m) }
func (*HTTPRequestPolicy) ProtoMessage()               {}
func (*HTTPRequestPolicy) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *HTTPRequestPolicy) GetRules() []*HTTPRequestRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type HTTPResponseRule struct {
	Name             *string                  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Index            *int32                   `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
	Enable           *bool                    `protobuf:"varint,3,req,name=enable,def=1" json:"enable,omitempty"`
	Match            *ResponseMatchTarget     `protobuf:"bytes,4,opt,name=match" json:"match,omitempty"`
	HdrAction        []*HTTPHdrAction         `protobuf:"bytes,5,rep,name=hdr_action" json:"hdr_action,omitempty"`
	LocHdrAction     *HTTPRewriteLocHdrAction `protobuf:"bytes,6,opt,name=loc_hdr_action" json:"loc_hdr_action,omitempty"`
	Log              *bool                    `protobuf:"varint,7,opt,name=log" json:"log,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *HTTPResponseRule) Reset()                    { *m = HTTPResponseRule{} }
func (m *HTTPResponseRule) String() string            { return proto.CompactTextString(m) }
func (*HTTPResponseRule) ProtoMessage()               {}
func (*HTTPResponseRule) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

const Default_HTTPResponseRule_Enable bool = true

func (m *HTTPResponseRule) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *HTTPResponseRule) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *HTTPResponseRule) GetEnable() bool {
	if m != nil && m.Enable != nil {
		return *m.Enable
	}
	return Default_HTTPResponseRule_Enable
}

func (m *HTTPResponseRule) GetMatch() *ResponseMatchTarget {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *HTTPResponseRule) GetHdrAction() []*HTTPHdrAction {
	if m != nil {
		return m.HdrAction
	}
	return nil
}

func (m *HTTPResponseRule) GetLocHdrAction() *HTTPRewriteLocHdrAction {
	if m != nil {
		return m.LocHdrAction
	}
	return nil
}

func (m *HTTPResponseRule) GetLog() bool {
	if m != nil && m.Log != nil {
		return *m.Log
	}
	return false
}

type HTTPResponsePolicy struct {
	Rules            []*HTTPResponseRule `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *HTTPResponsePolicy) Reset()                    { *m = HTTPResponsePolicy{} }
func (m *HTTPResponsePolicy) String() string            { return proto.CompactTextString(m) }
func (*HTTPResponsePolicy) ProtoMessage()               {}
func (*HTTPResponsePolicy) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *HTTPResponsePolicy) GetRules() []*HTTPResponseRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type HTTPPolicySet struct {
	Uuid               *string             `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Name               *string             `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	HttpSecurityPolicy *HTTPSecurityPolicy `protobuf:"bytes,3,opt,name=http_security_policy" json:"http_security_policy,omitempty"`
	HttpRequestPolicy  *HTTPRequestPolicy  `protobuf:"bytes,4,opt,name=http_request_policy" json:"http_request_policy,omitempty"`
	HttpResponsePolicy *HTTPResponsePolicy `protobuf:"bytes,5,opt,name=http_response_policy" json:"http_response_policy,omitempty"`
	CreatedBy          *string             `protobuf:"bytes,6,opt,name=created_by" json:"created_by,omitempty"`
	CloudConfigCksum   *string             `protobuf:"bytes,7,opt,name=cloud_config_cksum" json:"cloud_config_cksum,omitempty"`
	IsInternalPolicy   *bool               `protobuf:"varint,90,opt,name=is_internal_policy,def=0" json:"is_internal_policy,omitempty"`
	Description        *string             `protobuf:"bytes,99,opt,name=description" json:"description,omitempty"`
	TenantUuid         *string             `protobuf:"bytes,100,req,name=tenant_uuid" json:"tenant_uuid,omitempty"`
	XXX_unrecognized   []byte              `json:"-"`
}

func (m *HTTPPolicySet) Reset()                    { *m = HTTPPolicySet{} }
func (m *HTTPPolicySet) String() string            { return proto.CompactTextString(m) }
func (*HTTPPolicySet) ProtoMessage()               {}
func (*HTTPPolicySet) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

const Default_HTTPPolicySet_IsInternalPolicy bool = false

func (m *HTTPPolicySet) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *HTTPPolicySet) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *HTTPPolicySet) GetHttpSecurityPolicy() *HTTPSecurityPolicy {
	if m != nil {
		return m.HttpSecurityPolicy
	}
	return nil
}

func (m *HTTPPolicySet) GetHttpRequestPolicy() *HTTPRequestPolicy {
	if m != nil {
		return m.HttpRequestPolicy
	}
	return nil
}

func (m *HTTPPolicySet) GetHttpResponsePolicy() *HTTPResponsePolicy {
	if m != nil {
		return m.HttpResponsePolicy
	}
	return nil
}

func (m *HTTPPolicySet) GetCreatedBy() string {
	if m != nil && m.CreatedBy != nil {
		return *m.CreatedBy
	}
	return ""
}

func (m *HTTPPolicySet) GetCloudConfigCksum() string {
	if m != nil && m.CloudConfigCksum != nil {
		return *m.CloudConfigCksum
	}
	return ""
}

func (m *HTTPPolicySet) GetIsInternalPolicy() bool {
	if m != nil && m.IsInternalPolicy != nil {
		return *m.IsInternalPolicy
	}
	return Default_HTTPPolicySet_IsInternalPolicy
}

func (m *HTTPPolicySet) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *HTTPPolicySet) GetTenantUuid() string {
	if m != nil && m.TenantUuid != nil {
		return *m.TenantUuid
	}
	return ""
}

type HTTPPolicies struct {
	Index             *int32  `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	HttpPolicySetUuid *string `protobuf:"bytes,2,req,name=http_policy_set_uuid" json:"http_policy_set_uuid,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *HTTPPolicies) Reset()                    { *m = HTTPPolicies{} }
func (m *HTTPPolicies) String() string            { return proto.CompactTextString(m) }
func (*HTTPPolicies) ProtoMessage()               {}
func (*HTTPPolicies) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{8} }

func (m *HTTPPolicies) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *HTTPPolicies) GetHttpPolicySetUuid() string {
	if m != nil && m.HttpPolicySetUuid != nil {
		return *m.HttpPolicySetUuid
	}
	return ""
}

func init() {
	proto.RegisterType((*HTTPSecurityAction)(nil), "HTTPSecurityAction")
	proto.RegisterType((*HTTPSecurityRule)(nil), "HTTPSecurityRule")
	proto.RegisterType((*HTTPSecurityPolicy)(nil), "HTTPSecurityPolicy")
	proto.RegisterType((*HTTPRequestRule)(nil), "HTTPRequestRule")
	proto.RegisterType((*HTTPRequestPolicy)(nil), "HTTPRequestPolicy")
	proto.RegisterType((*HTTPResponseRule)(nil), "HTTPResponseRule")
	proto.RegisterType((*HTTPResponsePolicy)(nil), "HTTPResponsePolicy")
	proto.RegisterType((*HTTPPolicySet)(nil), "HTTPPolicySet")
	proto.RegisterType((*HTTPPolicies)(nil), "HTTPPolicies")
	proto.RegisterEnum("HTTPSecurityActionType", HTTPSecurityActionType_name, HTTPSecurityActionType_value)
}

var fileDescriptor7 = []byte{
	// 1411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x57, 0xc1, 0x6e, 0xdb, 0x46,
	0x13, 0x86, 0x2d, 0xc9, 0x89, 0xd7, 0x4e, 0x22, 0x33, 0x4e, 0x7e, 0x41, 0x7f, 0x9c, 0x6c, 0xd5,
	0x34, 0x48, 0x83, 0x58, 0x49, 0x9d, 0xa0, 0x2d, 0x7c, 0x29, 0x44, 0x45, 0x49, 0x84, 0x2a, 0x96,
	0x40, 0xd2, 0x6d, 0x93, 0x0b, 0x41, 0x93, 0x2b, 0x99, 0x0d, 0x45, 0xaa, 0x4b, 0x32, 0xa9, 0x1f,
	0xa0, 0x97, 0x1e, 0x7b, 0x29, 0xd0, 0x4b, 0x81, 0x1e, 0xfc, 0x00, 0x3d, 0xe6, 0x09, 0x7a, 0xe9,
	0xa5, 0xe7, 0x3e, 0x49, 0x4f, 0x9d, 0x9d, 0xdd, 0x95, 0x45, 0x59, 0x09, 0xda, 0xa2, 0x05, 0x8a,
	0xde, 0xb8, 0xbb, 0x33, 0xdf, 0xcc, 0xce, 0x7c, 0x33, 0x3b, 0x24, 0x35, 0x6f, 0x32, 0x89, 0x42,
	0xdf, 0xcb, 0xc2, 0x24, 0x76, 0x27, 0x09, 0x7c, 0x1e, 0x35, 0x27, 0x3c, 0xc9, 0x92, 0xfa, 0xba,
	0x9f, 0x8c, 0xc7, 0x49, 0xac, 0x56, 0xe7, 0x92, 0x89, 0x10, 0x49, 0xd5, 0x72, 0x6d, 0xec, 0x65,
	0xfe, 0xa1, 0x96, 0xf4, 0x7c, 0x71, 0xa6, 0x56, 0x84, 0x7b, 0x19, 0x93, 0xdf, 0x8d, 0x5f, 0x4a,
	0xc4, 0x78, 0xec, 0x38, 0x03, 0x9b, 0xf9, 0x39, 0x0f, 0xb3, 0xa3, 0x16, 0x0a, 0x1a, 0x36, 0x59,
	0x91, 0x2a, 0xb5, 0x25, 0xba, 0x7c, 0xf3, 0xfc, 0xce, 0xff, 0x9a, 0xa7, 0x85, 0x9c, 0xa3, 0x09,
	0x33, 0x6f, 0xfd, 0x70, 0xbc, 0x75, 0x43, 0x7c, 0xd1, 0x64, 0x48, 0xb3, 0x43, 0x46, 0x53, 0x25,
	0x43, 0xa5, 0x3e, 0xcd, 0x12, 0x3a, 0x61, 0x7c, 0x98, 0xf0, 0xb1, 0xe1, 0x91, 0xb5, 0x34, 0xf3,
	0xb2, 0x3c, 0x75, 0xfd, 0x24, 0x60, 0xb5, 0x65, 0xba, 0x04, 0xc8, 0x57, 0x10, 0xb9, 0x97, 0xf8,
	0x5e, 0x64, 0xb1, 0x74, 0x02, 0x17, 0x60, 0x36, 0x0a, 0xb5, 0x41, 0xc6, 0x6c, 0x02, 0xfc, 0x2d,
	0x21, 0x40, 0xa5, 0x26, 0x15, 0x9a, 0x02, 0x33, 0x4f, 0x19, 0x05, 0x50, 0x1a, 0x09, 0x45, 0xca,
	0x95, 0xa6, 0x61, 0x11, 0x72, 0x98, 0x65, 0x93, 0x14, 0x02, 0xc5, 0xb3, 0x5a, 0x09, 0x2c, 0xac,
	0xed, 0x54, 0x9a, 0x03, 0x58, 0x98, 0x1f, 0x00, 0xd4, 0x3d, 0xbc, 0x01, 0xa3, 0xb6, 0xdd, 0xbb,
	0xe3, 0xf4, 0x6c, 0x2a, 0xa4, 0x04, 0x1a, 0x67, 0x41, 0xc8, 0x99, 0x9f, 0xe1, 0x0d, 0xd0, 0x1c,
	0x67, 0x5f, 0xe4, 0x2c, 0x15, 0x87, 0x86, 0x43, 0xca, 0xc3, 0x30, 0x62, 0xb5, 0x32, 0xa2, 0x9d,
	0x3f, 0xf1, 0xf7, 0x21, 0xec, 0x9a, 0xef, 0x03, 0xec, 0x8e, 0xf8, 0x12, 0x38, 0x07, 0x4c, 0x38,
	0x16, 0xa0, 0x67, 0x23, 0x16, 0x33, 0x08, 0x74, 0x18, 0x8f, 0x24, 0xe2, 0x9c, 0xa7, 0xcf, 0x08,
	0xa6, 0xc1, 0x8d, 0xc2, 0x71, 0x98, 0xd5, 0x2a, 0x88, 0xbd, 0xde, 0xb4, 0x60, 0x6b, 0xc0, 0x13,
	0x61, 0xcf, 0xfc, 0x10, 0x90, 0xef, 0x8b, 0x0d, 0xda, 0x13, 0x32, 0x74, 0x22, 0xf7, 0x67, 0xed,
	0x08, 0xd7, 0x41, 0x60, 0x1b, 0x41, 0xd0, 0xf9, 0x61, 0x94, 0xbc, 0x6c, 0x7c, 0x55, 0x22, 0xd5,
	0xd9, 0x7c, 0x59, 0x79, 0xc4, 0x8c, 0x06, 0x29, 0xc7, 0xde, 0x98, 0x61, 0x42, 0x57, 0xcd, 0x4d,
	0x00, 0xaf, 0xee, 0xc1, 0x5a, 0xe7, 0x8d, 0x0b, 0x99, 0xeb, 0xa4, 0x12, 0xc6, 0x01, 0xfb, 0x12,
	0x72, 0xb3, 0x7c, 0xb3, 0x62, 0x5e, 0x02, 0xa1, 0x8d, 0xae, 0xd8, 0x28, 0x48, 0xdd, 0x27, 0x2b,
	0x2c, 0xf6, 0x0e, 0x20, 0x24, 0x25, 0x10, 0x3b, 0xbb, 0x5b, 0xce, 0x78, 0xce, 0xcc, 0xab, 0x20,
	0x5c, 0xef, 0xe0, 0x3e, 0x85, 0xeb, 0x07, 0x61, 0x8a, 0x9f, 0x53, 0xad, 0x8f, 0x48, 0x05, 0x29,
	0xa9, 0xe2, 0xb8, 0xde, 0x7c, 0x22, 0x56, 0x8e, 0xc7, 0x47, 0x2c, 0x33, 0x1b, 0xa0, 0x7c, 0xb5,
	0x15, 0x04, 0x14, 0x45, 0xa8, 0x0f, 0x5e, 0x33, 0x1e, 0x7a, 0xe2, 0x82, 0x53, 0x80, 0xcf, 0xa6,
	0x9c, 0x94, 0xd1, 0xba, 0xb8, 0x80, 0x93, 0xe6, 0x3d, 0x00, 0xba, 0xd3, 0x9a, 0x52, 0x0f, 0x02,
	0xa5, 0xd8, 0x07, 0xd1, 0xca, 0x21, 0xf2, 0x34, 0xcd, 0x7d, 0x9f, 0xa5, 0xe9, 0x30, 0x8f, 0xa4,
	0x2d, 0xc8, 0x8f, 0xd1, 0x26, 0xa5, 0x28, 0x19, 0xd5, 0x56, 0x00, 0xf6, 0xac, 0x4c, 0xa8, 0xba,
	0x07, 0xec, 0x8e, 0x44, 0x02, 0xd5, 0xed, 0x0b, 0xcc, 0x40, 0x34, 0xe1, 0x98, 0xc4, 0xd9, 0xdd,
	0xf8, 0xee, 0x78, 0x4b, 0x46, 0x0f, 0x00, 0x30, 0xd4, 0x8d, 0xcf, 0x8b, 0xb5, 0x35, 0xc0, 0xe2,
	0x05, 0x3e, 0x55, 0x84, 0x5a, 0x0a, 0xd1, 0x2b, 0xc1, 0x35, 0x36, 0x9a, 0xf3, 0xa9, 0x32, 0x77,
	0x00, 0xe1, 0x1d, 0x11, 0x0d, 0x94, 0xd3, 0x41, 0x90, 0x65, 0xa0, 0xcb, 0x4b, 0x76, 0x82, 0xdf,
	0xb4, 0xcd, 0xc6, 0xaf, 0x65, 0x72, 0x41, 0x48, 0x58, 0xd2, 0xbd, 0xff, 0x46, 0xca, 0x1f, 0x92,
	0x0b, 0xba, 0x34, 0xdd, 0x05, 0xb9, 0xb7, 0xd4, 0x99, 0xca, 0x7d, 0x0d, 0x10, 0x37, 0x55, 0x8e,
	0x54, 0x3d, 0x4b, 0x25, 0xc3, 0x84, 0xb6, 0x10, 0x70, 0x0d, 0xb1, 0x82, 0x71, 0x97, 0x85, 0xfc,
	0x38, 0xe0, 0x4a, 0x1b, 0x2f, 0x83, 0xda, 0x87, 0xcc, 0x0b, 0x18, 0x07, 0x90, 0x97, 0xc2, 0x27,
	0x8d, 0xf1, 0x09, 0x31, 0xd4, 0x8e, 0x9b, 0xf3, 0x48, 0x63, 0x9d, 0x41, 0x77, 0x2e, 0x29, 0x77,
	0xf0, 0x78, 0xdf, 0xea, 0x29, 0xc8, 0xb7, 0x01, 0xf2, 0x5a, 0x81, 0x34, 0x70, 0x36, 0x8f, 0xdb,
	0x23, 0xd5, 0xf4, 0x65, 0x28, 0x99, 0xa8, 0x51, 0xcf, 0x22, 0xea, 0xa6, 0x64, 0x86, 0x3e, 0x54,
	0xa0, 0x57, 0x00, 0xb4, 0xd6, 0x4e, 0xe2, 0x8c, 0xc5, 0x19, 0x9d, 0x6a, 0x6a, 0x34, 0x45, 0xe5,
	0xd5, 0xbf, 0x9b, 0xca, 0x23, 0xb2, 0x31, 0xc3, 0x2e, 0xc5, 0x64, 0xab, 0xc8, 0xe4, 0x6a, 0x73,
	0x8e, 0x80, 0xe6, 0x7b, 0xa0, 0x7f, 0x7d, 0x31, 0x91, 0xb5, 0xed, 0x79, 0x1e, 0xff, 0xac, 0x7a,
	0x97, 0x7e, 0x0c, 0xfe, 0x15, 0x44, 0x7e, 0x54, 0x24, 0xf2, 0x66, 0x53, 0x7b, 0xf7, 0x67, 0x09,
	0x5d, 0x24, 0x62, 0xe5, 0x2f, 0x11, 0xd1, 0x21, 0xe7, 0xe1, 0x2d, 0x71, 0x0b, 0x84, 0x16, 0x5e,
	0xd5, 0x66, 0x49, 0x08, 0x0f, 0xd4, 0x09, 0x22, 0x7a, 0x26, 0x9e, 0x2c, 0x6c, 0x8b, 0x8b, 0x51,
	0x15, 0x71, 0xce, 0xfc, 0x43, 0x3d, 0x50, 0x07, 0xec, 0x4d, 0x3d, 0x70, 0x36, 0xe5, 0x6f, 0xea,
	0x81, 0xfa, 0x0d, 0x3d, 0xc5, 0x9d, 0x57, 0x15, 0x72, 0x4e, 0x48, 0x48, 0x23, 0x36, 0xcb, 0x8c,
	0x6d, 0x52, 0xce, 0xf3, 0x30, 0x50, 0xc4, 0xb9, 0x06, 0x98, 0xff, 0xdf, 0xdf, 0xef, 0x3e, 0x28,
	0x5c, 0x46, 0x4a, 0x53, 0x25, 0x8e, 0x3c, 0x5b, 0x3e, 0x11, 0x9f, 0xe5, 0xd9, 0xbc, 0x78, 0x40,
	0x36, 0xc5, 0xb4, 0xe1, 0xea, 0xa6, 0xac, 0xc6, 0x33, 0x35, 0x77, 0x14, 0xdf, 0x27, 0xa9, 0x86,
	0x15, 0xb1, 0xbd, 0xa8, 0x93, 0xe3, 0xcc, 0x20, 0x8c, 0xbc, 0x08, 0x79, 0x96, 0xc3, 0xa4, 0x90,
	0x32, 0xfe, 0x22, 0xf4, 0x59, 0x13, 0xc6, 0xa6, 0x8b, 0x68, 0x45, 0x05, 0x5d, 0x1b, 0x91, 0x54,
	0x34, 0x9a, 0xa7, 0xca, 0xd2, 0xbc, 0x0b, 0x36, 0x6e, 0x2f, 0x28, 0xb2, 0xd7, 0x9b, 0xd0, 0x17,
	0xd1, 0x91, 0xd5, 0x36, 0x8a, 0xcd, 0x76, 0x36, 0x83, 0x33, 0x17, 0x99, 0x4b, 0xc7, 0xeb, 0xad,
	0x5c, 0x27, 0xc4, 0xe7, 0x0c, 0xe6, 0x95, 0xc0, 0x3d, 0x38, 0x42, 0xd2, 0xae, 0x9a, 0x55, 0x80,
	0x59, 0x6f, 0x8b, 0x5d, 0xd0, 0x12, 0xb1, 0x37, 0x9e, 0x13, 0xc3, 0x8f, 0x92, 0x3c, 0x80, 0x21,
	0x31, 0x1e, 0x86, 0x23, 0xd7, 0x7f, 0x9e, 0xe6, 0x63, 0xe4, 0xe5, 0xaa, 0xd9, 0x07, 0xe9, 0x8f,
	0xdb, 0x87, 0x0c, 0xf7, 0x44, 0x56, 0x50, 0x92, 0x4a, 0xc9, 0x9c, 0x4b, 0x7e, 0x0b, 0xfb, 0x83,
	0x24, 0x89, 0x9a, 0xb4, 0x0b, 0x4d, 0x92, 0xc7, 0x5e, 0x14, 0x1d, 0x81, 0x13, 0x19, 0x3d, 0x38,
	0x3a, 0x91, 0x8f, 0xe1, 0x75, 0x48, 0xb8, 0xf1, 0x16, 0x31, 0xc2, 0xd4, 0x0d, 0x95, 0x9c, 0xbe,
	0xf6, 0x33, 0x51, 0x04, 0xbb, 0x95, 0xa1, 0x17, 0xc1, 0xa0, 0x76, 0x91, 0xac, 0x05, 0x2c, 0x85,
	0x6a, 0xc6, 0xf1, 0xba, 0xe6, 0x0b, 0x47, 0x8c, 0x6b, 0x64, 0x0d, 0xfa, 0xaf, 0x17, 0x67, 0x2e,
	0xd2, 0x2b, 0x40, 0xbe, 0x10, 0x60, 0xff, 0x8a, 0x83, 0xdb, 0xbb, 0x77, 0x7f, 0x3c, 0xde, 0x32,
	0x0a, 0x5c, 0x44, 0xb7, 0x5f, 0x1d, 0x6f, 0x5d, 0x2e, 0xec, 0x3a, 0xdc, 0x8b, 0x53, 0x31, 0x9f,
	0x34, 0x7e, 0x5a, 0x22, 0xeb, 0xd3, 0xa3, 0x90, 0xa5, 0xf0, 0xf8, 0xa9, 0x86, 0xb6, 0x84, 0x0d,
	0x0d, 0xe7, 0xd7, 0x42, 0x43, 0x9b, 0x0b, 0xb0, 0xa4, 0xa7, 0x4a, 0x82, 0x9f, 0x44, 0x11, 0x93,
	0x95, 0xcd, 0x54, 0x72, 0xe5, 0x09, 0x90, 0x55, 0x39, 0x2d, 0x49, 0xfe, 0xe8, 0xeb, 0xe3, 0xad,
	0x62, 0xd1, 0x88, 0xda, 0x9f, 0x2d, 0x92, 0x3f, 0x66, 0x66, 0x77, 0x75, 0x5a, 0xfb, 0xb7, 0xbe,
	0x2f, 0x91, 0xcb, 0x8b, 0xff, 0x17, 0x8c, 0x16, 0xc1, 0x07, 0xd1, 0xb5, 0x3b, 0xed, 0x7d, 0xab,
	0xeb, 0x3c, 0x75, 0x5b, 0x6d, 0xa7, 0xdb, 0xdf, 0x73, 0xdb, 0xbd, 0xbe, 0xdd, 0x71, 0xdb, 0xfd,
	0xbd, 0xbd, 0xea, 0x52, 0xfd, 0xca, 0x37, 0xdf, 0x36, 0x6a, 0xed, 0x28, 0x49, 0x65, 0x0b, 0x76,
	0xda, 0x03, 0x9d, 0x32, 0xd9, 0xff, 0x1a, 0x0b, 0x21, 0xec, 0xce, 0xde, 0x03, 0xd7, 0xea, 0xd8,
	0x83, 0xfe, 0x9e, 0xdd, 0xa9, 0x2e, 0xd7, 0x6f, 0x03, 0xca, 0x4d, 0x9b, 0xc5, 0x81, 0x1a, 0xbd,
	0x8b, 0x64, 0xd5, 0x2c, 0x55, 0x25, 0x62, 0xec, 0x92, 0xfa, 0x42, 0xd4, 0x56, 0xaf, 0xd7, 0xff,
	0xb4, 0x5a, 0xaa, 0xd7, 0x01, 0xed, 0x72, 0x2b, 0x82, 0xf1, 0xfa, 0x54, 0x1b, 0x34, 0x9e, 0x92,
	0x1b, 0x0b, 0x75, 0xad, 0xce, 0x83, 0xae, 0xd5, 0x69, 0x3b, 0xae, 0xd3, 0x77, 0x31, 0x1e, 0xd5,
	0x72, 0x7d, 0x1b, 0x70, 0xde, 0xb5, 0xde, 0xf0, 0xbf, 0x51, 0xf8, 0x39, 0x31, 0xf6, 0x5f, 0x13,
	0x2f, 0xab, 0xe5, 0x74, 0xdc, 0x5e, 0xf7, 0x49, 0xd7, 0xa9, 0x56, 0xea, 0x77, 0x01, 0xf3, 0x36,
	0xfe, 0x29, 0x14, 0x7f, 0x04, 0x04, 0x9a, 0x9f, 0xe4, 0x30, 0x27, 0xc0, 0x10, 0x4c, 0xb3, 0x70,
	0x8c, 0xd3, 0x70, 0x98, 0x04, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x12, 0xb1, 0x86, 0x55,
	0x0e, 0x00, 0x00,
}
