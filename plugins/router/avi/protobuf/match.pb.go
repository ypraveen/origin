// Code generated by protoc-gen-go.
// source: match.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Represents a group of Ip addresses each of which could be a range, prefix
// or a set of individual Ip addresses.
// Eg: 10.1.1.1-10.1.1.10, 10.1.1.13, 10.1.1.14, 11.1.1.0/24
type IpAddrGroup struct {
	Uuid                *string         `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Name                *string         `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Addrs               []*IpAddr       `protobuf:"bytes,3,rep,name=addrs" json:"addrs,omitempty"`
	Ranges              []*IpAddrRange  `protobuf:"bytes,4,rep,name=ranges" json:"ranges,omitempty"`
	Prefixes            []*IpAddrPrefix `protobuf:"bytes,5,rep,name=prefixes" json:"prefixes,omitempty"`
	CountryCodes        []string        `protobuf:"bytes,6,rep,name=country_codes" json:"country_codes,omitempty"`
	ApicEpgName         *string         `protobuf:"bytes,7,opt,name=apic_epg_name" json:"apic_epg_name,omitempty"`
	IpPorts             []*IpAddrPort   `protobuf:"bytes,8,rep,name=ip_ports" json:"ip_ports,omitempty"`
	MarathonAppName     *string         `protobuf:"bytes,9,opt,name=marathon_app_name" json:"marathon_app_name,omitempty"`
	MarathonServicePort *uint32         `protobuf:"varint,10,opt,name=marathon_service_port" json:"marathon_service_port,omitempty"`
	Description         *string         `protobuf:"bytes,99,opt,name=description" json:"description,omitempty"`
	TenantUuid          *string         `protobuf:"bytes,100,req,name=tenant_uuid" json:"tenant_uuid,omitempty"`
	XXX_unrecognized    []byte          `json:"-"`
}

func (m *IpAddrGroup) Reset()                    { *m = IpAddrGroup{} }
func (m *IpAddrGroup) String() string            { return proto.CompactTextString(m) }
func (*IpAddrGroup) ProtoMessage()               {}
func (*IpAddrGroup) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{0} }

func (m *IpAddrGroup) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *IpAddrGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *IpAddrGroup) GetAddrs() []*IpAddr {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *IpAddrGroup) GetRanges() []*IpAddrRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *IpAddrGroup) GetPrefixes() []*IpAddrPrefix {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

func (m *IpAddrGroup) GetCountryCodes() []string {
	if m != nil {
		return m.CountryCodes
	}
	return nil
}

func (m *IpAddrGroup) GetApicEpgName() string {
	if m != nil && m.ApicEpgName != nil {
		return *m.ApicEpgName
	}
	return ""
}

func (m *IpAddrGroup) GetIpPorts() []*IpAddrPort {
	if m != nil {
		return m.IpPorts
	}
	return nil
}

func (m *IpAddrGroup) GetMarathonAppName() string {
	if m != nil && m.MarathonAppName != nil {
		return *m.MarathonAppName
	}
	return ""
}

func (m *IpAddrGroup) GetMarathonServicePort() uint32 {
	if m != nil && m.MarathonServicePort != nil {
		return *m.MarathonServicePort
	}
	return 0
}

func (m *IpAddrGroup) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *IpAddrGroup) GetTenantUuid() string {
	if m != nil && m.TenantUuid != nil {
		return *m.TenantUuid
	}
	return ""
}

type KeyValue struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{1} }

func (m *KeyValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// This datastructure can represent a URI, Path or Query string. Only in
// conjunction with the PathMatch, QueryMatch will this be
// processed.
type StringGroup struct {
	Uuid             *string             `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Name             *string             `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Uris             []*RepeatableString `protobuf:"bytes,3,rep,name=uris" json:"uris,omitempty"`
	Kv               []*KeyValue         `protobuf:"bytes,4,rep,name=kv" json:"kv,omitempty"`
	Description      *string             `protobuf:"bytes,99,opt,name=description" json:"description,omitempty"`
	TenantUuid       *string             `protobuf:"bytes,100,req,name=tenant_uuid" json:"tenant_uuid,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *StringGroup) Reset()                    { *m = StringGroup{} }
func (m *StringGroup) String() string            { return proto.CompactTextString(m) }
func (*StringGroup) ProtoMessage()               {}
func (*StringGroup) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{2} }

func (m *StringGroup) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *StringGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *StringGroup) GetUris() []*RepeatableString {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *StringGroup) GetKv() []*KeyValue {
	if m != nil {
		return m.Kv
	}
	return nil
}

func (m *StringGroup) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *StringGroup) GetTenantUuid() string {
	if m != nil && m.TenantUuid != nil {
		return *m.TenantUuid
	}
	return ""
}

// Modeled as "is in" and "is not in" a user-specified group or an implicit
// group that is specified by a list of ip addresses.
type IpAddrMatch struct {
	MatchCriteria *MatchOperation `protobuf:"varint,1,req,name=match_criteria,enum=MatchOperation" json:"match_criteria,omitempty"`
	// Implicit Group
	Addrs    []*IpAddr       `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	Ranges   []*IpAddrRange  `protobuf:"bytes,3,rep,name=ranges" json:"ranges,omitempty"`
	Prefixes []*IpAddrPrefix `protobuf:"bytes,4,rep,name=prefixes" json:"prefixes,omitempty"`
	// User-created named group
	GroupUuids       []string `protobuf:"bytes,5,rep,name=group_uuids" json:"group_uuids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *IpAddrMatch) Reset()                    { *m = IpAddrMatch{} }
func (m *IpAddrMatch) String() string            { return proto.CompactTextString(m) }
func (*IpAddrMatch) ProtoMessage()               {}
func (*IpAddrMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{3} }

func (m *IpAddrMatch) GetMatchCriteria() MatchOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return MatchOperation_IS_IN
}

func (m *IpAddrMatch) GetAddrs() []*IpAddr {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *IpAddrMatch) GetRanges() []*IpAddrRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *IpAddrMatch) GetPrefixes() []*IpAddrPrefix {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

func (m *IpAddrMatch) GetGroupUuids() []string {
	if m != nil {
		return m.GroupUuids
	}
	return nil
}

type PortMatch struct {
	MatchCriteria *MatchOperation `protobuf:"varint,1,req,name=match_criteria,enum=MatchOperation" json:"match_criteria,omitempty"`
	// Implicit Group
	Ports            []*Port `protobuf:"bytes,2,rep,name=ports" json:"ports,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PortMatch) Reset()                    { *m = PortMatch{} }
func (m *PortMatch) String() string            { return proto.CompactTextString(m) }
func (*PortMatch) ProtoMessage()               {}
func (*PortMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{4} }

func (m *PortMatch) GetMatchCriteria() MatchOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return MatchOperation_IS_IN
}

func (m *PortMatch) GetPorts() []*Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

type ProtocolMatch struct {
	MatchCriteria    *MatchOperation `protobuf:"varint,1,req,name=match_criteria,enum=MatchOperation" json:"match_criteria,omitempty"`
	Protocols        *HTTPProtocol   `protobuf:"varint,2,req,name=protocols,enum=HTTPProtocol" json:"protocols,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ProtocolMatch) Reset()                    { *m = ProtocolMatch{} }
func (m *ProtocolMatch) String() string            { return proto.CompactTextString(m) }
func (*ProtocolMatch) ProtoMessage()               {}
func (*ProtocolMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{5} }

func (m *ProtocolMatch) GetMatchCriteria() MatchOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return MatchOperation_IS_IN
}

func (m *ProtocolMatch) GetProtocols() HTTPProtocol {
	if m != nil && m.Protocols != nil {
		return *m.Protocols
	}
	return HTTPProtocol_HTTP
}

// Need a message to encapsulate enums if this needs to be repeated in the
// model.
type RepeatableHTTPMethod struct {
	Method           *HTTPMethod `protobuf:"varint,1,req,name=method,enum=HTTPMethod" json:"method,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *RepeatableHTTPMethod) Reset()                    { *m = RepeatableHTTPMethod{} }
func (m *RepeatableHTTPMethod) String() string            { return proto.CompactTextString(m) }
func (*RepeatableHTTPMethod) ProtoMessage()               {}
func (*RepeatableHTTPMethod) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{6} }

func (m *RepeatableHTTPMethod) GetMethod() HTTPMethod {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return HTTPMethod_HTTP_METHOD_GET
}

type RepeatableHTTPVersion struct {
	Version          *HTTPVersion `protobuf:"varint,1,req,name=version,enum=HTTPVersion" json:"version,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *RepeatableHTTPVersion) Reset()                    { *m = RepeatableHTTPVersion{} }
func (m *RepeatableHTTPVersion) String() string            { return proto.CompactTextString(m) }
func (*RepeatableHTTPVersion) ProtoMessage()               {}
func (*RepeatableHTTPVersion) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{7} }

func (m *RepeatableHTTPVersion) GetVersion() HTTPVersion {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return HTTPVersion_ZERO_NINE
}

type MethodMatch struct {
	MatchCriteria    *MatchOperation         `protobuf:"varint,1,req,name=match_criteria,enum=MatchOperation" json:"match_criteria,omitempty"`
	Methods          []*RepeatableHTTPMethod `protobuf:"bytes,2,rep,name=methods" json:"methods,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *MethodMatch) Reset()                    { *m = MethodMatch{} }
func (m *MethodMatch) String() string            { return proto.CompactTextString(m) }
func (*MethodMatch) ProtoMessage()               {}
func (*MethodMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{8} }

func (m *MethodMatch) GetMatchCriteria() MatchOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return MatchOperation_IS_IN
}

func (m *MethodMatch) GetMethods() []*RepeatableHTTPMethod {
	if m != nil {
		return m.Methods
	}
	return nil
}

type HTTPVersionMatch struct {
	MatchCriteria    *MatchOperation          `protobuf:"varint,1,req,name=match_criteria,enum=MatchOperation" json:"match_criteria,omitempty"`
	Versions         []*RepeatableHTTPVersion `protobuf:"bytes,2,rep,name=versions" json:"versions,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *HTTPVersionMatch) Reset()                    { *m = HTTPVersionMatch{} }
func (m *HTTPVersionMatch) String() string            { return proto.CompactTextString(m) }
func (*HTTPVersionMatch) ProtoMessage()               {}
func (*HTTPVersionMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{9} }

func (m *HTTPVersionMatch) GetMatchCriteria() MatchOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return MatchOperation_IS_IN
}

func (m *HTTPVersionMatch) GetVersions() []*RepeatableHTTPVersion {
	if m != nil {
		return m.Versions
	}
	return nil
}

type StringMatch struct {
	MatchCriteria *StringOperation `protobuf:"varint,1,req,name=match_criteria,enum=StringOperation" json:"match_criteria,omitempty"`
	// Implicit String Group
	MatchStr []*RepeatableString `protobuf:"bytes,2,rep,name=match_str" json:"match_str,omitempty"`
	// User-created named String groups.
	StringGroupUuids []string `protobuf:"bytes,3,rep,name=string_group_uuids" json:"string_group_uuids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *StringMatch) Reset()                    { *m = StringMatch{} }
func (m *StringMatch) String() string            { return proto.CompactTextString(m) }
func (*StringMatch) ProtoMessage()               {}
func (*StringMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{10} }

func (m *StringMatch) GetMatchCriteria() StringOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return StringOperation_BEGINS_WITH
}

func (m *StringMatch) GetMatchStr() []*RepeatableString {
	if m != nil {
		return m.MatchStr
	}
	return nil
}

func (m *StringMatch) GetStringGroupUuids() []string {
	if m != nil {
		return m.StringGroupUuids
	}
	return nil
}

type PathMatch struct {
	MatchCriteria *StringOperation `protobuf:"varint,1,req,name=match_criteria,enum=StringOperation" json:"match_criteria,omitempty"`
	// Match case
	MatchCase *MatchCase `protobuf:"varint,2,opt,name=match_case,enum=MatchCase,def=1" json:"match_case,omitempty"`
	// Implicit Path Group
	MatchStr []*RepeatableString `protobuf:"bytes,3,rep,name=match_str" json:"match_str,omitempty"`
	// User-created named Path Group
	StringGroupUuids []string `protobuf:"bytes,4,rep,name=string_group_uuids" json:"string_group_uuids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PathMatch) Reset()                    { *m = PathMatch{} }
func (m *PathMatch) String() string            { return proto.CompactTextString(m) }
func (*PathMatch) ProtoMessage()               {}
func (*PathMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{11} }

const Default_PathMatch_MatchCase MatchCase = MatchCase_INSENSITIVE

func (m *PathMatch) GetMatchCriteria() StringOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return StringOperation_BEGINS_WITH
}

func (m *PathMatch) GetMatchCase() MatchCase {
	if m != nil && m.MatchCase != nil {
		return *m.MatchCase
	}
	return Default_PathMatch_MatchCase
}

func (m *PathMatch) GetMatchStr() []*RepeatableString {
	if m != nil {
		return m.MatchStr
	}
	return nil
}

func (m *PathMatch) GetStringGroupUuids() []string {
	if m != nil {
		return m.StringGroupUuids
	}
	return nil
}

type QueryMatch struct {
	MatchCriteria *QueryMatchOperation `protobuf:"varint,1,req,name=match_criteria,enum=QueryMatchOperation" json:"match_criteria,omitempty"`
	// Match case
	MatchCase *MatchCase `protobuf:"varint,2,opt,name=match_case,enum=MatchCase,def=1" json:"match_case,omitempty"`
	// Implicit Query Group
	MatchStr []*RepeatableString `protobuf:"bytes,3,rep,name=match_str" json:"match_str,omitempty"`
	// User-created named Query Group
	StringGroupUuids []string `protobuf:"bytes,4,rep,name=string_group_uuids" json:"string_group_uuids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *QueryMatch) Reset()                    { *m = QueryMatch{} }
func (m *QueryMatch) String() string            { return proto.CompactTextString(m) }
func (*QueryMatch) ProtoMessage()               {}
func (*QueryMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{12} }

const Default_QueryMatch_MatchCase MatchCase = MatchCase_INSENSITIVE

func (m *QueryMatch) GetMatchCriteria() QueryMatchOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return QueryMatchOperation_QUERY_MATCH_CONTAINS
}

func (m *QueryMatch) GetMatchCase() MatchCase {
	if m != nil && m.MatchCase != nil {
		return *m.MatchCase
	}
	return Default_QueryMatch_MatchCase
}

func (m *QueryMatch) GetMatchStr() []*RepeatableString {
	if m != nil {
		return m.MatchStr
	}
	return nil
}

func (m *QueryMatch) GetStringGroupUuids() []string {
	if m != nil {
		return m.StringGroupUuids
	}
	return nil
}

type HdrMatch struct {
	MatchCriteria *HdrMatchOperation `protobuf:"varint,1,req,name=match_criteria,enum=HdrMatchOperation" json:"match_criteria,omitempty"`
	// Do we need this as an enum of known headers + a custom ENUM with
	// a follow-on string header name.
	Hdr *string `protobuf:"bytes,2,req,name=hdr" json:"hdr,omitempty"`
	// Match case for header value matching
	MatchCase        *MatchCase          `protobuf:"varint,3,opt,name=match_case,enum=MatchCase,def=1" json:"match_case,omitempty"`
	Value            []*RepeatableString `protobuf:"bytes,4,rep,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *HdrMatch) Reset()                    { *m = HdrMatch{} }
func (m *HdrMatch) String() string            { return proto.CompactTextString(m) }
func (*HdrMatch) ProtoMessage()               {}
func (*HdrMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{13} }

const Default_HdrMatch_MatchCase MatchCase = MatchCase_INSENSITIVE

func (m *HdrMatch) GetMatchCriteria() HdrMatchOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return HdrMatchOperation_HDR_EXISTS
}

func (m *HdrMatch) GetHdr() string {
	if m != nil && m.Hdr != nil {
		return *m.Hdr
	}
	return ""
}

func (m *HdrMatch) GetMatchCase() MatchCase {
	if m != nil && m.MatchCase != nil {
		return *m.MatchCase
	}
	return Default_HdrMatch_MatchCase
}

func (m *HdrMatch) GetValue() []*RepeatableString {
	if m != nil {
		return m.Value
	}
	return nil
}

type CookieMatch struct {
	MatchCriteria *HdrMatchOperation `protobuf:"varint,1,req,name=match_criteria,enum=HdrMatchOperation" json:"match_criteria,omitempty"`
	Name          *string            `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// Match case for cookie value matching
	MatchCase        *MatchCase `protobuf:"varint,3,opt,name=match_case,enum=MatchCase,def=1" json:"match_case,omitempty"`
	Value            *string    `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *CookieMatch) Reset()                    { *m = CookieMatch{} }
func (m *CookieMatch) String() string            { return proto.CompactTextString(m) }
func (*CookieMatch) ProtoMessage()               {}
func (*CookieMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{14} }

const Default_CookieMatch_MatchCase MatchCase = MatchCase_INSENSITIVE

func (m *CookieMatch) GetMatchCriteria() HdrMatchOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return HdrMatchOperation_HDR_EXISTS
}

func (m *CookieMatch) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CookieMatch) GetMatchCase() MatchCase {
	if m != nil && m.MatchCase != nil {
		return *m.MatchCase
	}
	return Default_CookieMatch_MatchCase
}

func (m *CookieMatch) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type HostHdrMatch struct {
	MatchCriteria *HdrMatchOperation `protobuf:"varint,1,req,name=match_criteria,enum=HdrMatchOperation" json:"match_criteria,omitempty"`
	// Match case
	MatchCase        *MatchCase          `protobuf:"varint,2,opt,name=match_case,enum=MatchCase,def=1" json:"match_case,omitempty"`
	Value            []*RepeatableString `protobuf:"bytes,3,rep,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *HostHdrMatch) Reset()                    { *m = HostHdrMatch{} }
func (m *HostHdrMatch) String() string            { return proto.CompactTextString(m) }
func (*HostHdrMatch) ProtoMessage()               {}
func (*HostHdrMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{15} }

const Default_HostHdrMatch_MatchCase MatchCase = MatchCase_INSENSITIVE

func (m *HostHdrMatch) GetMatchCriteria() HdrMatchOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return HdrMatchOperation_HDR_EXISTS
}

func (m *HostHdrMatch) GetMatchCase() MatchCase {
	if m != nil && m.MatchCase != nil {
		return *m.MatchCase
	}
	return Default_HostHdrMatch_MatchCase
}

func (m *HostHdrMatch) GetValue() []*RepeatableString {
	if m != nil {
		return m.Value
	}
	return nil
}

type LocationHdrMatch struct {
	MatchCriteria *HdrMatchOperation `protobuf:"varint,1,req,name=match_criteria,enum=HdrMatchOperation" json:"match_criteria,omitempty"`
	// Match case
	MatchCase        *MatchCase          `protobuf:"varint,2,opt,name=match_case,enum=MatchCase,def=1" json:"match_case,omitempty"`
	Value            []*RepeatableString `protobuf:"bytes,3,rep,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *LocationHdrMatch) Reset()                    { *m = LocationHdrMatch{} }
func (m *LocationHdrMatch) String() string            { return proto.CompactTextString(m) }
func (*LocationHdrMatch) ProtoMessage()               {}
func (*LocationHdrMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{16} }

const Default_LocationHdrMatch_MatchCase MatchCase = MatchCase_INSENSITIVE

func (m *LocationHdrMatch) GetMatchCriteria() HdrMatchOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return HdrMatchOperation_HDR_EXISTS
}

func (m *LocationHdrMatch) GetMatchCase() MatchCase {
	if m != nil && m.MatchCase != nil {
		return *m.MatchCase
	}
	return Default_LocationHdrMatch_MatchCase
}

func (m *LocationHdrMatch) GetValue() []*RepeatableString {
	if m != nil {
		return m.Value
	}
	return nil
}

type HTTPStatusRange struct {
	Begin            *int32 `protobuf:"varint,1,req,name=begin" json:"begin,omitempty"`
	End              *int32 `protobuf:"varint,2,req,name=end" json:"end,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *HTTPStatusRange) Reset()                    { *m = HTTPStatusRange{} }
func (m *HTTPStatusRange) String() string            { return proto.CompactTextString(m) }
func (*HTTPStatusRange) ProtoMessage()               {}
func (*HTTPStatusRange) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{17} }

func (m *HTTPStatusRange) GetBegin() int32 {
	if m != nil && m.Begin != nil {
		return *m.Begin
	}
	return 0
}

func (m *HTTPStatusRange) GetEnd() int32 {
	if m != nil && m.End != nil {
		return *m.End
	}
	return 0
}

// We need to declare this as a separate message to aid the model
// generation.
type HTTPStatusCode struct {
	Status           *int32 `protobuf:"varint,1,req,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *HTTPStatusCode) Reset()                    { *m = HTTPStatusCode{} }
func (m *HTTPStatusCode) String() string            { return proto.CompactTextString(m) }
func (*HTTPStatusCode) ProtoMessage()               {}
func (*HTTPStatusCode) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{18} }

func (m *HTTPStatusCode) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

type HTTPStatusMatch struct {
	MatchCriteria    *MatchOperation    `protobuf:"varint,1,req,name=match_criteria,enum=MatchOperation" json:"match_criteria,omitempty"`
	StatusCodes      []*HTTPStatusCode  `protobuf:"bytes,2,rep,name=status_codes" json:"status_codes,omitempty"`
	Ranges           []*HTTPStatusRange `protobuf:"bytes,3,rep,name=ranges" json:"ranges,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *HTTPStatusMatch) Reset()                    { *m = HTTPStatusMatch{} }
func (m *HTTPStatusMatch) String() string            { return proto.CompactTextString(m) }
func (*HTTPStatusMatch) ProtoMessage()               {}
func (*HTTPStatusMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{19} }

func (m *HTTPStatusMatch) GetMatchCriteria() MatchOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return MatchOperation_IS_IN
}

func (m *HTTPStatusMatch) GetStatusCodes() []*HTTPStatusCode {
	if m != nil {
		return m.StatusCodes
	}
	return nil
}

func (m *HTTPStatusMatch) GetRanges() []*HTTPStatusRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

// *
// L2:MAC
// L3:IP
// L4:Port
// L4:Protocol
// L7:HTTP.URI
//
// Example of a Match
// MatchTarget match;
// IpAddrMatch *src_addr = match.mutable_src_addr();
// src_addr->set_match_criteria(ENDS_WITH);
// src_addr->set_ip_list_uuid("UUID:BlackList");
// src_addr->set_negate(false);
//
// HttpUrlMatch *http_url = match.mutable_http_url();
// http_url->set_match_criteria(BEGINS_WITH);
// http_url->set_match_pattern("images");
// http_url->set_not(false);
type MatchTarget struct {
	// Relevant to HTTP Request
	ClientIp         *IpAddrMatch      `protobuf:"bytes,1,opt,name=client_ip" json:"client_ip,omitempty"`
	VsPort           *PortMatch        `protobuf:"bytes,2,opt,name=vs_port" json:"vs_port,omitempty"`
	Protocol         *ProtocolMatch    `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	Method           *MethodMatch      `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
	Version          *HTTPVersionMatch `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
	Path             *PathMatch        `protobuf:"bytes,7,opt,name=path" json:"path,omitempty"`
	Query            *QueryMatch       `protobuf:"bytes,8,opt,name=query" json:"query,omitempty"`
	Hdrs             []*HdrMatch       `protobuf:"bytes,9,rep,name=hdrs" json:"hdrs,omitempty"`
	Cookie           *CookieMatch      `protobuf:"bytes,10,opt,name=cookie" json:"cookie,omitempty"`
	HostHdr          *HostHdrMatch     `protobuf:"bytes,11,opt,name=host_hdr" json:"host_hdr,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *MatchTarget) Reset()                    { *m = MatchTarget{} }
func (m *MatchTarget) String() string            { return proto.CompactTextString(m) }
func (*MatchTarget) ProtoMessage()               {}
func (*MatchTarget) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{20} }

func (m *MatchTarget) GetClientIp() *IpAddrMatch {
	if m != nil {
		return m.ClientIp
	}
	return nil
}

func (m *MatchTarget) GetVsPort() *PortMatch {
	if m != nil {
		return m.VsPort
	}
	return nil
}

func (m *MatchTarget) GetProtocol() *ProtocolMatch {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *MatchTarget) GetMethod() *MethodMatch {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *MatchTarget) GetVersion() *HTTPVersionMatch {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *MatchTarget) GetPath() *PathMatch {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *MatchTarget) GetQuery() *QueryMatch {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *MatchTarget) GetHdrs() []*HdrMatch {
	if m != nil {
		return m.Hdrs
	}
	return nil
}

func (m *MatchTarget) GetCookie() *CookieMatch {
	if m != nil {
		return m.Cookie
	}
	return nil
}

func (m *MatchTarget) GetHostHdr() *HostHdrMatch {
	if m != nil {
		return m.HostHdr
	}
	return nil
}

type ResponseMatchTarget struct {
	// Relevant to HTTP Request and Response
	ClientIp *IpAddrMatch      `protobuf:"bytes,1,opt,name=client_ip" json:"client_ip,omitempty"`
	VsPort   *PortMatch        `protobuf:"bytes,2,opt,name=vs_port" json:"vs_port,omitempty"`
	Protocol *ProtocolMatch    `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	Method   *MethodMatch      `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
	Version  *HTTPVersionMatch `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
	Path     *PathMatch        `protobuf:"bytes,7,opt,name=path" json:"path,omitempty"`
	Query    *QueryMatch       `protobuf:"bytes,8,opt,name=query" json:"query,omitempty"`
	Hdrs     []*HdrMatch       `protobuf:"bytes,9,rep,name=hdrs" json:"hdrs,omitempty"`
	Cookie   *CookieMatch      `protobuf:"bytes,10,opt,name=cookie" json:"cookie,omitempty"`
	HostHdr  *HostHdrMatch     `protobuf:"bytes,11,opt,name=host_hdr" json:"host_hdr,omitempty"`
	// Specific only to HTTP Response side.
	LocHdr           *LocationHdrMatch `protobuf:"bytes,12,opt,name=loc_hdr" json:"loc_hdr,omitempty"`
	Status           *HTTPStatusMatch  `protobuf:"bytes,13,opt,name=status" json:"status,omitempty"`
	RspHdrs          []*HdrMatch       `protobuf:"bytes,14,rep,name=rsp_hdrs" json:"rsp_hdrs,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ResponseMatchTarget) Reset()                    { *m = ResponseMatchTarget{} }
func (m *ResponseMatchTarget) String() string            { return proto.CompactTextString(m) }
func (*ResponseMatchTarget) ProtoMessage()               {}
func (*ResponseMatchTarget) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{21} }

func (m *ResponseMatchTarget) GetClientIp() *IpAddrMatch {
	if m != nil {
		return m.ClientIp
	}
	return nil
}

func (m *ResponseMatchTarget) GetVsPort() *PortMatch {
	if m != nil {
		return m.VsPort
	}
	return nil
}

func (m *ResponseMatchTarget) GetProtocol() *ProtocolMatch {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *ResponseMatchTarget) GetMethod() *MethodMatch {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *ResponseMatchTarget) GetVersion() *HTTPVersionMatch {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *ResponseMatchTarget) GetPath() *PathMatch {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *ResponseMatchTarget) GetQuery() *QueryMatch {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ResponseMatchTarget) GetHdrs() []*HdrMatch {
	if m != nil {
		return m.Hdrs
	}
	return nil
}

func (m *ResponseMatchTarget) GetCookie() *CookieMatch {
	if m != nil {
		return m.Cookie
	}
	return nil
}

func (m *ResponseMatchTarget) GetHostHdr() *HostHdrMatch {
	if m != nil {
		return m.HostHdr
	}
	return nil
}

func (m *ResponseMatchTarget) GetLocHdr() *LocationHdrMatch {
	if m != nil {
		return m.LocHdr
	}
	return nil
}

func (m *ResponseMatchTarget) GetStatus() *HTTPStatusMatch {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ResponseMatchTarget) GetRspHdrs() []*HdrMatch {
	if m != nil {
		return m.RspHdrs
	}
	return nil
}

type MicroServiceGroup struct {
	Uuid             *string  `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Name             *string  `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	ServiceUuids     []string `protobuf:"bytes,3,rep,name=service_uuids" json:"service_uuids,omitempty"`
	CreatedBy        *string  `protobuf:"bytes,4,opt,name=created_by" json:"created_by,omitempty"`
	Description      *string  `protobuf:"bytes,99,opt,name=description" json:"description,omitempty"`
	TenantUuid       *string  `protobuf:"bytes,100,req,name=tenant_uuid" json:"tenant_uuid,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MicroServiceGroup) Reset()                    { *m = MicroServiceGroup{} }
func (m *MicroServiceGroup) String() string            { return proto.CompactTextString(m) }
func (*MicroServiceGroup) ProtoMessage()               {}
func (*MicroServiceGroup) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{22} }

func (m *MicroServiceGroup) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *MicroServiceGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MicroServiceGroup) GetServiceUuids() []string {
	if m != nil {
		return m.ServiceUuids
	}
	return nil
}

func (m *MicroServiceGroup) GetCreatedBy() string {
	if m != nil && m.CreatedBy != nil {
		return *m.CreatedBy
	}
	return ""
}

func (m *MicroServiceGroup) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *MicroServiceGroup) GetTenantUuid() string {
	if m != nil && m.TenantUuid != nil {
		return *m.TenantUuid
	}
	return ""
}

// Modeled as "is in" and "is not in" a user-specified group or an implicit
// group that is specified by a list of micro services.
type MicroServiceMatch struct {
	MatchCriteria *MatchOperation `protobuf:"varint,1,req,name=match_criteria,enum=MatchOperation" json:"match_criteria,omitempty"`
	// User-created named group
	GroupUuid        *string `protobuf:"bytes,2,opt,name=group_uuid" json:"group_uuid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MicroServiceMatch) Reset()                    { *m = MicroServiceMatch{} }
func (m *MicroServiceMatch) String() string            { return proto.CompactTextString(m) }
func (*MicroServiceMatch) ProtoMessage()               {}
func (*MicroServiceMatch) Descriptor() ([]byte, []int) { return fileDescriptor64, []int{23} }

func (m *MicroServiceMatch) GetMatchCriteria() MatchOperation {
	if m != nil && m.MatchCriteria != nil {
		return *m.MatchCriteria
	}
	return MatchOperation_IS_IN
}

func (m *MicroServiceMatch) GetGroupUuid() string {
	if m != nil && m.GroupUuid != nil {
		return *m.GroupUuid
	}
	return ""
}

func init() {
	proto.RegisterType((*IpAddrGroup)(nil), "IpAddrGroup")
	proto.RegisterType((*KeyValue)(nil), "KeyValue")
	proto.RegisterType((*StringGroup)(nil), "StringGroup")
	proto.RegisterType((*IpAddrMatch)(nil), "IpAddrMatch")
	proto.RegisterType((*PortMatch)(nil), "PortMatch")
	proto.RegisterType((*ProtocolMatch)(nil), "ProtocolMatch")
	proto.RegisterType((*RepeatableHTTPMethod)(nil), "RepeatableHTTPMethod")
	proto.RegisterType((*RepeatableHTTPVersion)(nil), "RepeatableHTTPVersion")
	proto.RegisterType((*MethodMatch)(nil), "MethodMatch")
	proto.RegisterType((*HTTPVersionMatch)(nil), "HTTPVersionMatch")
	proto.RegisterType((*StringMatch)(nil), "StringMatch")
	proto.RegisterType((*PathMatch)(nil), "PathMatch")
	proto.RegisterType((*QueryMatch)(nil), "QueryMatch")
	proto.RegisterType((*HdrMatch)(nil), "HdrMatch")
	proto.RegisterType((*CookieMatch)(nil), "CookieMatch")
	proto.RegisterType((*HostHdrMatch)(nil), "HostHdrMatch")
	proto.RegisterType((*LocationHdrMatch)(nil), "LocationHdrMatch")
	proto.RegisterType((*HTTPStatusRange)(nil), "HTTPStatusRange")
	proto.RegisterType((*HTTPStatusCode)(nil), "HTTPStatusCode")
	proto.RegisterType((*HTTPStatusMatch)(nil), "HTTPStatusMatch")
	proto.RegisterType((*MatchTarget)(nil), "MatchTarget")
	proto.RegisterType((*ResponseMatchTarget)(nil), "ResponseMatchTarget")
	proto.RegisterType((*MicroServiceGroup)(nil), "MicroServiceGroup")
	proto.RegisterType((*MicroServiceMatch)(nil), "MicroServiceMatch")
}

var fileDescriptor64 = []byte{
	// 2256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x59, 0x4f, 0x6f, 0x1b, 0xc7,
	0x15, 0xc7, 0x92, 0xa2, 0x24, 0x0e, 0x45, 0x59, 0x5e, 0x4b, 0x36, 0x63, 0x87, 0xcd, 0x86, 0x71,
	0x1c, 0xd9, 0x75, 0xb7, 0x8e, 0x63, 0xc3, 0x89, 0x9c, 0xbf, 0xcb, 0x08, 0x12, 0x1b, 0xff, 0x61,
	0x2d, 0xda, 0x40, 0x4f, 0xf4, 0x6a, 0x39, 0x14, 0x17, 0x22, 0xb9, 0x9b, 0x9d, 0xa5, 0x1c, 0xa1,
	0xfd, 0x00, 0x45, 0xd1, 0x43, 0x7a, 0x28, 0x0a, 0xf4, 0x14, 0xf4, 0xa0, 0xf6, 0xda, 0x16, 0xbd,
	0xf4, 0x50, 0x14, 0x3d, 0x15, 0x28, 0xd0, 0x7b, 0x0e, 0xed, 0x17, 0xe8, 0x47, 0x28, 0x0a, 0xf4,
	0xcd, 0x9b, 0x59, 0xee, 0xec, 0x6a, 0x57, 0xa6, 0x0d, 0x1b, 0x05, 0x8a, 0x00, 0x41, 0x60, 0xcd,
	0xbe, 0xf7, 0x7b, 0xef, 0xfd, 0xe6, 0xcd, 0x9b, 0xf7, 0x86, 0xa4, 0x32, 0xb2, 0x43, 0x67, 0x60,
	0xfa, 0x81, 0x17, 0x7a, 0xe7, 0x97, 0x1c, 0x6f, 0x34, 0xf2, 0xc6, 0xf2, 0xaf, 0xaa, 0xe7, 0x87,
	0xae, 0x37, 0x66, 0xe2, 0xcf, 0xc6, 0x57, 0x0b, 0xa4, 0xd2, 0xf2, 0x3f, 0xe9, 0xf5, 0x82, 0xad,
	0xc0, 0x9b, 0xf8, 0xba, 0x49, 0xe6, 0x26, 0x13, 0xb7, 0x57, 0xd3, 0x8c, 0xc2, 0x7a, 0xd9, 0x32,
	0x7e, 0x75, 0x54, 0x7f, 0xf5, 0xe1, 0xc3, 0xd6, 0xa7, 0x86, 0xd7, 0x37, 0xc2, 0x01, 0x35, 0x5a,
	0x6d, 0xc3, 0x06, 0x59, 0xca, 0x98, 0xb1, 0x17, 0xc9, 0x8f, 0xed, 0x11, 0xad, 0x15, 0x62, 0xf9,
	0x7b, 0xf0, 0x77, 0xae, 0xfc, 0x0d, 0x52, 0xe2, 0x0b, 0xac, 0x56, 0x34, 0x8a, 0xeb, 0x95, 0xeb,
	0x0b, 0xa6, 0x30, 0x6e, 0xbd, 0x0a, 0x9a, 0xb5, 0xa6, 0x37, 0xee, 0xbb, 0x7b, 0x93, 0x40, 0xd5,
	0x5b, 0xa7, 0xec, 0xb2, 0xfe, 0x21, 0x99, 0x0f, 0xec, 0xf1, 0x1e, 0x65, 0xb5, 0x39, 0x54, 0x5b,
	0x92, 0x6a, 0x0f, 0xf8, 0xa2, 0xb0, 0x9a, 0xd2, 0x45, 0x93, 0xa8, 0xb3, 0x0e, 0xfa, 0x4d, 0xb2,
	0xe8, 0x07, 0xb4, 0xef, 0x7e, 0x01, 0x08, 0x25, 0x44, 0xa8, 0x4a, 0x84, 0x36, 0x2e, 0x5b, 0x0d,
	0x80, 0xf8, 0x56, 0x16, 0x84, 0x50, 0x43, 0x27, 0x1e, 0x93, 0xaa, 0xe3, 0x4d, 0xc6, 0x61, 0x70,
	0xd8, 0x75, 0xbc, 0x1e, 0x20, 0xcd, 0x03, 0x52, 0xd9, 0x6a, 0x81, 0xea, 0x66, 0xdb, 0xf3, 0x27,
	0x43, 0x3b, 0xa4, 0xe9, 0xa0, 0x85, 0xd7, 0x46, 0x3f, 0xf0, 0x46, 0xf8, 0x69, 0x8f, 0x7a, 0x46,
	0xcf, 0x0e, 0xed, 0x5d, 0x9b, 0x51, 0xa3, 0xef, 0x05, 0xb0, 0xe8, 0x32, 0x43, 0xc2, 0xea, 0x1d,
	0x52, 0xb5, 0x7d, 0xd7, 0xe9, 0x52, 0x7f, 0xaf, 0x8b, 0xac, 0x2e, 0x18, 0x1a, 0x58, 0xf8, 0x00,
	0x2c, 0xbc, 0x37, 0xb5, 0x10, 0xa3, 0x47, 0xc0, 0x23, 0x3a, 0xda, 0xa5, 0x01, 0x13, 0x9c, 0x03,
	0x5c, 0xd3, 0x65, 0x8e, 0x67, 0x7c, 0xd2, 0x6e, 0x35, 0x8d, 0xcd, 0xf6, 0x96, 0xbe, 0x4d, 0x16,
	0x5d, 0xbf, 0xeb, 0x7b, 0x41, 0xc8, 0x6a, 0x8b, 0x18, 0x7c, 0x25, 0x0a, 0x1e, 0xd6, 0xac, 0xcb,
	0x80, 0xfe, 0x66, 0x1c, 0xfa, 0x7a, 0x8c, 0x7f, 0xd5, 0xe0, 0x4a, 0x97, 0x8d, 0x70, 0xe2, 0x0f,
	0x91, 0xc6, 0x0e, 0x39, 0x3d, 0xb2, 0x03, 0x3b, 0x1c, 0x78, 0xe3, 0xae, 0xed, 0xfb, 0xc2, 0xc7,
	0x32, 0xfa, 0xf8, 0x1e, 0xa0, 0xdc, 0x3c, 0xc1, 0xc7, 0xd0, 0x66, 0xfb, 0xb1, 0x87, 0x77, 0x25,
	0x8a, 0x01, 0x28, 0xfa, 0x1f, 0x34, 0xb2, 0x36, 0x85, 0x65, 0x34, 0x38, 0x70, 0x1d, 0x8a, 0xee,
	0xd6, 0x08, 0x40, 0x57, 0xad, 0x9f, 0x6b, 0x80, 0xfd, 0xa5, 0xd6, 0x01, 0x04, 0x74, 0xc8, 0xb0,
	0x19, 0xf3, 0x1c, 0x17, 0xec, 0xf4, 0x8c, 0x27, 0x6e, 0x38, 0x30, 0x22, 0x65, 0x43, 0x2a, 0xa3,
	0x94, 0x69, 0xb4, 0xfa, 0x09, 0x3b, 0xc6, 0xc0, 0x66, 0xc6, 0x68, 0x32, 0x0c, 0x5d, 0x88, 0x26,
	0x21, 0x0a, 0x81, 0xa2, 0x57, 0xf0, 0x5f, 0x40, 0x3f, 0x9f, 0xb8, 0x01, 0xed, 0x99, 0xc6, 0xe6,
	0x90, 0xd1, 0xab, 0xb8, 0x67, 0x7d, 0x37, 0x60, 0x21, 0x06, 0x20, 0xcc, 0x83, 0xd8, 0x84, 0xd1,
	0x9e, 0x7e, 0x86, 0x54, 0x20, 0x0b, 0x9c, 0xc0, 0xc5, 0x03, 0x55, 0x73, 0x38, 0x0f, 0xfa, 0x6b,
	0xa4, 0x12, 0xd2, 0xb1, 0x3d, 0x0e, 0xbb, 0x78, 0x8c, 0x7a, 0x78, 0x2c, 0xc8, 0x2f, 0x8f, 0xea,
	0xf3, 0x1d, 0x5c, 0xde, 0xb8, 0xf6, 0xbb, 0xa3, 0xfa, 0x8a, 0x72, 0xe2, 0x9a, 0x03, 0xea, 0xec,
	0xff, 0xf1, 0xa8, 0xbe, 0xaa, 0xac, 0x75, 0x20, 0x6d, 0x18, 0x64, 0xc7, 0xe8, 0xcb, 0x5f, 0x34,
	0xb4, 0xc6, 0x06, 0x59, 0xfc, 0x8c, 0x1e, 0x3e, 0xb2, 0x87, 0x13, 0xaa, 0xaf, 0x92, 0xe2, 0x3e,
	0x3d, 0x94, 0xa7, 0x73, 0x01, 0x78, 0x29, 0xc2, 0x27, 0xbd, 0x46, 0x4a, 0x07, 0xfc, 0xb3, 0x3c,
	0x85, 0x65, 0x58, 0x2f, 0xa1, 0x7c, 0xe3, 0x4f, 0x05, 0x52, 0xd9, 0x09, 0x03, 0x77, 0xbc, 0x27,
	0x8e, 0xf7, 0x95, 0xc4, 0xf1, 0xc6, 0x43, 0xa7, 0x1e, 0x6f, 0x86, 0xa2, 0xf2, 0xa8, 0x5e, 0x49,
	0x1c, 0x6d, 0x94, 0x55, 0x8f, 0x76, 0x42, 0x76, 0x0b, 0x70, 0x03, 0x37, 0x3a, 0xd5, 0xa7, 0xcd,
	0x07, 0xd4, 0xa7, 0x3c, 0xcd, 0x87, 0x54, 0x58, 0xb7, 0x2e, 0x81, 0x7a, 0x23, 0xce, 0xb2, 0x87,
	0x0f, 0x5a, 0xc0, 0xf7, 0xf8, 0x38, 0x90, 0x45, 0x0a, 0xfb, 0x07, 0xf2, 0x94, 0x97, 0xcd, 0x28,
	0x6e, 0xeb, 0xdb, 0xa0, 0xfe, 0x56, 0xac, 0x0e, 0xeb, 0x1b, 0xf8, 0x21, 0x13, 0xe3, 0xf9, 0x36,
	0x66, 0x95, 0x6f, 0x8c, 0xc2, 0x15, 0x6e, 0x4c, 0xe3, 0xeb, 0x42, 0x54, 0x1f, 0xef, 0xf2, 0x92,
	0xaa, 0xf7, 0xc9, 0x32, 0xd6, 0xd6, 0x2e, 0xc0, 0x87, 0x34, 0x70, 0x6d, 0xa4, 0x72, 0xf9, 0xfa,
	0x29, 0x13, 0xbf, 0xdf, 0xf7, 0x29, 0x64, 0x1c, 0x58, 0x15, 0x87, 0xb6, 0x29, 0x84, 0x20, 0x01,
	0x43, 0x8f, 0x27, 0x0d, 0x1e, 0x79, 0xa5, 0x3c, 0x20, 0x14, 0x77, 0x9c, 0xc7, 0xb0, 0xdd, 0xe9,
	0xb4, 0x31, 0x01, 0x29, 0x0b, 0x81, 0x7c, 0x59, 0x27, 0x0b, 0xc9, 0x3a, 0xa9, 0x03, 0xec, 0x72,
	0xaa, 0x3a, 0xde, 0x9c, 0x56, 0xc7, 0x62, 0x46, 0x75, 0x3c, 0x07, 0x1a, 0x67, 0xd2, 0x25, 0x89,
	0x9f, 0xe6, 0x0d, 0xa5, 0x28, 0xce, 0x65, 0x15, 0xc5, 0x57, 0x40, 0x73, 0x4d, 0xd1, 0x54, 0x6a,
	0x61, 0x93, 0x54, 0x90, 0x6b, 0x24, 0x53, 0xd4, 0xd4, 0xb2, 0x65, 0xfe, 0xe4, 0xa8, 0xae, 0x5e,
	0x26, 0xa0, 0x7e, 0x21, 0xca, 0xae, 0xf4, 0x45, 0x00, 0x0e, 0x34, 0x7e, 0xab, 0x91, 0x32, 0x2f,
	0x41, 0x82, 0xd9, 0xc7, 0xb3, 0x32, 0x7b, 0x0b, 0x70, 0xdf, 0xc9, 0x64, 0x16, 0x8f, 0x67, 0x3e,
	0xa7, 0x16, 0x29, 0x89, 0x2a, 0x28, 0x38, 0x2d, 0x99, 0x58, 0xff, 0xae, 0x02, 0xdc, 0xc5, 0x4e,
	0xb3, 0x8d, 0xda, 0xe0, 0x96, 0x31, 0x74, 0x19, 0x64, 0x0a, 0x47, 0xe0, 0x98, 0x1c, 0xe1, 0xbb,
	0xfc, 0x7f, 0x3b, 0x7f, 0x3e, 0xaa, 0x6b, 0x8d, 0xdf, 0x6b, 0xa4, 0xda, 0xe6, 0x37, 0xa7, 0xe3,
	0x0d, 0x85, 0xdf, 0xbd, 0x59, 0xfd, 0xbe, 0x0d, 0x86, 0x6e, 0x65, 0xfb, 0x2d, 0x01, 0x4f, 0xf0,
	0xfd, 0x7d, 0x52, 0x8e, 0xa4, 0x18, 0x9e, 0xc8, 0x65, 0xd8, 0x2d, 0x2e, 0x11, 0x39, 0x63, 0x9d,
	0x07, 0xf8, 0xb3, 0xa8, 0x23, 0xbd, 0xde, 0x99, 0xe2, 0x36, 0x6c, 0xb2, 0x1a, 0x9f, 0x48, 0xfe,
	0xed, 0x2e, 0x85, 0xb2, 0xd8, 0xd3, 0xbf, 0x43, 0xe6, 0x47, 0xf8, 0x2f, 0xe9, 0x73, 0xc5, 0x8c,
	0x3f, 0x5a, 0x2b, 0x00, 0xb8, 0x84, 0x80, 0x42, 0x86, 0x6d, 0x9c, 0x87, 0x0d, 0x3e, 0x1b, 0x03,
	0x09, 0x0f, 0x85, 0x74, 0x63, 0x4c, 0xd6, 0x92, 0x26, 0x1e, 0xc1, 0x95, 0x04, 0x71, 0xea, 0xef,
	0x92, 0x85, 0x03, 0xf1, 0x4f, 0x69, 0x64, 0xc9, 0x54, 0x3e, 0x8b, 0x24, 0x43, 0xa0, 0x29, 0x0b,
	0x52, 0x7c, 0xe3, 0x02, 0x98, 0x3b, 0x97, 0x36, 0x27, 0xf5, 0x1a, 0x7f, 0xd7, 0x48, 0x45, 0x98,
	0x16, 0xdb, 0x30, 0x99, 0x75, 0x1b, 0xee, 0x80, 0xc1, 0xed, 0xcc, 0x6d, 0x50, 0x62, 0x4d, 0xee,
	0x84, 0x5c, 0x93, 0xb5, 0x26, 0xb1, 0x2f, 0xdb, 0x64, 0x41, 0xb2, 0x23, 0xb3, 0x6a, 0xcd, 0xcc,
	0x62, 0x1a, 0x7b, 0x14, 0xa5, 0xbf, 0x51, 0x4c, 0x41, 0xca, 0x61, 0x66, 0x7d, 0xad, 0x91, 0x15,
	0x85, 0x18, 0x11, 0xd5, 0x8f, 0x66, 0x8d, 0x6a, 0x07, 0xf0, 0xef, 0xe7, 0x47, 0x25, 0x29, 0x4d,
	0x86, 0x15, 0x2d, 0xf2, 0xdb, 0x2c, 0x33, 0xb8, 0x2d, 0xb2, 0x28, 0x65, 0xa2, 0xe8, 0xce, 0x9a,
	0x99, 0x9b, 0x6c, 0xd5, 0x73, 0x77, 0x11, 0x63, 0xfb, 0x8f, 0x16, 0x5d, 0x43, 0x22, 0x2c, 0x27,
	0x27, 0xac, 0x15, 0x53, 0x48, 0xc5, 0x71, 0x61, 0x5f, 0x91, 0x19, 0x97, 0x2c, 0xf9, 0xf9, 0x47,
	0xe6, 0x03, 0x52, 0x16, 0x46, 0x40, 0x52, 0xba, 0x9f, 0x71, 0x31, 0xf1, 0xf2, 0x78, 0x4a, 0xfc,
	0xdb, 0xc0, 0x4b, 0x94, 0xef, 0xc7, 0xaf, 0xeb, 0x9a, 0xfe, 0x3d, 0xa2, 0x0b, 0x13, 0x5d, 0xb5,
	0xd2, 0x15, 0xe3, 0x4a, 0xa7, 0xdc, 0x15, 0x6a, 0xa5, 0x4b, 0x5f, 0x47, 0xbc, 0xd2, 0xfd, 0xa3,
	0x00, 0x95, 0x0e, 0x3a, 0x11, 0x11, 0xfd, 0x70, 0xe6, 0xe8, 0x2d, 0x00, 0xfe, 0x30, 0x33, 0xfa,
	0x44, 0xd8, 0x3e, 0x40, 0x67, 0x6d, 0x20, 0xbf, 0x66, 0xf5, 0x1f, 0x10, 0x22, 0xad, 0x41, 0xcf,
	0x09, 0x3c, 0x68, 0x60, 0x89, 0x88, 0xf4, 0x69, 0xc2, 0xca, 0x46, 0xa5, 0x75, 0x6f, 0x67, 0xf3,
	0xde, 0x4e, 0xab, 0xd3, 0x7a, 0xb4, 0x89, 0xc5, 0x70, 0x9d, 0x2f, 0x43, 0x83, 0x34, 0x66, 0x6e,
	0xe8, 0x1e, 0xb8, 0xe1, 0xa1, 0x6a, 0x17, 0x8f, 0x83, 0xb4, 0xad, 0xdf, 0x56, 0x19, 0xce, 0xbd,
	0xfa, 0xd7, 0x00, 0xb3, 0xaa, 0x32, 0xcc, 0x4e, 0xe0, 0x77, 0xee, 0xb9, 0xf8, 0xfd, 0x67, 0x81,
	0x90, 0xef, 0x4f, 0x68, 0x70, 0x28, 0x08, 0x1e, 0xe5, 0x10, 0xbc, 0x6a, 0xc6, 0x42, 0x31, 0xc9,
	0x1f, 0x01, 0xfa, 0xed, 0xa7, 0x93, 0xfc, 0x39, 0x57, 0xe5, 0x2c, 0x1f, 0x63, 0xf8, 0xd1, 0xb3,
	0x30, 0x2c, 0xda, 0xed, 0x59, 0x18, 0x4e, 0x26, 0x70, 0xf1, 0x05, 0x25, 0xf0, 0xf3, 0x11, 0xfc,
	0xef, 0x02, 0x59, 0xdc, 0x8e, 0x7a, 0x20, 0x37, 0x87, 0x5e, 0xdd, 0x8c, 0x44, 0x66, 0x69, 0x83,
	0xa6, 0xe4, 0x0e, 0xa8, 0xdd, 0xe3, 0xe3, 0x4b, 0x56, 0x05, 0xda, 0x24, 0xc5, 0x41, 0x2f, 0x90,
	0x2d, 0xe8, 0xbb, 0x80, 0x75, 0x43, 0x6d, 0x41, 0x51, 0x54, 0xa8, 0x1b, 0x4f, 0x06, 0x1e, 0x00,
	0x1f, 0x88, 0xa6, 0x90, 0x71, 0x43, 0xbb, 0x92, 0x47, 0x68, 0xd5, 0x93, 0x3b, 0x54, 0x7c, 0x61,
	0x3b, 0xb4, 0x13, 0x35, 0xde, 0x73, 0x79, 0xbb, 0xf3, 0x36, 0x80, 0x5d, 0x4e, 0x24, 0x3f, 0x47,
	0x42, 0xed, 0x44, 0xc0, 0x22, 0x0a, 0xbe, 0x6f, 0x1b, 0x2b, 0x7f, 0x81, 0x7b, 0x17, 0x7d, 0xfb,
	0x94, 0xf6, 0x6d, 0x18, 0x58, 0xb0, 0x8b, 0x6f, 0x7a, 0xde, 0xbe, 0x4b, 0x4f, 0x2e, 0x20, 0x59,
	0x1b, 0xf0, 0x31, 0x38, 0xf0, 0xfe, 0xd3, 0xb3, 0xdb, 0x41, 0xf8, 0xcc, 0x3d, 0xb8, 0x98, 0x98,
	0x03, 0xce, 0x02, 0x9e, 0xae, 0x6e, 0x82, 0xd0, 0x7c, 0x69, 0x14, 0xbf, 0x1d, 0x53, 0xcc, 0xe7,
	0x4c, 0x3e, 0xa8, 0x9f, 0x57, 0xf9, 0x8c, 0x5c, 0x16, 0x6e, 0xe4, 0x10, 0xf8, 0x9b, 0x02, 0x59,
	0xda, 0xf6, 0x58, 0x38, 0x4d, 0xe1, 0xc7, 0xcf, 0xc0, 0xe0, 0x0d, 0x30, 0x79, 0x2d, 0x93, 0x41,
	0x6e, 0x17, 0xd2, 0x2e, 0x8c, 0x72, 0x50, 0x38, 0x24, 0xfc, 0x7e, 0x59, 0x45, 0xe1, 0x4e, 0xc4,
	0x47, 0x6e, 0x41, 0xb8, 0xc2, 0x47, 0xad, 0x54, 0x41, 0x88, 0x58, 0x52, 0xbc, 0xcd, 0xa1, 0xea,
	0xaf, 0x05, 0xb2, 0x72, 0xc7, 0x73, 0x30, 0xf4, 0x29, 0x5d, 0x5f, 0x3c, 0x03, 0x5d, 0xf9, 0xfd,
	0xd5, 0x34, 0xe1, 0x86, 0x12, 0x3f, 0xc9, 0x5b, 0x32, 0xf7, 0x98, 0x0f, 0x5d, 0x07, 0x7d, 0x69,
	0x34, 0xb6, 0x9f, 0x4a, 0xa3, 0x09, 0x60, 0x97, 0x72, 0x68, 0x4c, 0x05, 0x90, 0x43, 0xe5, 0x0f,
	0xc9, 0x29, 0xec, 0xc3, 0x43, 0x3b, 0x9c, 0x30, 0x1c, 0xc6, 0x60, 0x54, 0x2b, 0xed, 0xd2, 0x3d,
	0x57, 0xb4, 0xc2, 0x25, 0x31, 0x15, 0xc3, 0xf7, 0x20, 0xe4, 0x56, 0x12, 0x91, 0x43, 0x09, 0xe6,
	0x6a, 0x06, 0x7f, 0x6a, 0x82, 0x43, 0x50, 0xa4, 0xe3, 0x1e, 0x9e, 0xc0, 0x92, 0x75, 0x11, 0x94,
	0x8c, 0xcd, 0x71, 0xef, 0x44, 0x95, 0xc6, 0x47, 0x64, 0x39, 0x36, 0xde, 0xe4, 0x20, 0xd0, 0xec,
	0x0b, 0x01, 0x69, 0x9c, 0xf7, 0x6c, 0xaf, 0xe4, 0x03, 0xfc, 0xac, 0xa0, 0xba, 0x2f, 0xf2, 0x60,
	0x7f, 0xd6, 0x76, 0x74, 0xc6, 0xc6, 0x25, 0xd7, 0x3a, 0x9f, 0x4f, 0xb7, 0xc8, 0x92, 0x58, 0x91,
	0xcf, 0x6d, 0xa2, 0x85, 0x3b, 0x65, 0x26, 0xc3, 0x12, 0xaf, 0x7f, 0x27, 0x02, 0x6d, 0xa7, 0xe6,
	0xe3, 0x15, 0x33, 0xb5, 0x2d, 0x62, 0x1f, 0x72, 0x31, 0xa6, 0x23, 0x73, 0xe3, 0xa7, 0x25, 0x18,
	0x3a, 0x78, 0x00, 0x1d, 0x3b, 0xd8, 0xa3, 0x7c, 0xa2, 0x2c, 0x3b, 0x43, 0x97, 0x8e, 0xc3, 0xae,
	0xeb, 0x03, 0x15, 0x9a, 0x32, 0x7c, 0xa3, 0x98, 0xf5, 0x3a, 0x00, 0xd7, 0xe3, 0xb6, 0x5f, 0x08,
	0x1b, 0xae, 0x1f, 0x3f, 0x8f, 0xe9, 0x1f, 0xc3, 0x7c, 0xc4, 0xc4, 0x7b, 0x57, 0x01, 0x11, 0x88,
	0x39, 0x1d, 0x8a, 0xad, 0x37, 0x40, 0xff, 0xb5, 0x58, 0xff, 0xc0, 0x0d, 0xc2, 0x89, 0x3d, 0x4c,
	0xbe, 0x5e, 0xe9, 0x2d, 0x3e, 0xc8, 0x8b, 0xae, 0x1b, 0x0b, 0x6f, 0xe5, 0xfa, 0xb2, 0x99, 0x98,
	0x51, 0xad, 0xb7, 0x00, 0xe6, 0x8d, 0x18, 0x86, 0x53, 0x1f, 0x1e, 0xfa, 0x58, 0xc2, 0x13, 0x4d,
	0x3b, 0x0c, 0x6b, 0xd1, 0x40, 0x38, 0x27, 0xa3, 0x51, 0x66, 0x2c, 0x31, 0x62, 0x66, 0x0e, 0x31,
	0x4c, 0xbf, 0x1f, 0x8f, 0x79, 0x25, 0x54, 0x3d, 0x6d, 0xa6, 0xa7, 0x99, 0xf4, 0x2b, 0x4e, 0x34,
	0x5b, 0x24, 0xae, 0xf3, 0xa9, 0x2b, 0x37, 0xc9, 0x1c, 0xef, 0x6b, 0xf1, 0x0d, 0x14, 0x49, 0x89,
	0xfa, 0x67, 0xeb, 0x02, 0xc0, 0x9c, 0x8b, 0x61, 0xa2, 0x56, 0x8c, 0x4b, 0x33, 0xfd, 0x16, 0x29,
	0x61, 0xa7, 0x56, 0x5b, 0x44, 0xbd, 0x8a, 0xd2, 0xf2, 0xe5, 0x29, 0xa2, 0x3c, 0xb7, 0x37, 0xe0,
	0x0f, 0x2e, 0x65, 0xf9, 0xf6, 0x14, 0x55, 0xb6, 0xf4, 0xd3, 0xb4, 0x72, 0x5d, 0x8b, 0x57, 0x94,
	0x79, 0x71, 0xf5, 0xe0, 0x6b, 0x25, 0x67, 0x4c, 0xb9, 0xa9, 0x33, 0x75, 0x85, 0xf8, 0x3a, 0x3e,
	0x6b, 0x2f, 0xf2, 0x82, 0xdc, 0xe5, 0x2d, 0x4e, 0x05, 0xb5, 0x61, 0xa6, 0x57, 0xae, 0x29, 0x71,
	0x44, 0x93, 0xfb, 0xa6, 0x54, 0xf0, 0xc6, 0xbf, 0xe6, 0xc9, 0x99, 0x07, 0x32, 0x61, 0xbf, 0x49,
	0xcb, 0xff, 0xcf, 0xb4, 0x7c, 0x27, 0x2f, 0x2d, 0xb3, 0xa2, 0x96, 0xad, 0xf4, 0xff, 0x32, 0x29,
	0xa1, 0x65, 0x5f, 0x80, 0xeb, 0x11, 0xd5, 0x97, 0x24, 0xe3, 0xe9, 0x7e, 0x22, 0x9d, 0x7f, 0x19,
	0x57, 0x2a, 0x54, 0xff, 0xe8, 0xb6, 0xaa, 0x22, 0x8a, 0x5a, 0xb4, 0x05, 0xc8, 0x9b, 0x00, 0xf2,
	0x7a, 0x12, 0x04, 0x43, 0x39, 0x76, 0x8d, 0x2c, 0x06, 0xcc, 0xef, 0x22, 0x89, 0xcb, 0x69, 0x12,
	0x79, 0xaf, 0x74, 0x29, 0x03, 0x43, 0x99, 0x49, 0xa2, 0x1b, 0xa1, 0xf1, 0x55, 0x81, 0x9c, 0xbe,
	0xeb, 0x3a, 0x81, 0xb7, 0x23, 0xd2, 0x5c, 0xbc, 0xa8, 0x5f, 0x4b, 0xbc, 0xa8, 0xe3, 0xef, 0x48,
	0xea, 0x20, 0xa5, 0x2a, 0xc8, 0xe7, 0xe9, 0x6b, 0x89, 0x7e, 0x1a, 0x35, 0xd4, 0x7e, 0x3a, 0x43,
	0x63, 0x93, 0x54, 0xa3, 0xdf, 0x45, 0xd2, 0xaf, 0x10, 0x4b, 0xaa, 0x38, 0xef, 0x8d, 0xe3, 0x60,
	0xd4, 0x2f, 0xf8, 0x68, 0x7b, 0x91, 0x10, 0x27, 0xa0, 0xfc, 0x77, 0x93, 0xee, 0xee, 0xa1, 0xec,
	0xa7, 0xf1, 0x91, 0xaf, 0xc9, 0x57, 0xe1, 0x6e, 0xe6, 0x6e, 0x3d, 0xe7, 0xeb, 0xf9, 0x1c, 0xfe,
	0x54, 0xf1, 0x37, 0x2d, 0x49, 0xd1, 0xc9, 0xf3, 0xe2, 0xb1, 0xae, 0x21, 0x7f, 0x56, 0x41, 0x50,
	0x23, 0x62, 0x25, 0xff, 0xcd, 0xe7, 0x33, 0x42, 0xe2, 0x61, 0x17, 0x0b, 0x57, 0xd9, 0xba, 0x05,
	0x34, 0x1d, 0xdf, 0x38, 0x75, 0xa3, 0x92, 0xe8, 0xd1, 0xd0, 0x6b, 0xd5, 0x49, 0xcd, 0xf1, 0x46,
	0xa6, 0x7d, 0xe0, 0x8e, 0x69, 0xf8, 0xc4, 0x0b, 0xf6, 0xe5, 0x8f, 0xa6, 0xbb, 0x93, 0xfe, 0x8f,
	0x35, 0xed, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x93, 0x3f, 0xd9, 0x65, 0x1d, 0x00, 0x00,
}
