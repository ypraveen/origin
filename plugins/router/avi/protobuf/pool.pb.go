// Code generated by protoc-gen-go.
// source: pool.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LbAlgorithm int32

const (
	LbAlgorithm_LB_ALGORITHM_LEAST_CONNECTIONS LbAlgorithm = 1
	LbAlgorithm_LB_ALGORITHM_ROUND_ROBIN       LbAlgorithm = 2
	LbAlgorithm_LB_ALGORITHM_FASTEST_RESPONSE  LbAlgorithm = 3
	LbAlgorithm_LB_ALGORITHM_CONSISTENT_HASH   LbAlgorithm = 4
	LbAlgorithm_LB_ALGORITHM_LEAST_LOAD        LbAlgorithm = 5
	LbAlgorithm_LB_ALGORITHM_FEWEST_SERVERS    LbAlgorithm = 6
	LbAlgorithm_LB_ALGORITHM_RANDOM            LbAlgorithm = 7
	LbAlgorithm_LB_ALGORITHM_FEWEST_TASKS      LbAlgorithm = 8
)

var LbAlgorithm_name = map[int32]string{
	1: "LB_ALGORITHM_LEAST_CONNECTIONS",
	2: "LB_ALGORITHM_ROUND_ROBIN",
	3: "LB_ALGORITHM_FASTEST_RESPONSE",
	4: "LB_ALGORITHM_CONSISTENT_HASH",
	5: "LB_ALGORITHM_LEAST_LOAD",
	6: "LB_ALGORITHM_FEWEST_SERVERS",
	7: "LB_ALGORITHM_RANDOM",
	8: "LB_ALGORITHM_FEWEST_TASKS",
}
var LbAlgorithm_value = map[string]int32{
	"LB_ALGORITHM_LEAST_CONNECTIONS": 1,
	"LB_ALGORITHM_ROUND_ROBIN":       2,
	"LB_ALGORITHM_FASTEST_RESPONSE":  3,
	"LB_ALGORITHM_CONSISTENT_HASH":   4,
	"LB_ALGORITHM_LEAST_LOAD":        5,
	"LB_ALGORITHM_FEWEST_SERVERS":    6,
	"LB_ALGORITHM_RANDOM":            7,
	"LB_ALGORITHM_FEWEST_TASKS":      8,
}

func (x LbAlgorithm) Enum() *LbAlgorithm {
	p := new(LbAlgorithm)
	*p = x
	return p
}
func (x LbAlgorithm) String() string {
	return proto.EnumName(LbAlgorithm_name, int32(x))
}
func (x *LbAlgorithm) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LbAlgorithm_value, data, "LbAlgorithm")
	if err != nil {
		return err
	}
	*x = LbAlgorithm(value)
	return nil
}
func (LbAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor77, []int{0} }

type LbAlgorithmConsistentHash int32

const (
	LbAlgorithmConsistentHash_LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS          LbAlgorithmConsistentHash = 1
	LbAlgorithmConsistentHash_LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS_AND_PORT LbAlgorithmConsistentHash = 2
	LbAlgorithmConsistentHash_LB_ALGORITHM_CONSISTENT_HASH_URI                        LbAlgorithmConsistentHash = 3
	LbAlgorithmConsistentHash_LB_ALGORITHM_CONSISTENT_HASH_CUSTOM_HEADER              LbAlgorithmConsistentHash = 4
)

var LbAlgorithmConsistentHash_name = map[int32]string{
	1: "LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS",
	2: "LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS_AND_PORT",
	3: "LB_ALGORITHM_CONSISTENT_HASH_URI",
	4: "LB_ALGORITHM_CONSISTENT_HASH_CUSTOM_HEADER",
}
var LbAlgorithmConsistentHash_value = map[string]int32{
	"LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS":          1,
	"LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS_AND_PORT": 2,
	"LB_ALGORITHM_CONSISTENT_HASH_URI":                        3,
	"LB_ALGORITHM_CONSISTENT_HASH_CUSTOM_HEADER":              4,
}

func (x LbAlgorithmConsistentHash) Enum() *LbAlgorithmConsistentHash {
	p := new(LbAlgorithmConsistentHash)
	*p = x
	return p
}
func (x LbAlgorithmConsistentHash) String() string {
	return proto.EnumName(LbAlgorithmConsistentHash_name, int32(x))
}
func (x *LbAlgorithmConsistentHash) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LbAlgorithmConsistentHash_value, data, "LbAlgorithmConsistentHash")
	if err != nil {
		return err
	}
	*x = LbAlgorithmConsistentHash(value)
	return nil
}
func (LbAlgorithmConsistentHash) EnumDescriptor() ([]byte, []int) { return fileDescriptor77, []int{1} }

type LbFailure int32

const (
	LbFailure_PERSISTENT_SERVER_INVALID LbFailure = 0
	LbFailure_PERSISTENT_SERVER_DOWN    LbFailure = 1
	LbFailure_SRVR_DOWN                 LbFailure = 2
	LbFailure_ADD_PENDING               LbFailure = 3
	LbFailure_SLOW_START_MAX_CONN       LbFailure = 4
	LbFailure_MAX_CONN                  LbFailure = 5
	LbFailure_NO_LPORT                  LbFailure = 6
	LbFailure_SUSPECT_STATE             LbFailure = 7
	LbFailure_MAX_CONN_RATE             LbFailure = 8
	LbFailure_CAPEST_RAND_MAX_CONN      LbFailure = 9
)

var LbFailure_name = map[int32]string{
	0: "PERSISTENT_SERVER_INVALID",
	1: "PERSISTENT_SERVER_DOWN",
	2: "SRVR_DOWN",
	3: "ADD_PENDING",
	4: "SLOW_START_MAX_CONN",
	5: "MAX_CONN",
	6: "NO_LPORT",
	7: "SUSPECT_STATE",
	8: "MAX_CONN_RATE",
	9: "CAPEST_RAND_MAX_CONN",
}
var LbFailure_value = map[string]int32{
	"PERSISTENT_SERVER_INVALID": 0,
	"PERSISTENT_SERVER_DOWN":    1,
	"SRVR_DOWN":                 2,
	"ADD_PENDING":               3,
	"SLOW_START_MAX_CONN":       4,
	"MAX_CONN":                  5,
	"NO_LPORT":                  6,
	"SUSPECT_STATE":             7,
	"MAX_CONN_RATE":             8,
	"CAPEST_RAND_MAX_CONN":      9,
}

func (x LbFailure) Enum() *LbFailure {
	p := new(LbFailure)
	*p = x
	return p
}
func (x LbFailure) String() string {
	return proto.EnumName(LbFailure_name, int32(x))
}
func (x *LbFailure) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LbFailure_value, data, "LbFailure")
	if err != nil {
		return err
	}
	*x = LbFailure(value)
	return nil
}
func (LbFailure) EnumDescriptor() ([]byte, []int) { return fileDescriptor77, []int{2} }

type PoolDownHttpStatusCode int32

const (
	PoolDownHttpStatusCode_POOL_DOWN_HTTP_STATUS_CODE_200 PoolDownHttpStatusCode = 200
	PoolDownHttpStatusCode_POOL_DOWN_HTTP_STATUS_CODE_503 PoolDownHttpStatusCode = 503
)

var PoolDownHttpStatusCode_name = map[int32]string{
	200: "POOL_DOWN_HTTP_STATUS_CODE_200",
	503: "POOL_DOWN_HTTP_STATUS_CODE_503",
}
var PoolDownHttpStatusCode_value = map[string]int32{
	"POOL_DOWN_HTTP_STATUS_CODE_200": 200,
	"POOL_DOWN_HTTP_STATUS_CODE_503": 503,
}

func (x PoolDownHttpStatusCode) Enum() *PoolDownHttpStatusCode {
	p := new(PoolDownHttpStatusCode)
	*p = x
	return p
}
func (x PoolDownHttpStatusCode) String() string {
	return proto.EnumName(PoolDownHttpStatusCode_name, int32(x))
}
func (x *PoolDownHttpStatusCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PoolDownHttpStatusCode_value, data, "PoolDownHttpStatusCode")
	if err != nil {
		return err
	}
	*x = PoolDownHttpStatusCode(value)
	return nil
}
func (PoolDownHttpStatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor77, []int{3} }

type PoolDownActionEnum int32

const (
	PoolDownActionEnum_POOL_DOWN_ACTION_HTTP_REDIRECT  PoolDownActionEnum = 1
	PoolDownActionEnum_POOL_DOWN_ACTION_HTTP_LOCAL_RSP PoolDownActionEnum = 2
	PoolDownActionEnum_POOL_DOWN_ACTION_CLOSE_CONN     PoolDownActionEnum = 3
	PoolDownActionEnum_POOL_DOWN_ACTION_BACKUP_POOL    PoolDownActionEnum = 4
)

var PoolDownActionEnum_name = map[int32]string{
	1: "POOL_DOWN_ACTION_HTTP_REDIRECT",
	2: "POOL_DOWN_ACTION_HTTP_LOCAL_RSP",
	3: "POOL_DOWN_ACTION_CLOSE_CONN",
	4: "POOL_DOWN_ACTION_BACKUP_POOL",
}
var PoolDownActionEnum_value = map[string]int32{
	"POOL_DOWN_ACTION_HTTP_REDIRECT":  1,
	"POOL_DOWN_ACTION_HTTP_LOCAL_RSP": 2,
	"POOL_DOWN_ACTION_CLOSE_CONN":     3,
	"POOL_DOWN_ACTION_BACKUP_POOL":    4,
}

func (x PoolDownActionEnum) Enum() *PoolDownActionEnum {
	p := new(PoolDownActionEnum)
	*p = x
	return p
}
func (x PoolDownActionEnum) String() string {
	return proto.EnumName(PoolDownActionEnum_name, int32(x))
}
func (x *PoolDownActionEnum) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PoolDownActionEnum_value, data, "PoolDownActionEnum")
	if err != nil {
		return err
	}
	*x = PoolDownActionEnum(value)
	return nil
}
func (PoolDownActionEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor77, []int{4} }

type PoolServerStateEnum int32

const (
	PoolServerStateEnum_POOL_SERVER_UP   PoolServerStateEnum = 1
	PoolServerStateEnum_POOL_SERVER_DOWN PoolServerStateEnum = 2
)

var PoolServerStateEnum_name = map[int32]string{
	1: "POOL_SERVER_UP",
	2: "POOL_SERVER_DOWN",
}
var PoolServerStateEnum_value = map[string]int32{
	"POOL_SERVER_UP":   1,
	"POOL_SERVER_DOWN": 2,
}

func (x PoolServerStateEnum) Enum() *PoolServerStateEnum {
	p := new(PoolServerStateEnum)
	*p = x
	return p
}
func (x PoolServerStateEnum) String() string {
	return proto.EnumName(PoolServerStateEnum_name, int32(x))
}
func (x *PoolServerStateEnum) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PoolServerStateEnum_value, data, "PoolServerStateEnum")
	if err != nil {
		return err
	}
	*x = PoolServerStateEnum(value)
	return nil
}
func (PoolServerStateEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor77, []int{5} }

type DiscoveredNetwork struct {
	NetworkUuid      *string         `protobuf:"bytes,1,req,name=network_uuid" json:"network_uuid,omitempty"`
	Subnet           []*IpAddrPrefix `protobuf:"bytes,2,rep,name=subnet" json:"subnet,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *DiscoveredNetwork) Reset()                    { *m = DiscoveredNetwork{} }
func (m *DiscoveredNetwork) String() string            { return proto.CompactTextString(m) }
func (*DiscoveredNetwork) ProtoMessage()               {}
func (*DiscoveredNetwork) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{0} }

func (m *DiscoveredNetwork) GetNetworkUuid() string {
	if m != nil && m.NetworkUuid != nil {
		return *m.NetworkUuid
	}
	return ""
}

func (m *DiscoveredNetwork) GetSubnet() []*IpAddrPrefix {
	if m != nil {
		return m.Subnet
	}
	return nil
}

type Server struct {
	// server can contain either an IP or a weak reference to a vm
	// depending on how the pool was created
	// Changed IP addr to required , else SeAgent was crashing.
	Ip                    *IpAddr  `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	Port                  *int32   `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Hostname              *string  `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	Enabled               *bool    `protobuf:"varint,4,opt,name=enabled,def=1" json:"enabled,omitempty"`
	Ratio                 *int32   `protobuf:"varint,5,opt,name=ratio,def=1" json:"ratio,omitempty"`
	VmUuid                *string  `protobuf:"bytes,6,opt,name=vm_uuid" json:"vm_uuid,omitempty"`
	NwUuid                *string  `protobuf:"bytes,7,opt,name=nw_uuid" json:"nw_uuid,omitempty"`
	DiscoveredNetworkUuid []string `protobuf:"bytes,8,rep,name=discovered_network_uuid" json:"discovered_network_uuid,omitempty"`
	// UUID identifying VM in OpenStack and other external compute orch
	ExternalUuid       *string              `protobuf:"bytes,9,opt,name=external_uuid" json:"external_uuid,omitempty"`
	DiscoveredSubnet   []*IpAddrPrefix      `protobuf:"bytes,10,rep,name=discovered_subnet" json:"discovered_subnet,omitempty"`
	VerifyNetwork      *bool                `protobuf:"varint,11,opt,name=verify_network,def=0" json:"verify_network,omitempty"`
	DiscoveredNetworks []*DiscoveredNetwork `protobuf:"bytes,12,rep,name=discovered_networks" json:"discovered_networks,omitempty"`
	ResolveServerByDns *bool                `protobuf:"varint,13,opt,name=resolve_server_by_dns,def=0" json:"resolve_server_by_dns,omitempty"`
	PrstHdrVal         *string              `protobuf:"bytes,14,opt,name=prst_hdr_val" json:"prst_hdr_val,omitempty"`
	MacAddress         *string              `protobuf:"bytes,15,opt,name=mac_address" json:"mac_address,omitempty"`
	Static             *bool                `protobuf:"varint,16,opt,name=static,def=0" json:"static,omitempty"`
	ServerNode         *string              `protobuf:"bytes,17,opt,name=server_node" json:"server_node,omitempty"`
	XXX_unrecognized   []byte               `json:"-"`
}

func (m *Server) Reset()                    { *m = Server{} }
func (m *Server) String() string            { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{1} }

const Default_Server_Enabled bool = true
const Default_Server_Ratio int32 = 1
const Default_Server_VerifyNetwork bool = false
const Default_Server_ResolveServerByDns bool = false
const Default_Server_Static bool = false

func (m *Server) GetIp() *IpAddr {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Server) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *Server) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *Server) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return Default_Server_Enabled
}

func (m *Server) GetRatio() int32 {
	if m != nil && m.Ratio != nil {
		return *m.Ratio
	}
	return Default_Server_Ratio
}

func (m *Server) GetVmUuid() string {
	if m != nil && m.VmUuid != nil {
		return *m.VmUuid
	}
	return ""
}

func (m *Server) GetNwUuid() string {
	if m != nil && m.NwUuid != nil {
		return *m.NwUuid
	}
	return ""
}

func (m *Server) GetDiscoveredNetworkUuid() []string {
	if m != nil {
		return m.DiscoveredNetworkUuid
	}
	return nil
}

func (m *Server) GetExternalUuid() string {
	if m != nil && m.ExternalUuid != nil {
		return *m.ExternalUuid
	}
	return ""
}

func (m *Server) GetDiscoveredSubnet() []*IpAddrPrefix {
	if m != nil {
		return m.DiscoveredSubnet
	}
	return nil
}

func (m *Server) GetVerifyNetwork() bool {
	if m != nil && m.VerifyNetwork != nil {
		return *m.VerifyNetwork
	}
	return Default_Server_VerifyNetwork
}

func (m *Server) GetDiscoveredNetworks() []*DiscoveredNetwork {
	if m != nil {
		return m.DiscoveredNetworks
	}
	return nil
}

func (m *Server) GetResolveServerByDns() bool {
	if m != nil && m.ResolveServerByDns != nil {
		return *m.ResolveServerByDns
	}
	return Default_Server_ResolveServerByDns
}

func (m *Server) GetPrstHdrVal() string {
	if m != nil && m.PrstHdrVal != nil {
		return *m.PrstHdrVal
	}
	return ""
}

func (m *Server) GetMacAddress() string {
	if m != nil && m.MacAddress != nil {
		return *m.MacAddress
	}
	return ""
}

func (m *Server) GetStatic() bool {
	if m != nil && m.Static != nil {
		return *m.Static
	}
	return Default_Server_Static
}

func (m *Server) GetServerNode() string {
	if m != nil && m.ServerNode != nil {
		return *m.ServerNode
	}
	return ""
}

type NetworkFilter struct {
	NetworkUuid      *string `protobuf:"bytes,1,req,name=network_uuid" json:"network_uuid,omitempty"`
	ServerFilter     *string `protobuf:"bytes,3,opt,name=server_filter" json:"server_filter,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NetworkFilter) Reset()                    { *m = NetworkFilter{} }
func (m *NetworkFilter) String() string            { return proto.CompactTextString(m) }
func (*NetworkFilter) ProtoMessage()               {}
func (*NetworkFilter) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{2} }

func (m *NetworkFilter) GetNetworkUuid() string {
	if m != nil && m.NetworkUuid != nil {
		return *m.NetworkUuid
	}
	return ""
}

func (m *NetworkFilter) GetServerFilter() string {
	if m != nil && m.ServerFilter != nil {
		return *m.ServerFilter
	}
	return ""
}

type PlacementNetwork struct {
	NetworkUuid      *string       `protobuf:"bytes,1,req,name=network_uuid" json:"network_uuid,omitempty"`
	Subnet           *IpAddrPrefix `protobuf:"bytes,2,opt,name=subnet" json:"subnet,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *PlacementNetwork) Reset()                    { *m = PlacementNetwork{} }
func (m *PlacementNetwork) String() string            { return proto.CompactTextString(m) }
func (*PlacementNetwork) ProtoMessage()               {}
func (*PlacementNetwork) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{3} }

func (m *PlacementNetwork) GetNetworkUuid() string {
	if m != nil && m.NetworkUuid != nil {
		return *m.NetworkUuid
	}
	return ""
}

func (m *PlacementNetwork) GetSubnet() *IpAddrPrefix {
	if m != nil {
		return m.Subnet
	}
	return nil
}

type PoolDownActionHTTPRedirect struct {
	Protocol         *HTTPProtocol           `protobuf:"varint,1,opt,name=protocol,enum=HTTPProtocol,def=0" json:"protocol,omitempty"`
	Host             *string                 `protobuf:"bytes,2,req,name=host" json:"host,omitempty"`
	Path             *string                 `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	Query            *string                 `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	StatusCode       *HTTPRedirectStatusCode `protobuf:"varint,5,opt,name=status_code,enum=HTTPRedirectStatusCode,def=302" json:"status_code,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *PoolDownActionHTTPRedirect) Reset()                    { *m = PoolDownActionHTTPRedirect{} }
func (m *PoolDownActionHTTPRedirect) String() string            { return proto.CompactTextString(m) }
func (*PoolDownActionHTTPRedirect) ProtoMessage()               {}
func (*PoolDownActionHTTPRedirect) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{4} }

const Default_PoolDownActionHTTPRedirect_Protocol HTTPProtocol = HTTPProtocol_HTTP
const Default_PoolDownActionHTTPRedirect_StatusCode HTTPRedirectStatusCode = HTTPRedirectStatusCode_HTTP_REDIRECT_STATUS_CODE_302

func (m *PoolDownActionHTTPRedirect) GetProtocol() HTTPProtocol {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return Default_PoolDownActionHTTPRedirect_Protocol
}

func (m *PoolDownActionHTTPRedirect) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *PoolDownActionHTTPRedirect) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *PoolDownActionHTTPRedirect) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

func (m *PoolDownActionHTTPRedirect) GetStatusCode() HTTPRedirectStatusCode {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return Default_PoolDownActionHTTPRedirect_StatusCode
}

type PoolDownActionHTTPLocalResponse struct {
	StatusCode       *PoolDownHttpStatusCode `protobuf:"varint,1,opt,name=status_code,enum=PoolDownHttpStatusCode,def=503" json:"status_code,omitempty"`
	File             *HTTPLocalFile          `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *PoolDownActionHTTPLocalResponse) Reset()         { *m = PoolDownActionHTTPLocalResponse{} }
func (m *PoolDownActionHTTPLocalResponse) String() string { return proto.CompactTextString(m) }
func (*PoolDownActionHTTPLocalResponse) ProtoMessage()    {}
func (*PoolDownActionHTTPLocalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor77, []int{5}
}

const Default_PoolDownActionHTTPLocalResponse_StatusCode PoolDownHttpStatusCode = PoolDownHttpStatusCode_POOL_DOWN_HTTP_STATUS_CODE_503

func (m *PoolDownActionHTTPLocalResponse) GetStatusCode() PoolDownHttpStatusCode {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return Default_PoolDownActionHTTPLocalResponse_StatusCode
}

func (m *PoolDownActionHTTPLocalResponse) GetFile() *HTTPLocalFile {
	if m != nil {
		return m.File
	}
	return nil
}

type PoolDownActionBackupPool struct {
	BackupPoolUuid   *string `protobuf:"bytes,1,req,name=backup_pool_uuid" json:"backup_pool_uuid,omitempty"`
	Ratio            *uint32 `protobuf:"varint,2,opt,name=ratio" json:"ratio,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PoolDownActionBackupPool) Reset()                    { *m = PoolDownActionBackupPool{} }
func (m *PoolDownActionBackupPool) String() string            { return proto.CompactTextString(m) }
func (*PoolDownActionBackupPool) ProtoMessage()               {}
func (*PoolDownActionBackupPool) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{6} }

func (m *PoolDownActionBackupPool) GetBackupPoolUuid() string {
	if m != nil && m.BackupPoolUuid != nil {
		return *m.BackupPoolUuid
	}
	return ""
}

func (m *PoolDownActionBackupPool) GetRatio() uint32 {
	if m != nil && m.Ratio != nil {
		return *m.Ratio
	}
	return 0
}

type PoolDownAction struct {
	Redirect         *PoolDownActionHTTPRedirect      `protobuf:"bytes,40,opt,name=redirect" json:"redirect,omitempty"`
	LocalRsp         *PoolDownActionHTTPLocalResponse `protobuf:"bytes,41,opt,name=local_rsp" json:"local_rsp,omitempty"`
	BackupPool       *PoolDownActionBackupPool        `protobuf:"bytes,42,opt,name=backup_pool" json:"backup_pool,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *PoolDownAction) Reset()                    { *m = PoolDownAction{} }
func (m *PoolDownAction) String() string            { return proto.CompactTextString(m) }
func (*PoolDownAction) ProtoMessage()               {}
func (*PoolDownAction) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{7} }

func (m *PoolDownAction) GetRedirect() *PoolDownActionHTTPRedirect {
	if m != nil {
		return m.Redirect
	}
	return nil
}

func (m *PoolDownAction) GetLocalRsp() *PoolDownActionHTTPLocalResponse {
	if m != nil {
		return m.LocalRsp
	}
	return nil
}

func (m *PoolDownAction) GetBackupPool() *PoolDownActionBackupPool {
	if m != nil {
		return m.BackupPool
	}
	return nil
}

type PoolX509Certificate struct {
	PemCert          *string `protobuf:"bytes,1,req,name=pem_cert" json:"pem_cert,omitempty"`
	IsCa             *bool   `protobuf:"varint,2,opt,name=is_ca,def=0" json:"is_ca,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PoolX509Certificate) Reset()                    { *m = PoolX509Certificate{} }
func (m *PoolX509Certificate) String() string            { return proto.CompactTextString(m) }
func (*PoolX509Certificate) ProtoMessage()               {}
func (*PoolX509Certificate) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{8} }

const Default_PoolX509Certificate_IsCa bool = false

func (m *PoolX509Certificate) GetPemCert() string {
	if m != nil && m.PemCert != nil {
		return *m.PemCert
	}
	return ""
}

func (m *PoolX509Certificate) GetIsCa() bool {
	if m != nil && m.IsCa != nil {
		return *m.IsCa
	}
	return Default_PoolX509Certificate_IsCa
}

type Pool struct {
	Uuid *string `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// The backend port must be the first field after required fields.
	// This is to fix the 'upgrade' check code in SE Agent protobuf handling.
	DefaultServerPort                 *int32    `protobuf:"varint,5,opt,name=default_server_port,def=80" json:"default_server_port,omitempty"`
	GracefulDisableTimeout            *int32    `protobuf:"varint,8,opt,name=graceful_disable_timeout,def=1" json:"graceful_disable_timeout,omitempty"`
	ConnectionRampDuration            *int32    `protobuf:"varint,9,opt,name=connection_ramp_duration,def=10" json:"connection_ramp_duration,omitempty"`
	MaxConcurrentConnectionsPerServer *int32    `protobuf:"varint,10,opt,name=max_concurrent_connections_per_server,def=0" json:"max_concurrent_connections_per_server,omitempty"`
	HealthMonitorUuids                []string  `protobuf:"bytes,11,rep,name=health_monitor_uuids" json:"health_monitor_uuids,omitempty"`
	Servers                           []*Server `protobuf:"bytes,12,rep,name=servers" json:"servers,omitempty"`
	ServerCount                       *int32    `protobuf:"varint,13,opt,name=server_count,def=0" json:"server_count,omitempty"`
	// Algorithm details MUST be after list of servers
	LbAlgorithm                       *LbAlgorithm               `protobuf:"varint,20,opt,name=lb_algorithm,enum=LbAlgorithm,def=1" json:"lb_algorithm,omitempty"`
	LbAlgorithmHash                   *LbAlgorithmConsistentHash `protobuf:"varint,21,opt,name=lb_algorithm_hash,enum=LbAlgorithmConsistentHash,def=1" json:"lb_algorithm_hash,omitempty"`
	LbAlgorithmConsistentHashHdr      *string                    `protobuf:"bytes,22,opt,name=lb_algorithm_consistent_hash_hdr" json:"lb_algorithm_consistent_hash_hdr,omitempty"`
	Networks                          []*NetworkFilter           `protobuf:"bytes,33,rep,name=networks" json:"networks,omitempty"`
	PlacementNetworks                 []*PlacementNetwork        `protobuf:"bytes,34,rep,name=placement_networks" json:"placement_networks,omitempty"`
	ApplicationPersistenceProfileUuid *string                    `protobuf:"bytes,35,opt,name=application_persistence_profile_uuid" json:"application_persistence_profile_uuid,omitempty"`
	SslProfileUuid                    *string                    `protobuf:"bytes,36,opt,name=ssl_profile_uuid" json:"ssl_profile_uuid,omitempty"`
	X509Cert                          []*PoolX509Certificate     `protobuf:"bytes,37,rep,name=x509_cert" json:"x509_cert,omitempty"`
	InlineHealthMonitor               *bool                      `protobuf:"varint,38,opt,name=inline_health_monitor,def=1" json:"inline_health_monitor,omitempty"`
	UseServicePort                    *bool                      `protobuf:"varint,39,opt,name=use_service_port,def=0" json:"use_service_port,omitempty"`
	PdActionType                      *PoolDownActionEnum        `protobuf:"varint,40,opt,name=pd_action_type,enum=PoolDownActionEnum,def=3" json:"pd_action_type,omitempty"`
	DownAction                        *PoolDownAction            `protobuf:"bytes,41,opt,name=down_action" json:"down_action,omitempty"`
	CapacityEstimation                *bool                      `protobuf:"varint,42,opt,name=capacity_estimation,def=0" json:"capacity_estimation,omitempty"`
	CapacityEstimationTtfbThresh      *uint32                    `protobuf:"varint,43,opt,name=capacity_estimation_ttfb_thresh,def=0" json:"capacity_estimation_ttfb_thresh,omitempty"`
	PkiProfileUuid                    *string                    `protobuf:"bytes,44,opt,name=pki_profile_uuid" json:"pki_profile_uuid,omitempty"`
	SslKeyAndCertificateUuid          *string                    `protobuf:"bytes,45,opt,name=ssl_key_and_certificate_uuid" json:"ssl_key_and_certificate_uuid,omitempty"`
	ServerAutoScale                   *bool                      `protobuf:"varint,46,opt,name=server_auto_scale,def=0" json:"server_auto_scale,omitempty"`
	PrstHdrName                       *string                    `protobuf:"bytes,47,opt,name=prst_hdr_name" json:"prst_hdr_name,omitempty"`
	ApicEpgName                       *string                    `protobuf:"bytes,49,opt,name=apic_epg_name" json:"apic_epg_name,omitempty"`
	AutoscaleNetworks                 []string                   `protobuf:"bytes,4,rep,name=autoscale_networks" json:"autoscale_networks,omitempty"`
	AutoscalePolicyUuid               *string                    `protobuf:"bytes,50,opt,name=autoscale_policy_uuid" json:"autoscale_policy_uuid,omitempty"`
	AutoscaleLaunchConfigUuid         *string                    `protobuf:"bytes,51,opt,name=autoscale_launch_config_uuid" json:"autoscale_launch_config_uuid,omitempty"`
	VrfUuid                           *string                    `protobuf:"bytes,52,opt,name=vrf_uuid" json:"vrf_uuid,omitempty"`
	IpaddrgroupUuid                   *string                    `protobuf:"bytes,53,opt,name=ipaddrgroup_uuid" json:"ipaddrgroup_uuid,omitempty"`
	FewestTasksFeedbackDelay          *uint32                    `protobuf:"varint,54,opt,name=fewest_tasks_feedback_delay,def=10" json:"fewest_tasks_feedback_delay,omitempty"`
	Enabled                           *bool                      `protobuf:"varint,55,opt,name=enabled,def=1" json:"enabled,omitempty"`
	MaxConnRatePerServer              *RateProfile               `protobuf:"bytes,57,opt,name=max_conn_rate_per_server" json:"max_conn_rate_per_server,omitempty"`
	// east_west is inherited from VS in cloud_connector and
	//  shouldn't be set explicitly.
	EastWest         *bool   `protobuf:"varint,58,opt,name=east_west" json:"east_west,omitempty"`
	CreatedBy        *string `protobuf:"bytes,59,opt,name=created_by" json:"created_by,omitempty"`
	CloudConfigCksum *string `protobuf:"bytes,60,opt,name=cloud_config_cksum" json:"cloud_config_cksum,omitempty"`
	Description      *string `protobuf:"bytes,99,opt,name=description" json:"description,omitempty"`
	TenantUuid       *string `protobuf:"bytes,100,opt,name=tenant_uuid" json:"tenant_uuid,omitempty"`
	CloudUuid        *string `protobuf:"bytes,101,opt,name=cloud_uuid,def=Default-Cloud" json:"cloud_uuid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Pool) Reset()                    { *m = Pool{} }
func (m *Pool) String() string            { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()               {}
func (*Pool) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{9} }

const Default_Pool_DefaultServerPort int32 = 80
const Default_Pool_GracefulDisableTimeout int32 = 1
const Default_Pool_ConnectionRampDuration int32 = 10
const Default_Pool_MaxConcurrentConnectionsPerServer int32 = 0
const Default_Pool_ServerCount int32 = 0
const Default_Pool_LbAlgorithm LbAlgorithm = LbAlgorithm_LB_ALGORITHM_LEAST_CONNECTIONS
const Default_Pool_LbAlgorithmHash LbAlgorithmConsistentHash = LbAlgorithmConsistentHash_LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS
const Default_Pool_InlineHealthMonitor bool = true
const Default_Pool_UseServicePort bool = false
const Default_Pool_PdActionType PoolDownActionEnum = PoolDownActionEnum_POOL_DOWN_ACTION_CLOSE_CONN
const Default_Pool_CapacityEstimation bool = false
const Default_Pool_CapacityEstimationTtfbThresh uint32 = 0
const Default_Pool_ServerAutoScale bool = false
const Default_Pool_FewestTasksFeedbackDelay uint32 = 10
const Default_Pool_Enabled bool = true
const Default_Pool_CloudUuid string = "Default-Cloud"

func (m *Pool) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *Pool) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Pool) GetDefaultServerPort() int32 {
	if m != nil && m.DefaultServerPort != nil {
		return *m.DefaultServerPort
	}
	return Default_Pool_DefaultServerPort
}

func (m *Pool) GetGracefulDisableTimeout() int32 {
	if m != nil && m.GracefulDisableTimeout != nil {
		return *m.GracefulDisableTimeout
	}
	return Default_Pool_GracefulDisableTimeout
}

func (m *Pool) GetConnectionRampDuration() int32 {
	if m != nil && m.ConnectionRampDuration != nil {
		return *m.ConnectionRampDuration
	}
	return Default_Pool_ConnectionRampDuration
}

func (m *Pool) GetMaxConcurrentConnectionsPerServer() int32 {
	if m != nil && m.MaxConcurrentConnectionsPerServer != nil {
		return *m.MaxConcurrentConnectionsPerServer
	}
	return Default_Pool_MaxConcurrentConnectionsPerServer
}

func (m *Pool) GetHealthMonitorUuids() []string {
	if m != nil {
		return m.HealthMonitorUuids
	}
	return nil
}

func (m *Pool) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

func (m *Pool) GetServerCount() int32 {
	if m != nil && m.ServerCount != nil {
		return *m.ServerCount
	}
	return Default_Pool_ServerCount
}

func (m *Pool) GetLbAlgorithm() LbAlgorithm {
	if m != nil && m.LbAlgorithm != nil {
		return *m.LbAlgorithm
	}
	return Default_Pool_LbAlgorithm
}

func (m *Pool) GetLbAlgorithmHash() LbAlgorithmConsistentHash {
	if m != nil && m.LbAlgorithmHash != nil {
		return *m.LbAlgorithmHash
	}
	return Default_Pool_LbAlgorithmHash
}

func (m *Pool) GetLbAlgorithmConsistentHashHdr() string {
	if m != nil && m.LbAlgorithmConsistentHashHdr != nil {
		return *m.LbAlgorithmConsistentHashHdr
	}
	return ""
}

func (m *Pool) GetNetworks() []*NetworkFilter {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *Pool) GetPlacementNetworks() []*PlacementNetwork {
	if m != nil {
		return m.PlacementNetworks
	}
	return nil
}

func (m *Pool) GetApplicationPersistenceProfileUuid() string {
	if m != nil && m.ApplicationPersistenceProfileUuid != nil {
		return *m.ApplicationPersistenceProfileUuid
	}
	return ""
}

func (m *Pool) GetSslProfileUuid() string {
	if m != nil && m.SslProfileUuid != nil {
		return *m.SslProfileUuid
	}
	return ""
}

func (m *Pool) GetX509Cert() []*PoolX509Certificate {
	if m != nil {
		return m.X509Cert
	}
	return nil
}

func (m *Pool) GetInlineHealthMonitor() bool {
	if m != nil && m.InlineHealthMonitor != nil {
		return *m.InlineHealthMonitor
	}
	return Default_Pool_InlineHealthMonitor
}

func (m *Pool) GetUseServicePort() bool {
	if m != nil && m.UseServicePort != nil {
		return *m.UseServicePort
	}
	return Default_Pool_UseServicePort
}

func (m *Pool) GetPdActionType() PoolDownActionEnum {
	if m != nil && m.PdActionType != nil {
		return *m.PdActionType
	}
	return Default_Pool_PdActionType
}

func (m *Pool) GetDownAction() *PoolDownAction {
	if m != nil {
		return m.DownAction
	}
	return nil
}

func (m *Pool) GetCapacityEstimation() bool {
	if m != nil && m.CapacityEstimation != nil {
		return *m.CapacityEstimation
	}
	return Default_Pool_CapacityEstimation
}

func (m *Pool) GetCapacityEstimationTtfbThresh() uint32 {
	if m != nil && m.CapacityEstimationTtfbThresh != nil {
		return *m.CapacityEstimationTtfbThresh
	}
	return Default_Pool_CapacityEstimationTtfbThresh
}

func (m *Pool) GetPkiProfileUuid() string {
	if m != nil && m.PkiProfileUuid != nil {
		return *m.PkiProfileUuid
	}
	return ""
}

func (m *Pool) GetSslKeyAndCertificateUuid() string {
	if m != nil && m.SslKeyAndCertificateUuid != nil {
		return *m.SslKeyAndCertificateUuid
	}
	return ""
}

func (m *Pool) GetServerAutoScale() bool {
	if m != nil && m.ServerAutoScale != nil {
		return *m.ServerAutoScale
	}
	return Default_Pool_ServerAutoScale
}

func (m *Pool) GetPrstHdrName() string {
	if m != nil && m.PrstHdrName != nil {
		return *m.PrstHdrName
	}
	return ""
}

func (m *Pool) GetApicEpgName() string {
	if m != nil && m.ApicEpgName != nil {
		return *m.ApicEpgName
	}
	return ""
}

func (m *Pool) GetAutoscaleNetworks() []string {
	if m != nil {
		return m.AutoscaleNetworks
	}
	return nil
}

func (m *Pool) GetAutoscalePolicyUuid() string {
	if m != nil && m.AutoscalePolicyUuid != nil {
		return *m.AutoscalePolicyUuid
	}
	return ""
}

func (m *Pool) GetAutoscaleLaunchConfigUuid() string {
	if m != nil && m.AutoscaleLaunchConfigUuid != nil {
		return *m.AutoscaleLaunchConfigUuid
	}
	return ""
}

func (m *Pool) GetVrfUuid() string {
	if m != nil && m.VrfUuid != nil {
		return *m.VrfUuid
	}
	return ""
}

func (m *Pool) GetIpaddrgroupUuid() string {
	if m != nil && m.IpaddrgroupUuid != nil {
		return *m.IpaddrgroupUuid
	}
	return ""
}

func (m *Pool) GetFewestTasksFeedbackDelay() uint32 {
	if m != nil && m.FewestTasksFeedbackDelay != nil {
		return *m.FewestTasksFeedbackDelay
	}
	return Default_Pool_FewestTasksFeedbackDelay
}

func (m *Pool) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return Default_Pool_Enabled
}

func (m *Pool) GetMaxConnRatePerServer() *RateProfile {
	if m != nil {
		return m.MaxConnRatePerServer
	}
	return nil
}

func (m *Pool) GetEastWest() bool {
	if m != nil && m.EastWest != nil {
		return *m.EastWest
	}
	return false
}

func (m *Pool) GetCreatedBy() string {
	if m != nil && m.CreatedBy != nil {
		return *m.CreatedBy
	}
	return ""
}

func (m *Pool) GetCloudConfigCksum() string {
	if m != nil && m.CloudConfigCksum != nil {
		return *m.CloudConfigCksum
	}
	return ""
}

func (m *Pool) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Pool) GetTenantUuid() string {
	if m != nil && m.TenantUuid != nil {
		return *m.TenantUuid
	}
	return ""
}

func (m *Pool) GetCloudUuid() string {
	if m != nil && m.CloudUuid != nil {
		return *m.CloudUuid
	}
	return Default_Pool_CloudUuid
}

type PoolServerState struct {
	State            *PoolServerStateEnum `protobuf:"varint,1,req,name=state,enum=PoolServerStateEnum" json:"state,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *PoolServerState) Reset()                    { *m = PoolServerState{} }
func (m *PoolServerState) String() string            { return proto.CompactTextString(m) }
func (*PoolServerState) ProtoMessage()               {}
func (*PoolServerState) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{10} }

func (m *PoolServerState) GetState() PoolServerStateEnum {
	if m != nil && m.State != nil {
		return *m.State
	}
	return PoolServerStateEnum_POOL_SERVER_UP
}

type ServerUpdateReq struct {
	PoolUuid         *string              `protobuf:"bytes,1,req,name=pool_uuid" json:"pool_uuid,omitempty"`
	ServerIp         *IpAddr              `protobuf:"bytes,2,req,name=server_ip" json:"server_ip,omitempty"`
	ServerPort       *int32               `protobuf:"varint,3,req,name=server_port" json:"server_port,omitempty"`
	ServerState      *PoolServerStateEnum `protobuf:"varint,4,req,name=server_state,enum=PoolServerStateEnum" json:"server_state,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ServerUpdateReq) Reset()                    { *m = ServerUpdateReq{} }
func (m *ServerUpdateReq) String() string            { return proto.CompactTextString(m) }
func (*ServerUpdateReq) ProtoMessage()               {}
func (*ServerUpdateReq) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{11} }

func (m *ServerUpdateReq) GetPoolUuid() string {
	if m != nil && m.PoolUuid != nil {
		return *m.PoolUuid
	}
	return ""
}

func (m *ServerUpdateReq) GetServerIp() *IpAddr {
	if m != nil {
		return m.ServerIp
	}
	return nil
}

func (m *ServerUpdateReq) GetServerPort() int32 {
	if m != nil && m.ServerPort != nil {
		return *m.ServerPort
	}
	return 0
}

func (m *ServerUpdateReq) GetServerState() PoolServerStateEnum {
	if m != nil && m.ServerState != nil {
		return *m.ServerState
	}
	return PoolServerStateEnum_POOL_SERVER_UP
}

type ServerState struct {
	ServerIp         *IpAddr              `protobuf:"bytes,1,req,name=server_ip" json:"server_ip,omitempty"`
	ServerPort       *int32               `protobuf:"varint,2,req,name=server_port" json:"server_port,omitempty"`
	ServerState      *PoolServerStateEnum `protobuf:"varint,3,req,name=server_state,enum=PoolServerStateEnum" json:"server_state,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ServerState) Reset()                    { *m = ServerState{} }
func (m *ServerState) String() string            { return proto.CompactTextString(m) }
func (*ServerState) ProtoMessage()               {}
func (*ServerState) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{12} }

func (m *ServerState) GetServerIp() *IpAddr {
	if m != nil {
		return m.ServerIp
	}
	return nil
}

func (m *ServerState) GetServerPort() int32 {
	if m != nil && m.ServerPort != nil {
		return *m.ServerPort
	}
	return 0
}

func (m *ServerState) GetServerState() PoolServerStateEnum {
	if m != nil && m.ServerState != nil {
		return *m.ServerState
	}
	return PoolServerStateEnum_POOL_SERVER_UP
}

type ServerStateUpdateInfo struct {
	PoolUuid         *string        `protobuf:"bytes,1,req,name=pool_uuid" json:"pool_uuid,omitempty"`
	Servers          []*ServerState `protobuf:"bytes,2,rep,name=servers" json:"servers,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ServerStateUpdateInfo) Reset()                    { *m = ServerStateUpdateInfo{} }
func (m *ServerStateUpdateInfo) String() string            { return proto.CompactTextString(m) }
func (*ServerStateUpdateInfo) ProtoMessage()               {}
func (*ServerStateUpdateInfo) Descriptor() ([]byte, []int) { return fileDescriptor77, []int{13} }

func (m *ServerStateUpdateInfo) GetPoolUuid() string {
	if m != nil && m.PoolUuid != nil {
		return *m.PoolUuid
	}
	return ""
}

func (m *ServerStateUpdateInfo) GetServers() []*ServerState {
	if m != nil {
		return m.Servers
	}
	return nil
}

func init() {
	proto.RegisterType((*DiscoveredNetwork)(nil), "DiscoveredNetwork")
	proto.RegisterType((*Server)(nil), "Server")
	proto.RegisterType((*NetworkFilter)(nil), "NetworkFilter")
	proto.RegisterType((*PlacementNetwork)(nil), "PlacementNetwork")
	proto.RegisterType((*PoolDownActionHTTPRedirect)(nil), "PoolDownActionHTTPRedirect")
	proto.RegisterType((*PoolDownActionHTTPLocalResponse)(nil), "PoolDownActionHTTPLocalResponse")
	proto.RegisterType((*PoolDownActionBackupPool)(nil), "PoolDownActionBackupPool")
	proto.RegisterType((*PoolDownAction)(nil), "PoolDownAction")
	proto.RegisterType((*PoolX509Certificate)(nil), "PoolX509Certificate")
	proto.RegisterType((*Pool)(nil), "Pool")
	proto.RegisterType((*PoolServerState)(nil), "PoolServerState")
	proto.RegisterType((*ServerUpdateReq)(nil), "ServerUpdateReq")
	proto.RegisterType((*ServerState)(nil), "ServerState")
	proto.RegisterType((*ServerStateUpdateInfo)(nil), "ServerStateUpdateInfo")
	proto.RegisterEnum("LbAlgorithm", LbAlgorithm_name, LbAlgorithm_value)
	proto.RegisterEnum("LbAlgorithmConsistentHash", LbAlgorithmConsistentHash_name, LbAlgorithmConsistentHash_value)
	proto.RegisterEnum("LbFailure", LbFailure_name, LbFailure_value)
	proto.RegisterEnum("PoolDownHttpStatusCode", PoolDownHttpStatusCode_name, PoolDownHttpStatusCode_value)
	proto.RegisterEnum("PoolDownActionEnum", PoolDownActionEnum_name, PoolDownActionEnum_value)
	proto.RegisterEnum("PoolServerStateEnum", PoolServerStateEnum_name, PoolServerStateEnum_value)
}

var fileDescriptor77 = []byte{
	// 5341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x5a, 0x5f, 0x6c, 0x1b, 0x67,
	0x72, 0x2f, 0x65, 0xc9, 0x96, 0x3e, 0x59, 0x8e, 0xbc, 0xb6, 0x73, 0x8c, 0x12, 0xc5, 0x1b, 0xe5,
	0x8f, 0x6d, 0xc5, 0x5a, 0x4b, 0xb2, 0xe5, 0xbb, 0xe8, 0x2e, 0x68, 0x49, 0x8a, 0x8e, 0x18, 0x53,
	0x22, 0x8f, 0xa4, 0xe4, 0xb4, 0x57, 0x60, 0xb3, 0x5c, 0x2e, 0xc5, 0x8d, 0xc9, 0x5d, 0x66, 0x77,
	0x29, 0x99, 0x2d, 0x0a, 0x5c, 0xd3, 0x43, 0x5b, 0xdc, 0xb5, 0x40, 0x7a, 0xe8, 0x35, 0x69, 0xfa,
	0x17, 0xd7, 0xc2, 0x39, 0x5c, 0xfb, 0x50, 0xf4, 0x80, 0x03, 0x7a, 0xc1, 0x15, 0x45, 0xfb, 0x92,
	0x43, 0xdb, 0x97, 0x7b, 0x29, 0x5a, 0xa0, 0x7d, 0xee, 0x43, 0x9f, 0xfa, 0xd2, 0xd7, 0xfe, 0x66,
	0xbe, 0x6f, 0xc9, 0xa5, 0x28, 0x2b, 0x39, 0x24, 0x30, 0xc4, 0xdd, 0x6f, 0x67, 0xe6, 0xfb, 0x66,
	0xe6, 0x37, 0xbf, 0x99, 0x5d, 0x21, 0xba, 0xbe, 0xdf, 0x36, 0xba, 0x81, 0x1f, 0xf9, 0x0b, 0xe7,
	0x6d, 0xbf, 0xd3, 0xf1, 0x3d, 0xf5, 0x6b, 0xce, 0xef, 0x46, 0xae, 0xef, 0x85, 0xea, 0xa7, 0x08,
	0xac, 0xc8, 0x91, 0x7f, 0x2f, 0xfd, 0x71, 0x4a, 0x5c, 0xdc, 0x72, 0x43, 0xdb, 0x3f, 0x74, 0x02,
	0xa7, 0xb1, 0xeb, 0x44, 0x47, 0x7e, 0xf0, 0x50, 0xdb, 0x12, 0xe7, 0x3d, 0xf9, 0xa7, 0xd9, 0xeb,
	0xb9, 0x8d, 0x74, 0x4a, 0x9f, 0xb8, 0x3e, 0x93, 0x35, 0xbe, 0xfb, 0x78, 0xf1, 0xea, 0x70, 0xb1,
	0xae, 0x96, 0xe8, 0x4d, 0x3f, 0xd0, 0xa3, 0x96, 0x1b, 0xea, 0x85, 0xb2, 0xf1, 0xde, 0xc7, 0x8b,
	0xe7, 0x62, 0x29, 0x19, 0x71, 0x36, 0xec, 0xd5, 0xb1, 0x2a, 0x3d, 0xa1, 0x9f, 0xb9, 0x3e, 0xbb,
	0x3e, 0x67, 0x14, 0xba, 0x99, 0x46, 0x23, 0x28, 0x07, 0x4e, 0xd3, 0x7d, 0x94, 0x5d, 0x82, 0xb8,
	0xe7, 0x13, 0xe2, 0xe4, 0xda, 0x11, 0x69, 0x4b, 0xbf, 0x33, 0x27, 0xce, 0x56, 0x9d, 0x00, 0x0b,
	0x34, 0x4b, 0x4c, 0xb8, 0x5d, 0xb6, 0x64, 0x76, 0xfd, 0x9c, 0x92, 0x94, 0x2d, 0x42, 0xc6, 0x76,
	0xa1, 0xac, 0xd3, 0x0f, 0x27, 0x0c, 0x75, 0xbf, 0x89, 0x67, 0x1d, 0x3d, 0xe4, 0x47, 0x0c, 0x5d,
	0xaf, 0x38, 0xef, 0xf6, 0x5c, 0x12, 0xee, 0xf2, 0x8d, 0xc0, 0xd1, 0x21, 0xd8, 0xf3, 0x75, 0x2c,
	0xf6, 0xdb, 0x87, 0x56, 0xbd, 0xed, 0xe8, 0x2d, 0x3f, 0x8c, 0x74, 0xcf, 0xea, 0x38, 0x86, 0xf6,
	0xd7, 0x29, 0x31, 0xd9, 0xf5, 0x03, 0xb2, 0x37, 0x75, 0x7d, 0x2a, 0xfb, 0x27, 0x29, 0x48, 0x77,
	0x4b, 0x7c, 0x76, 0x56, 0xbb, 0xdd, 0xd7, 0xc3, 0xae, 0x63, 0xbb, 0xcd, 0x7e, 0x42, 0x45, 0xa8,
	0xd3, 0x7a, 0xdd, 0xeb, 0x75, 0xea, 0xac, 0xaf, 0x46, 0x86, 0x1f, 0xb9, 0xed, 0xb6, 0x4e, 0x9b,
	0x0a, 0xdc, 0x86, 0xc3, 0x8b, 0xc9, 0x33, 0xd7, 0x42, 0xbd, 0xe1, 0x34, 0xad, 0x5e, 0x3b, 0x52,
	0xcf, 0xca, 0x47, 0xad, 0x28, 0x0a, 0xdc, 0x7a, 0x0f, 0x0e, 0xf9, 0xdb, 0xc7, 0x8b, 0xe7, 0xd6,
	0x56, 0xee, 0x6e, 0x6c, 0xdc, 0xde, 0xf8, 0x8f, 0xc7, 0x8b, 0x2f, 0xfc, 0xaa, 0xbe, 0xba, 0xa9,
	0x5f, 0xeb, 0x85, 0x8e, 0x5e, 0xb7, 0xec, 0x87, 0x8e, 0xd7, 0x90, 0xeb, 0x5d, 0x4f, 0x4a, 0xd3,
	0x7f, 0x0d, 0x27, 0x32, 0x4d, 0xc6, 0x93, 0xed, 0xe9, 0x33, 0xb0, 0x78, 0x26, 0x5b, 0x82, 0xc1,
	0xf7, 0xb7, 0x76, 0xab, 0xc9, 0xfd, 0xd1, 0xed, 0xb1, 0x73, 0xd9, 0xb1, 0xfa, 0x7a, 0xdd, 0xd1,
	0x21, 0xbd, 0xc1, 0x12, 0xdb, 0x96, 0x3d, 0x58, 0x84, 0xe3, 0xb4, 0xe4, 0x71, 0x1a, 0xda, 0x7b,
	0x29, 0x71, 0xce, 0xf1, 0x48, 0x4e, 0x23, 0x3d, 0x09, 0x15, 0xd3, 0x9b, 0x93, 0x51, 0xd0, 0x73,
	0xb2, 0x0f, 0xa1, 0xe8, 0x20, 0xcf, 0x37, 0x6e, 0xea, 0xf0, 0x21, 0x6b, 0x82, 0xe3, 0xde, 0x08,
	0x20, 0xa8, 0xd9, 0x6b, 0x0f, 0xae, 0x35, 0x9c, 0xc8, 0x09, 0x3a, 0xae, 0xe7, 0x90, 0x07, 0x3c,
	0xe7, 0x88, 0x16, 0x39, 0x8f, 0xdc, 0x30, 0x72, 0xbd, 0x03, 0xdd, 0xf6, 0x3d, 0xcf, 0xb1, 0x39,
	0x34, 0xf5, 0xc8, 0x4f, 0x58, 0xa8, 0x5b, 0xf0, 0x14, 0x8e, 0xdc, 0x3f, 0x72, 0x1a, 0x86, 0xf6,
	0xfd, 0x94, 0x98, 0x42, 0xc8, 0xba, 0x7e, 0x7a, 0x8a, 0xfc, 0xb2, 0x99, 0x5a, 0xcb, 0x7e, 0x40,
	0xae, 0xf9, 0x66, 0xaa, 0xa4, 0x0e, 0x39, 0xe4, 0x67, 0xe3, 0xe3, 0xe5, 0xb5, 0xb4, 0x9b, 0x35,
	0x8e, 0x80, 0x46, 0xcf, 0x56, 0x0b, 0xba, 0x4e, 0x60, 0x3b, 0x5e, 0x64, 0x1d, 0x48, 0xaf, 0x14,
	0xb3, 0xd0, 0x71, 0xe0, 0x07, 0x6e, 0xd4, 0xea, 0xe8, 0x47, 0x7e, 0xaf, 0x8d, 0x23, 0x76, 0xed,
	0x87, 0x49, 0x3b, 0x70, 0x36, 0x81, 0xd3, 0x26, 0x79, 0x1e, 0x59, 0xe8, 0x46, 0x70, 0xb8, 0x03,
	0xb7, 0x93, 0x60, 0xcb, 0x3b, 0xe0, 0x70, 0x5a, 0x5b, 0x59, 0x5f, 0x25, 0xe7, 0x4d, 0xd2, 0x1f,
	0xda, 0x8b, 0xe2, 0xdc, 0x61, 0x47, 0x66, 0xcd, 0x59, 0xf6, 0x89, 0x86, 0x94, 0xb8, 0xb0, 0x5f,
	0xd8, 0x39, 0x08, 0xf6, 0x77, 0x2a, 0x3d, 0x2f, 0x72, 0x3b, 0x0e, 0x2d, 0xf2, 0x8e, 0xe4, 0xa2,
	0x73, 0xc7, 0x16, 0xed, 0x3e, 0x88, 0x17, 0x55, 0xc5, 0x17, 0x1a, 0x83, 0xec, 0x30, 0x47, 0xf2,
	0x71, 0x1a, 0xf9, 0x34, 0x93, 0x5d, 0xc7, 0x19, 0xbc, 0x78, 0x5a, 0x3e, 0x2a, 0x77, 0x27, 0x73,
	0x72, 0x5f, 0xcc, 0x39, 0x8f, 0xe0, 0x12, 0x04, 0xb4, 0x14, 0x35, 0xc3, 0xfa, 0x7f, 0x1e, 0xa2,
	0xbe, 0xbc, 0xb7, 0x57, 0xd8, 0xd2, 0x71, 0x9a, 0x50, 0xdf, 0xec, 0x93, 0x7f, 0xf6, 0x77, 0xe8,
	0x00, 0x4a, 0x5d, 0xc7, 0xab, 0x46, 0x88, 0x41, 0xdd, 0x42, 0x10, 0xfa, 0x94, 0x46, 0x7a, 0x2c,
	0x03, 0x2e, 0xec, 0x74, 0x11, 0xbc, 0x5a, 0x59, 0x5c, 0x4c, 0x18, 0xab, 0xd2, 0x5e, 0x9c, 0x94,
	0xf6, 0xaf, 0x40, 0xd5, 0xd2, 0x29, 0x69, 0xaf, 0x8c, 0xd6, 0xfe, 0x2e, 0x25, 0x2e, 0xe0, 0x0f,
	0x98, 0x12, 0xef, 0x3d, 0x3d, 0xcb, 0x11, 0x38, 0xd5, 0xb4, 0xda, 0xa1, 0x93, 0xfd, 0x43, 0x0a,
	0x81, 0xdf, 0x4f, 0xed, 0xf3, 0x92, 0xd8, 0x5f, 0x75, 0xa7, 0xed, 0x7b, 0x07, 0x1c, 0x4d, 0x96,
	0xde, 0x18, 0x3f, 0x1a, 0x28, 0x09, 0x1c, 0xcb, 0x6e, 0x71, 0x6c, 0x1e, 0xba, 0xd6, 0x89, 0xab,
	0x0c, 0x5d, 0x09, 0x1d, 0x2e, 0x8d, 0x9f, 0x77, 0x43, 0xef, 0x5a, 0xc4, 0x01, 0x32, 0x3c, 0x95,
	0x8e, 0xe5, 0x21, 0xa2, 0x3a, 0x38, 0xb6, 0x78, 0x99, 0xe6, 0x89, 0x4b, 0xe3, 0xae, 0x0b, 0xd3,
	0xe7, 0xf9, 0x3c, 0x34, 0x63, 0x0c, 0x70, 0xb3, 0xaf, 0x63, 0x2f, 0xaf, 0x8d, 0xbb, 0x12, 0xd1,
	0x16, 0xf8, 0x87, 0x6e, 0x83, 0x9c, 0xa1, 0x8c, 0x71, 0xdb, 0x6e, 0xd4, 0xe7, 0xd3, 0x52, 0x5b,
	0x06, 0x4c, 0x6a, 0x5f, 0x15, 0x57, 0x64, 0xc6, 0x3b, 0xa6, 0xbc, 0x6a, 0xd6, 0xfb, 0x66, 0xc3,
	0x0b, 0xd3, 0x73, 0xc9, 0x13, 0x7b, 0x15, 0x4a, 0xae, 0x65, 0x7a, 0x51, 0x0c, 0x7f, 0x71, 0x94,
	0x5f, 0x23, 0xac, 0x05, 0x16, 0x90, 0x16, 0x02, 0x0f, 0x42, 0x0c, 0xed, 0x4d, 0x71, 0xbe, 0x1b,
	0x84, 0x91, 0xd9, 0x6a, 0x04, 0xe6, 0xa1, 0xd5, 0x4e, 0x5f, 0xe0, 0x38, 0xb9, 0x03, 0x11, 0xaf,
	0x6e, 0x3b, 0x56, 0x03, 0x8a, 0x71, 0xb5, 0xe7, 0xb0, 0x25, 0x76, 0x2f, 0x8c, 0xfc, 0x8e, 0xde,
	0x92, 0xd7, 0x91, 0x65, 0x21, 0x12, 0xdc, 0xf1, 0x6c, 0xc7, 0xf8, 0xef, 0xc7, 0x8b, 0x5f, 0x4f,
	0x69, 0xb7, 0xc4, 0x6c, 0xc7, 0xb2, 0x4d, 0x85, 0x2a, 0xe9, 0xa7, 0x58, 0xd4, 0x02, 0x44, 0x3d,
	0xbd, 0x93, 0xc9, 0xc5, 0x60, 0x43, 0x09, 0x1b, 0xfb, 0x7e, 0x0d, 0x95, 0x23, 0x42, 0xd6, 0xd9,
	0xe9, 0xf9, 0xe4, 0x06, 0xf8, 0x91, 0x02, 0x96, 0xf1, 0x3d, 0x86, 0xe4, 0xb6, 0x63, 0x05, 0x1e,
	0x81, 0xc4, 0xbe, 0x98, 0x55, 0x5b, 0xf7, 0xfc, 0x86, 0x93, 0xbe, 0xc8, 0x3a, 0x32, 0x78, 0xe0,
	0xf5, 0x6d, 0x85, 0x91, 0x31, 0xbe, 0xd1, 0x7d, 0xfd, 0x88, 0x8b, 0x41, 0x22, 0xd3, 0x11, 0xeb,
	0xb4, 0x13, 0x1f, 0xf0, 0x00, 0xb4, 0xa2, 0x30, 0x09, 0x09, 0x58, 0x36, 0x67, 0x3f, 0x02, 0x2c,
	0xbb, 0xdd, 0x9b, 0x04, 0xbe, 0x4b, 0x65, 0x31, 0xa7, 0x3c, 0x76, 0xcf, 0x6d, 0x23, 0x03, 0xb4,
	0xeb, 0x27, 0x16, 0xca, 0x93, 0xb2, 0xf9, 0x8a, 0x98, 0x53, 0xf6, 0x35, 0xf9, 0x51, 0x89, 0xd8,
	0x4b, 0x35, 0x31, 0x5f, 0x26, 0xf0, 0xa5, 0xf0, 0x89, 0x73, 0xf4, 0x85, 0x13, 0x85, 0xce, 0x26,
	0xd3, 0x78, 0x31, 0x51, 0x5a, 0x53, 0x63, 0x39, 0xb6, 0xf4, 0x49, 0x4a, 0x2c, 0x94, 0x51, 0x25,
	0xb6, 0xfc, 0x23, 0x2f, 0xc3, 0x00, 0xbb, 0x5d, 0xab, 0x95, 0x01, 0x85, 0xa8, 0x85, 0x76, 0xa4,
	0xbd, 0x2c, 0xa6, 0xb9, 0xfa, 0xdb, 0x7e, 0x1b, 0xc2, 0x53, 0xd7, 0x2f, 0xe0, 0x79, 0x5a, 0x50,
	0x56, 0x17, 0x37, 0x27, 0xe9, 0x97, 0x76, 0x5e, 0x4c, 0x52, 0x7d, 0x81, 0x0a, 0xe8, 0xa7, 0x5f,
	0x5d, 0x2b, 0x6a, 0x49, 0xbb, 0xb5, 0x39, 0x31, 0xf5, 0x6e, 0xcf, 0x09, 0xfa, 0x5c, 0x15, 0x66,
	0xb4, 0xfb, 0x38, 0x7d, 0x38, 0xa5, 0x17, 0x9a, 0x36, 0x9d, 0xfe, 0x14, 0x0b, 0xfd, 0x82, 0x91,
	0xd4, 0x5a, 0xe5, 0xfb, 0x39, 0xdc, 0xde, 0x5c, 0xa4, 0xeb, 0x66, 0x25, 0xbf, 0x55, 0xa8, 0xe4,
	0x73, 0x35, 0xb3, 0x5a, 0xcb, 0xd4, 0xf6, 0xaa, 0x66, 0xae, 0xb4, 0x95, 0x37, 0x6f, 0xaf, 0xae,
	0x2f, 0xfd, 0x6e, 0x4a, 0x5c, 0x1d, 0xb7, 0xbe, 0xe8, 0xc3, 0xe3, 0x15, 0x27, 0xec, 0xa2, 0x5a,
	0x38, 0x5a, 0x71, 0x54, 0x61, 0x4a, 0x29, 0x8c, 0x1f, 0xdb, 0x8e, 0xa2, 0x6e, 0x42, 0xe1, 0xf3,
	0xe5, 0x52, 0xa9, 0x68, 0x6e, 0x95, 0x1e, 0xec, 0x9a, 0xac, 0x3a, 0xa9, 0x71, 0x63, 0xf5, 0xb6,
	0xf6, 0x9c, 0x98, 0x84, 0x57, 0x1c, 0x75, 0x98, 0x17, 0x8c, 0x81, 0x3e, 0xb8, 0xd9, 0x59, 0xfa,
	0xf1, 0x84, 0x48, 0x8f, 0xda, 0x93, 0x45, 0xde, 0xf7, 0xba, 0x74, 0x4d, 0xfb, 0x9a, 0x98, 0xaf,
	0xf3, 0x2f, 0x93, 0xca, 0x72, 0xd2, 0x61, 0x99, 0x6f, 0xa2, 0x26, 0xd0, 0x1a, 0x04, 0xe1, 0x46,
	0x95, 0xa9, 0x83, 0xab, 0x0a, 0x11, 0x23, 0xad, 0x0a, 0x47, 0x5a, 0xa1, 0x5b, 0x36, 0x17, 0x44,
	0x2b, 0xd4, 0xa5, 0x30, 0xae, 0xf1, 0x86, 0xf6, 0x4f, 0x83, 0xca, 0x47, 0x96, 0xcd, 0x65, 0x7f,
	0x40, 0x98, 0x77, 0x50, 0x89, 0xeb, 0x5b, 0x14, 0x58, 0xcd, 0xa6, 0x6b, 0x53, 0x11, 0x6a, 0xb8,
	0x08, 0xad, 0x08, 0xc8, 0xa1, 0xea, 0x68, 0x42, 0x8c, 0xee, 0x1c, 0x3a, 0x9e, 0x22, 0x40, 0xc0,
	0x13, 0xb7, 0x63, 0x05, 0x7d, 0x79, 0x03, 0xcf, 0xf5, 0xba, 0x86, 0x24, 0x2d, 0xf8, 0x9f, 0x52,
	0x39, 0x73, 0x2b, 0xab, 0x47, 0x0e, 0x97, 0x67, 0x94, 0xb4, 0xa9, 0xb5, 0x95, 0xb5, 0xd5, 0x55,
	0xb0, 0x91, 0x2f, 0x83, 0x8d, 0xe8, 0xa0, 0x23, 0xbb, 0xbe, 0xd4, 0x14, 0xaa, 0x82, 0x98, 0x54,
	0x03, 0x0d, 0xe3, 0xd2, 0xc1, 0x53, 0x96, 0x7e, 0x38, 0x21, 0x2e, 0x8c, 0x9e, 0x9f, 0xe6, 0x88,
	0xe9, 0x40, 0xc5, 0x45, 0xfa, 0x3a, 0x1f, 0xfa, 0xb3, 0xc6, 0x93, 0x03, 0x36, 0x7b, 0x17, 0xdb,
	0x5e, 0xdf, 0xab, 0x14, 0x75, 0xc6, 0x2e, 0x79, 0x51, 0xa7, 0x15, 0xf8, 0x85, 0x30, 0x0c, 0x23,
	0x46, 0x7c, 0xe4, 0xb4, 0x37, 0x50, 0xdd, 0x80, 0x24, 0xed, 0x1d, 0x31, 0xd3, 0x26, 0x37, 0x9a,
	0x41, 0xd8, 0x4d, 0xdf, 0x60, 0x3d, 0xba, 0xf1, 0x19, 0xa1, 0x95, 0xdd, 0x80, 0xb2, 0x35, 0xbe,
	0x44, 0x20, 0xc0, 0xd7, 0x48, 0xfa, 0xa8, 0xba, 0x71, 0x5d, 0x5f, 0x15, 0xb3, 0x89, 0x40, 0x48,
	0x2f, 0xb3, 0xb6, 0x67, 0x8c, 0x27, 0x05, 0x4e, 0xf6, 0x05, 0xa8, 0x59, 0x94, 0xbf, 0x65, 0x0c,
	0x8c, 0x89, 0x5c, 0xfa, 0x9b, 0x09, 0x71, 0x89, 0x6e, 0xbd, 0xb5, 0xb1, 0xfa, 0x5a, 0x0e, 0xee,
	0x45, 0x00, 0xd9, 0xa0, 0xee, 0xda, 0xdb, 0xc8, 0x5f, 0xa7, 0x63, 0xda, 0xb8, 0xa4, 0x62, 0x6d,
	0x17, 0xc2, 0xee, 0x95, 0xf3, 0x3b, 0xfa, 0xf5, 0x72, 0xe0, 0x1e, 0x5a, 0x76, 0x7f, 0xc5, 0xf1,
	0x5a, 0x16, 0x10, 0xb8, 0x01, 0xaa, 0xe7, 0xb6, 0x6f, 0xe8, 0x40, 0x63, 0x24, 0x42, 0x43, 0xb7,
	0x87, 0x62, 0xe2, 0x00, 0x8c, 0xe9, 0xa5, 0x02, 0xdf, 0xf7, 0x3f, 0x5c, 0x4a, 0x69, 0x3f, 0x44,
	0xe0, 0xb9, 0xc8, 0x2d, 0x8b, 0x03, 0x6f, 0x00, 0xc0, 0x7f, 0x46, 0xf1, 0xf7, 0x51, 0xea, 0x5e,
	0xdb, 0x3a, 0x60, 0x3a, 0xe4, 0x35, 0xa4, 0x24, 0x15, 0x5c, 0x49, 0xe1, 0xd8, 0x83, 0xa5, 0x27,
	0x8c, 0xd6, 0x51, 0x78, 0x5a, 0xc4, 0xb5, 0xfa, 0x2a, 0xe0, 0x90, 0x0c, 0x20, 0x5c, 0xb4, 0x55,
	0xa7, 0x0b, 0x7f, 0x5a, 0x14, 0xbc, 0x44, 0x30, 0x72, 0x99, 0xa4, 0x1c, 0xf0, 0x81, 0x16, 0x33,
	0x33, 0xcf, 0x3f, 0x22, 0xc6, 0x0a, 0x80, 0x6e, 0xba, 0x07, 0x3d, 0xaa, 0x91, 0x51, 0x2b, 0xf0,
	0x7b, 0x07, 0x2d, 0xbd, 0x7c, 0xbf, 0xa0, 0x03, 0xb9, 0x28, 0x81, 0x8d, 0xa5, 0x6f, 0xdd, 0x12,
	0x9c, 0x73, 0xda, 0x92, 0x98, 0x4c, 0xe4, 0xe2, 0x65, 0xd8, 0x3d, 0x9f, 0xcc, 0x3a, 0x3a, 0x67,
	0xed, 0x9a, 0x98, 0x64, 0xf2, 0xcc, 0x00, 0x97, 0x7d, 0x06, 0x6b, 0xae, 0xd4, 0x5a, 0xa3, 0x8c,
	0x59, 0xe6, 0xe1, 0x7f, 0xa6, 0x50, 0xd0, 0x25, 0xbb, 0x8c, 0x0b, 0x2c, 0xf7, 0x09, 0x92, 0x8f,
	0x4e, 0x7c, 0x69, 0x35, 0xfb, 0x09, 0x9d, 0xcc, 0x5f, 0xa5, 0x6a, 0x2a, 0x23, 0x43, 0x62, 0x03,
	0x38, 0xa1, 0xb8, 0x4b, 0xe0, 0x96, 0x80, 0xb8, 0x3c, 0x53, 0x9c, 0x06, 0x27, 0x98, 0x64, 0x95,
	0xc9, 0x5e, 0xa0, 0xe7, 0xb5, 0xb9, 0x10, 0x4a, 0x56, 0x0b, 0x22, 0xa6, 0xd7, 0x93, 0xcd, 0x06,
	0xea, 0xb4, 0xec, 0x40, 0xa0, 0xe0, 0x58, 0xef, 0xa0, 0x93, 0xdd, 0xd5, 0x6a, 0x51, 0xb7, 0x5b,
	0x8e, 0xfd, 0xb0, 0xee, 0x3f, 0xd2, 0x25, 0x6b, 0x0f, 0xf5, 0xcc, 0xa1, 0x3b, 0x34, 0x84, 0xc2,
	0x20, 0xe8, 0x73, 0x43, 0x93, 0x6c, 0x37, 0xb4, 0xff, 0x4d, 0x89, 0xf4, 0x81, 0xa2, 0xee, 0x66,
	0x43, 0x52, 0x77, 0x93, 0xca, 0x96, 0xdf, 0x8b, 0x40, 0x36, 0x15, 0xe9, 0xfe, 0x17, 0xda, 0xe3,
	0x9f, 0xa7, 0xf6, 0x42, 0x09, 0x33, 0xf1, 0x03, 0xa8, 0xc2, 0xea, 0x11, 0x78, 0x3c, 0xee, 0x30,
	0xf6, 0xdd, 0x20, 0xea, 0x21, 0x83, 0xe8, 0xb7, 0x8b, 0xde, 0xe2, 0xc8, 0x22, 0xee, 0x2c, 0x49,
	0x9e, 0x13, 0x6f, 0x83, 0xe4, 0x40, 0x09, 0xfc, 0x8a, 0x1b, 0x38, 0x1b, 0xee, 0x14, 0x2c, 0x46,
	0x42, 0x5a, 0x75, 0x62, 0x9f, 0x30, 0xda, 0x28, 0x10, 0x9c, 0x5a, 0x11, 0xb7, 0x0b, 0xca, 0x86,
	0x86, 0xf1, 0x7d, 0xc0, 0x2e, 0xe4, 0x84, 0x92, 0x92, 0xdf, 0x25, 0xf8, 0xba, 0xa4, 0xe0, 0xab,
	0xd0, 0xe9, 0x00, 0x3d, 0x10, 0x56, 0xd4, 0x3e, 0xd1, 0xa6, 0x87, 0x92, 0xcd, 0xc0, 0xea, 0x74,
	0xcd, 0x46, 0x8f, 0xe1, 0xd6, 0x63, 0x5a, 0x0c, 0xcf, 0xae, 0xad, 0x66, 0xff, 0x99, 0x76, 0xfd,
	0xa7, 0xa9, 0x2d, 0x75, 0x87, 0xf7, 0x70, 0xd4, 0x72, 0xed, 0x16, 0xb7, 0x33, 0x49, 0xd3, 0xd8,
	0xc9, 0x88, 0x51, 0x1c, 0x4c, 0xa3, 0xc7, 0xec, 0x84, 0x64, 0x62, 0x93, 0xc8, 0x70, 0x26, 0xa4,
	0xca, 0x09, 0x88, 0x76, 0x84, 0x07, 0x6e, 0xd7, 0x39, 0x80, 0x23, 0xdd, 0xf7, 0xda, 0xe0, 0x1c,
	0xe8, 0x29, 0x70, 0xb4, 0xd4, 0x3c, 0x91, 0x8a, 0x64, 0x73, 0x92, 0xd8, 0x25, 0xf8, 0x0e, 0xda,
	0xd5, 0xa1, 0x56, 0x64, 0x6f, 0xa8, 0xf6, 0x1c, 0x3a, 0x76, 0x28, 0x31, 0xfb, 0xf6, 0xea, 0x13,
	0x37, 0x8d, 0xc4, 0x7e, 0xb9, 0x63, 0x3d, 0x42, 0xd5, 0xf4, 0xec, 0x5e, 0x10, 0xc0, 0x0e, 0x33,
	0xb1, 0x05, 0x13, 0xdc, 0x4d, 0x05, 0x38, 0xc8, 0x3b, 0xbb, 0x7d, 0x35, 0xfb, 0x1b, 0x74, 0x00,
	0x35, 0x0a, 0x30, 0x3c, 0xe8, 0x76, 0x7a, 0x1d, 0xd5, 0xee, 0x52, 0x8a, 0x0c, 0xc5, 0x8c, 0x9c,
	0x84, 0x6a, 0xdd, 0x68, 0xd7, 0xc4, 0x5a, 0xe3, 0x8d, 0x1f, 0x61, 0x33, 0x68, 0x28, 0x06, 0x79,
	0x05, 0xab, 0xa7, 0x6c, 0x1f, 0x04, 0x09, 0x66, 0x4f, 0x6f, 0xac, 0x52, 0xad, 0x61, 0xcb, 0xb5,
	0xd8, 0x72, 0xe4, 0xba, 0xe7, 0x4a, 0xc3, 0xbf, 0x75, 0x46, 0x5c, 0x06, 0xc1, 0x6c, 0x47, 0x2d,
	0xb3, 0xe3, 0xe3, 0xa2, 0x1f, 0x70, 0xad, 0x0d, 0xd1, 0x14, 0x50, 0x2f, 0xf4, 0x3f, 0x13, 0xa8,
	0xb6, 0x73, 0xdb, 0xbc, 0x60, 0x47, 0xde, 0x87, 0xd5, 0x3f, 0x9d, 0x18, 0x6d, 0x0f, 0xa4, 0x00,
	0xca, 0x2a, 0xab, 0xdb, 0x6d, 0x73, 0x8f, 0xe3, 0x7b, 0xdc, 0xb8, 0x76, 0x28, 0x00, 0xd5, 0x6d,
	0x25, 0x9f, 0x9a, 0x3c, 0x42, 0x6d, 0xf0, 0xe4, 0xf8, 0x8a, 0x7e, 0xe0, 0x80, 0x1b, 0x12, 0x9a,
	0x85, 0x7d, 0x0f, 0xdb, 0x00, 0x0b, 0x1d, 0x14, 0xe1, 0x66, 0x00, 0x0a, 0xcc, 0xbb, 0xad, 0xaa,
	0x98, 0xcf, 0x7b, 0x07, 0xd4, 0xf8, 0x12, 0xa8, 0xa1, 0x2a, 0x3e, 0x1c, 0x06, 0x00, 0xe2, 0x01,
	0x2a, 0x09, 0xe2, 0xa5, 0xfb, 0x74, 0x5f, 0x1e, 0x4a, 0x5c, 0x6e, 0x64, 0x3a, 0x97, 0xad, 0x30,
	0x4c, 0x28, 0xd7, 0xdb, 0x4c, 0xaa, 0xb9, 0xd2, 0xd9, 0x6d, 0x77, 0x04, 0x60, 0xa8, 0x0d, 0xeb,
	0xf4, 0x3c, 0x42, 0x4c, 0x8a, 0x09, 0xd2, 0x18, 0x58, 0x6e, 0x88, 0xf4, 0xa7, 0xe7, 0xe0, 0x8a,
	0x40, 0xf2, 0x8e, 0xe0, 0x38, 0x73, 0x90, 0x48, 0x24, 0x3d, 0x35, 0x30, 0x6f, 0x60, 0x53, 0xd8,
	0xb3, 0xd1, 0x3a, 0x87, 0x14, 0x92, 0xb1, 0x69, 0xa1, 0xf1, 0xe9, 0xe3, 0xc5, 0xb3, 0x44, 0x4c,
	0xce, 0xa9, 0x0c, 0x54, 0x5d, 0xcd, 0x39, 0x43, 0xce, 0x69, 0xb2, 0xdf, 0x93, 0xf9, 0x52, 0x53,
	0x4e, 0xd6, 0x65, 0xb5, 0x0e, 0x61, 0x86, 0xd5, 0x80, 0xe8, 0xb6, 0xac, 0x4a, 0xb1, 0x01, 0x9c,
	0xcd, 0x80, 0x44, 0xda, 0x1c, 0x19, 0x36, 0x0e, 0x8d, 0xa1, 0x3c, 0x8d, 0x38, 0xdf, 0x6d, 0xcb,
	0x3b, 0x56, 0x07, 0xe0, 0xcd, 0xe1, 0xc8, 0xe2, 0x26, 0xa3, 0xf7, 0xcd, 0x64, 0xc3, 0x47, 0x6d,
	0x5e, 0x62, 0x44, 0xf4, 0x06, 0x92, 0xae, 0x8b, 0x4d, 0x7c, 0x9a, 0xd2, 0xbe, 0x20, 0xce, 0x2b,
	0x34, 0xe7, 0x28, 0xe4, 0x6e, 0x89, 0x42, 0x5e, 0xfb, 0xcb, 0x94, 0x38, 0xdf, 0xae, 0x9b, 0x83,
	0x04, 0x4c, 0x5f, 0x66, 0x7e, 0x79, 0xde, 0x28, 0xd6, 0x33, 0xf1, 0xb5, 0xcd, 0xe7, 0x8b, 0x59,
	0x33, 0x53, 0x7c, 0xa3, 0x54, 0x29, 0xd4, 0xb6, 0x77, 0xcc, 0x62, 0x3e, 0x53, 0xad, 0x81, 0x51,
	0xee, 0xee, 0x82, 0xd2, 0x16, 0x4a, 0xbb, 0xd5, 0xec, 0xdb, 0x38, 0x87, 0x5f, 0x26, 0xd3, 0x13,
	0x3b, 0x67, 0x92, 0x37, 0x9c, 0x39, 0x10, 0x60, 0xf0, 0xc8, 0xc1, 0x7a, 0x42, 0x8a, 0x5c, 0x1b,
	0x9e, 0x8c, 0x75, 0x88, 0x42, 0xce, 0x28, 0x1b, 0x9f, 0x8b, 0xf6, 0xa3, 0x94, 0xb8, 0x98, 0x34,
	0xd3, 0x6c, 0x59, 0x61, 0x2b, 0x7d, 0x85, 0x6d, 0x5d, 0x48, 0xda, 0x9a, 0x83, 0xeb, 0x38, 0x7a,
	0xa2, 0x6d, 0xac, 0xd8, 0x34, 0x46, 0x2c, 0x87, 0xcd, 0xd5, 0x42, 0xb5, 0x96, 0xdf, 0xad, 0x99,
	0xdb, 0x99, 0xea, 0xb6, 0x59, 0x2d, 0xed, 0x55, 0x72, 0x79, 0xb3, 0x50, 0x36, 0x33, 0x5b, 0x5b,
	0x95, 0x7c, 0xb5, 0x9a, 0xad, 0x62, 0x27, 0xa5, 0x1c, 0x24, 0x21, 0x99, 0x2c, 0x39, 0x34, 0xb2,
	0xa8, 0xbc, 0x3f, 0x74, 0x64, 0x27, 0x1a, 0x0f, 0x79, 0x62, 0xe0, 0x26, 0x33, 0xe0, 0xa4, 0xe8,
	0xc8, 0x71, 0xe4, 0x56, 0x54, 0xbc, 0x52, 0x5c, 0x0e, 0x7a, 0xbc, 0xb7, 0x85, 0x3e, 0x62, 0xbb,
	0x3d, 0xb0, 0x91, 0xb7, 0x41, 0x8d, 0x67, 0xfa, 0x69, 0xee, 0xe2, 0x88, 0xfd, 0xad, 0x30, 0xfd,
	0x52, 0x1d, 0x26, 0x17, 0x68, 0x62, 0x9f, 0x6a, 0x82, 0x15, 0x97, 0x15, 0xd6, 0x0b, 0xa3, 0xb8,
	0xed, 0x9c, 0xd0, 0xbe, 0x93, 0x12, 0xd3, 0x83, 0xde, 0xfb, 0x05, 0x8e, 0xd2, 0x0b, 0xc6, 0x48,
	0xff, 0x96, 0x0d, 0x21, 0xda, 0xdf, 0x8d, 0x9b, 0x6d, 0x04, 0x9f, 0x7b, 0xe0, 0x49, 0x26, 0x12,
	0xc6, 0xbd, 0x20, 0x6d, 0x2a, 0x0e, 0xbe, 0xc1, 0x90, 0x82, 0xe1, 0x4b, 0x1f, 0x09, 0xcc, 0x8e,
	0x1c, 0xa9, 0x35, 0x7b, 0x01, 0x4f, 0x48, 0x3c, 0x2b, 0x08, 0x18, 0x03, 0x65, 0x9a, 0x03, 0x71,
	0x74, 0xd9, 0xf8, 0x19, 0xda, 0xbf, 0xa6, 0x84, 0xd6, 0x8d, 0x9b, 0xbe, 0xe1, 0x74, 0x60, 0x89,
	0x2d, 0xbc, 0x68, 0x1c, 0xef, 0x07, 0xe5, 0x1c, 0xf2, 0xc3, 0xd4, 0x8e, 0xe5, 0xc9, 0xaa, 0x12,
	0x3a, 0x6d, 0xe2, 0xbf, 0xdc, 0xcb, 0xc6, 0xa6, 0xd3, 0xd1, 0xca, 0x8e, 0x30, 0x94, 0x67, 0x82,
	0xe3, 0x91, 0xb3, 0x03, 0x67, 0x74, 0x72, 0xa0, 0xca, 0xa7, 0x0a, 0xae, 0x41, 0x8a, 0xe9, 0xd5,
	0xc4, 0x6c, 0xb3, 0x2a, 0x47, 0x32, 0x72, 0x22, 0x40, 0x17, 0x9a, 0x3e, 0x01, 0x3a, 0x9f, 0x04,
	0x70, 0xcf, 0x7a, 0xb4, 0xa9, 0xaf, 0xad, 0x1a, 0x6b, 0xf8, 0x6f, 0xf5, 0xd6, 0xfa, 0x1d, 0xed,
	0x07, 0x29, 0xf1, 0x12, 0xe1, 0xa9, 0x82, 0x1f, 0x33, 0x31, 0x00, 0x30, 0xbb, 0x92, 0x98, 0xc9,
	0xbe, 0xe8, 0x45, 0x76, 0xe7, 0x37, 0x52, 0x80, 0xea, 0xc5, 0xcc, 0xf0, 0x81, 0xf2, 0x70, 0xbd,
	0xe2, 0x71, 0xd8, 0xaf, 0x99, 0xb8, 0x2a, 0x13, 0x05, 0xd8, 0xd7, 0x8b, 0x7b, 0x76, 0x0a, 0x00,
	0x6c, 0x33, 0xd0, 0x81, 0x16, 0xf6, 0xc3, 0xe1, 0xf4, 0x90, 0xae, 0xab, 0x4c, 0x22, 0x5f, 0x59,
	0xec, 0x52, 0x02, 0x89, 0xb8, 0xb0, 0x33, 0xf8, 0xb9, 0x34, 0xec, 0xfd, 0xfb, 0x94, 0x98, 0x0f,
	0xc3, 0xf6, 0xa8, 0x85, 0x2f, 0xb1, 0x85, 0x7f, 0x41, 0x16, 0x0a, 0xd0, 0xa9, 0xa1, 0x39, 0xef,
	0xa7, 0x1e, 0x10, 0x3d, 0x57, 0xb3, 0xd0, 0x9b, 0x4c, 0xab, 0x02, 0x67, 0x45, 0xf1, 0xa9, 0x70,
	0x14, 0xcf, 0x8e, 0x73, 0xea, 0x18, 0xc2, 0x62, 0xf2, 0x46, 0x44, 0x4d, 0xa9, 0xa5, 0xa1, 0x25,
	0x00, 0x38, 0x54, 0x94, 0xc2, 0x76, 0xbb, 0x2d, 0x0a, 0x26, 0x72, 0x27, 0xad, 0x52, 0xad, 0xd6,
	0x90, 0x5b, 0x84, 0xbd, 0x2e, 0x51, 0x3f, 0x9a, 0x78, 0xfc, 0x24, 0x25, 0x66, 0x1e, 0xa1, 0x33,
	0x90, 0x7d, 0xc0, 0xcb, 0x1c, 0x3d, 0x97, 0x8d, 0x13, 0xfa, 0x85, 0x98, 0xb6, 0x7f, 0x9e, 0xfe,
	0xa0, 0xdb, 0xab, 0xc3, 0x2d, 0x9f, 0xa3, 0x4d, 0x50, 0xb3, 0x6e, 0x5f, 0x4d, 0xc7, 0xf5, 0xa6,
	0x83, 0x6e, 0x3b, 0x50, 0xae, 0x92, 0x73, 0x3b, 0x7e, 0x6c, 0x44, 0x14, 0x88, 0x3e, 0x31, 0x63,
	0x09, 0xda, 0x89, 0x81, 0xb4, 0xf6, 0x8d, 0x09, 0x71, 0xc5, 0x65, 0x16, 0x64, 0x8e, 0x16, 0xf9,
	0xf4, 0x2b, 0x89, 0xa9, 0xf3, 0x7f, 0xd1, 0x3e, 0xfe, 0x3d, 0x75, 0x52, 0x71, 0x64, 0xb5, 0xf1,
	0x8f, 0x13, 0xca, 0x63, 0x82, 0x9b, 0x50, 0x71, 0x8c, 0xdb, 0x38, 0xfa, 0x61, 0x35, 0xde, 0xe9,
	0x01, 0x62, 0x63, 0x0f, 0x32, 0x5a, 0x27, 0xa8, 0xfb, 0xe9, 0xd5, 0x50, 0x1d, 0x03, 0x25, 0xbf,
	0x45, 0xd9, 0xad, 0x88, 0x2b, 0x3c, 0xcd, 0xbb, 0x74, 0x5a, 0xd6, 0xa1, 0xeb, 0x07, 0xf1, 0x19,
	0x82, 0xd4, 0x75, 0x1c, 0xb4, 0x41, 0x08, 0x20, 0x48, 0x6b, 0x11, 0xca, 0x54, 0x50, 0x79, 0x1a,
	0xf8, 0xb7, 0xee, 0x7a, 0x86, 0xf6, 0xe3, 0x09, 0x31, 0x8f, 0xb0, 0x36, 0x15, 0x6b, 0x96, 0x4d,
	0xc6, 0xb5, 0x64, 0x07, 0xf6, 0x47, 0x13, 0x38, 0x82, 0x3f, 0x98, 0xd8, 0xf2, 0xd1, 0x10, 0xb1,
	0xcd, 0x5e, 0xd8, 0xa6, 0x93, 0x1d, 0xa2, 0xec, 0xb5, 0xd1, 0xfe, 0x82, 0x1b, 0x05, 0x6e, 0x2d,
	0x71, 0xf2, 0x8d, 0x38, 0xa1, 0x13, 0x04, 0x72, 0x84, 0x4f, 0x2b, 0x4c, 0xe3, 0xc2, 0x3d, 0x18,
	0x31, 0x86, 0x09, 0xbe, 0x1e, 0xf3, 0x79, 0x29, 0x96, 0x0e, 0x1d, 0xaa, 0x64, 0x68, 0x0e, 0xa0,
	0x78, 0x94, 0x46, 0x41, 0x65, 0x7c, 0x4a, 0x71, 0x8c, 0x50, 0xdc, 0x78, 0x6d, 0x49, 0xc2, 0x10,
	0x18, 0x54, 0xd3, 0x64, 0xb6, 0xc6, 0x5d, 0x43, 0xcc, 0xa0, 0x12, 0x55, 0x9e, 0x0a, 0x23, 0x1b,
	0x9a, 0x40, 0x1a, 0x3d, 0xea, 0x77, 0xc9, 0x72, 0x76, 0x75, 0xf1, 0x8e, 0xa1, 0x7d, 0x37, 0x25,
	0x2e, 0x74, 0x1b, 0xa6, 0x25, 0x19, 0x3d, 0xdd, 0xe5, 0xe9, 0xc2, 0x85, 0xf5, 0x4b, 0xc7, 0xfa,
	0xf0, 0x3c, 0x28, 0xec, 0xe6, 0xb3, 0xc3, 0xa9, 0x50, 0x86, 0x6b, 0xb6, 0x99, 0x2b, 0x96, 0xaa,
	0x79, 0x2e, 0xe2, 0xd9, 0xb7, 0x88, 0xf4, 0xe6, 0x55, 0x13, 0x65, 0x8d, 0x4c, 0x02, 0x54, 0x78,
	0x8d, 0xf5, 0xeb, 0x86, 0x9e, 0xed, 0x0f, 0x5e, 0x42, 0xd4, 0x72, 0xe5, 0xe4, 0x29, 0x63, 0x89,
	0xdd, 0xf6, 0x89, 0xaa, 0xa3, 0xf0, 0xcd, 0xd2, 0x6a, 0x65, 0xa5, 0x1a, 0x4b, 0x3c, 0x75, 0x7c,
	0x50, 0xb0, 0x09, 0xfd, 0x77, 0x69, 0x8c, 0x35, 0x1c, 0x78, 0x30, 0x97, 0xa3, 0xb1, 0x84, 0xba,
	0xac, 0x2c, 0x3a, 0x69, 0x14, 0x71, 0xc9, 0xb6, 0xba, 0x96, 0x0d, 0xbc, 0x37, 0x29, 0x14, 0x3a,
	0xb2, 0xa7, 0x59, 0x4e, 0x06, 0xd2, 0x0a, 0xe4, 0xdf, 0x28, 0x70, 0xca, 0xe9, 0xc3, 0x35, 0xcc,
	0xe9, 0xd5, 0xa3, 0xc3, 0x81, 0xac, 0x7c, 0x11, 0x74, 0xf5, 0x04, 0x99, 0x66, 0x14, 0x35, 0xeb,
	0x26, 0x3a, 0x71, 0x07, 0xc4, 0xe3, 0x55, 0x9a, 0x51, 0x51, 0xc7, 0xb0, 0x4f, 0x53, 0xe2, 0x64,
	0xc3, 0x40, 0x88, 0xbb, 0x12, 0xf9, 0x2b, 0x4d, 0x37, 0x08, 0xa3, 0x95, 0x7a, 0x5f, 0xa2, 0xca,
	0xa0, 0x5b, 0x44, 0x1f, 0x30, 0xd1, 0xa1, 0xde, 0xe5, 0xec, 0xda, 0xca, 0xc6, 0xea, 0x48, 0xf3,
	0x42, 0xe3, 0x6a, 0x52, 0x65, 0x53, 0x0f, 0xf0, 0x5b, 0x80, 0xec, 0xee, 0x43, 0x77, 0x14, 0xb2,
	0x6f, 0x32, 0x64, 0x77, 0x08, 0xb1, 0xcb, 0xf7, 0x0b, 0x43, 0xc4, 0xfe, 0x1a, 0x41, 0xb4, 0x44,
	0x23, 0xab, 0xed, 0x36, 0xe2, 0x24, 0xe1, 0x26, 0x79, 0x1c, 0x92, 0x64, 0x85, 0x8e, 0xdf, 0x3e,
	0x1d, 0xa0, 0xee, 0x87, 0x91, 0xca, 0x8b, 0xb6, 0xcc, 0xe5, 0xe4, 0x98, 0x41, 0xfb, 0xcd, 0x94,
	0x78, 0x8e, 0x8a, 0x07, 0xc8, 0x86, 0x09, 0x0c, 0x31, 0x13, 0x12, 0xa5, 0x55, 0x2b, 0x6c, 0xd5,
	0xdb, 0xb0, 0xea, 0x32, 0x34, 0xde, 0x77, 0xfa, 0x19, 0xaf, 0x91, 0x80, 0x64, 0xd8, 0xb7, 0x35,
	0xda, 0x26, 0x28, 0x88, 0x8f, 0xcd, 0xb1, 0xe2, 0x28, 0x3b, 0x6e, 0xef, 0x68, 0xba, 0x6a, 0x05,
	0x71, 0x51, 0x51, 0x58, 0x0b, 0x27, 0x65, 0x86, 0x08, 0x0f, 0x27, 0x6d, 0x24, 0x1d, 0x7d, 0x8d,
	0xde, 0x12, 0x49, 0x6e, 0x4e, 0x33, 0x18, 0xbf, 0x4a, 0x4b, 0x0c, 0x7d, 0xd7, 0x8f, 0x14, 0x93,
	0xf3, 0xfa, 0xd4, 0xfc, 0x90, 0xa8, 0xb9, 0xc1, 0xc4, 0x9f, 0xc7, 0x22, 0xb7, 0x78, 0x0f, 0xf4,
	0x96, 0xe9, 0xc6, 0x76, 0x82, 0x78, 0x9d, 0x3a, 0xf1, 0x97, 0x03, 0xff, 0x92, 0x98, 0xb3, 0xc0,
	0x6b, 0x4d, 0xa7, 0x7b, 0x20, 0x45, 0xad, 0xb1, 0xa8, 0x2f, 0x41, 0xd4, 0x9d, 0x6a, 0xdf, 0xb3,
	0x5b, 0x01, 0xb0, 0xe1, 0x57, 0x1c, 0x3d, 0x47, 0x6f, 0x3c, 0xf4, 0x4c, 0xb9, 0x90, 0xd3, 0xf3,
	0xe5, 0x37, 0x80, 0x8d, 0xd4, 0x57, 0x86, 0x32, 0xd7, 0x39, 0xa2, 0x55, 0xfc, 0x69, 0xdb, 0x42,
	0xa3, 0xfd, 0xf1, 0xf6, 0x86, 0x8c, 0x69, 0x92, 0x5b, 0xbf, 0x9b, 0x90, 0x7a, 0x5d, 0x71, 0x25,
	0xbd, 0xd0, 0x18, 0x4e, 0x19, 0xda, 0x56, 0xcf, 0xa3, 0x9a, 0xaa, 0x40, 0x84, 0x03, 0x16, 0xd9,
	0x77, 0x65, 0x28, 0xa9, 0xeb, 0x03, 0x4a, 0xfa, 0xd2, 0x63, 0xeb, 0xf2, 0x8d, 0x01, 0x3c, 0x76,
	0x45, 0x9e, 0xd6, 0xe0, 0xb0, 0xca, 0xbc, 0x0a, 0x5a, 0x5e, 0xaa, 0x38, 0x4d, 0x27, 0x60, 0x46,
	0x02, 0x37, 0x24, 0xce, 0x94, 0xa5, 0xe9, 0x72, 0x9d, 0xd6, 0x15, 0xcf, 0x0d, 0x35, 0x48, 0x1b,
	0x4c, 0x69, 0x83, 0x54, 0x74, 0x9b, 0x15, 0xbd, 0x49, 0x8a, 0x06, 0x2a, 0x8a, 0xbc, 0x2c, 0xc7,
	0xab, 0x88, 0xed, 0x8e, 0x28, 0xe2, 0xca, 0x21, 0xf7, 0x92, 0x4b, 0xee, 0x25, 0x0e, 0x47, 0xed,
	0x93, 0x09, 0x31, 0x7d, 0x18, 0x34, 0xa5, 0xf8, 0x3b, 0x2c, 0xfe, 0x7b, 0x13, 0xdf, 0x46, 0x42,
	0xec, 0x07, 0x4d, 0x3c, 0x11, 0x39, 0x8f, 0x22, 0x08, 0xfd, 0xbd, 0x89, 0x18, 0x5e, 0x51, 0x73,
	0x78, 0xae, 0xa2, 0xee, 0xc9, 0xe9, 0x42, 0xcc, 0x0a, 0x09, 0x45, 0xea, 0x5c, 0x94, 0x22, 0x7f,
	0x38, 0x1b, 0x3e, 0xce, 0x29, 0x69, 0xb5, 0x1b, 0xfa, 0xed, 0x21, 0xa9, 0x6a, 0x49, 0x24, 0xf6,
	0x9b, 0x43, 0x52, 0x9a, 0x14, 0x69, 0x45, 0x11, 0x58, 0xa8, 0x13, 0x4b, 0x8d, 0x6f, 0x78, 0xa0,
	0x3b, 0x34, 0x19, 0xa2, 0xa5, 0x27, 0x98, 0x47, 0xd6, 0x29, 0xe1, 0xc7, 0x6a, 0xc3, 0x4d, 0xae,
	0xdd, 0xd1, 0xc8, 0x24, 0xb1, 0x27, 0x2b, 0x35, 0x2a, 0x8b, 0xeb, 0xc9, 0xf7, 0x93, 0xed, 0xbe,
	0x5c, 0xc7, 0xef, 0x15, 0x39, 0xc9, 0xbb, 0xf5, 0x15, 0xae, 0x9a, 0x08, 0x92, 0x8e, 0xf1, 0xe1,
	0xc7, 0x8b, 0x29, 0x6d, 0x5f, 0xcc, 0xbb, 0x5d, 0x6a, 0x1f, 0x0f, 0xa8, 0x33, 0x94, 0x87, 0xb8,
	0xc1, 0x87, 0xf8, 0x15, 0x0a, 0xfd, 0x3d, 0x40, 0x6c, 0xdc, 0x83, 0x0d, 0xfa, 0x00, 0xea, 0xf5,
	0x0b, 0xdd, 0xd1, 0x9e, 0xf2, 0xbd, 0x8f, 0x17, 0x67, 0xe5, 0x5b, 0x18, 0xfe, 0x49, 0x90, 0xf9,
	0x6c, 0xd3, 0x39, 0x02, 0x58, 0x9a, 0x91, 0x15, 0x3e, 0x0c, 0xcd, 0xa6, 0xe3, 0x34, 0x88, 0x45,
	0x99, 0x0d, 0xa7, 0x6d, 0xf5, 0xd3, 0x77, 0x19, 0x2e, 0x69, 0xc4, 0xf4, 0x8b, 0x04, 0x07, 0xe0,
	0xbb, 0xae, 0xdf, 0x70, 0x63, 0xe4, 0x8d, 0x17, 0x73, 0x34, 0x4b, 0x31, 0x3a, 0x8b, 0x89, 0x41,
	0x4a, 0x02, 0x13, 0xb7, 0xfb, 0x71, 0x0f, 0x35, 0x3e, 0x06, 0xd2, 0xbe, 0x9e, 0x78, 0x81, 0xff,
	0xc5, 0x04, 0x95, 0x72, 0xa1, 0xd2, 0x91, 0xe5, 0x8d, 0x67, 0x11, 0x6a, 0x80, 0x37, 0x18, 0xcd,
	0xe8, 0xea, 0x0d, 0x3e, 0xf9, 0x81, 0x81, 0x29, 0x1e, 0xce, 0xf1, 0x7b, 0x79, 0xd0, 0x3e, 0xd4,
	0x9c, 0xe3, 0xac, 0xaa, 0x6b, 0xd1, 0x84, 0xf3, 0xf8, 0x10, 0x45, 0xfb, 0x25, 0x91, 0x56, 0x13,
	0x27, 0x1a, 0xb2, 0x01, 0x20, 0x13, 0x43, 0xa6, 0xd7, 0xb8, 0xf8, 0x9d, 0x37, 0x2a, 0xb8, 0xae,
	0xa2, 0x39, 0xbb, 0x0c, 0xd3, 0x5e, 0xa1, 0x0b, 0x7a, 0xd1, 0xed, 0xb8, 0xd1, 0xf1, 0xaf, 0x04,
	0x12, 0x03, 0x25, 0x43, 0xfb, 0x8a, 0x98, 0xa1, 0x81, 0x98, 0x49, 0xc7, 0x93, 0xde, 0xa4, 0xfd,
	0x65, 0x6f, 0xe0, 0xf1, 0x97, 0x0b, 0x32, 0xae, 0x68, 0xe0, 0xcd, 0x19, 0x23, 0x3d, 0xa6, 0x42,
	0x48, 0x45, 0x90, 0xa1, 0xbd, 0x24, 0x84, 0x8d, 0xe6, 0x08, 0xcb, 0xcc, 0x7a, 0x3f, 0xfd, 0x65,
	0xf6, 0xf9, 0x3c, 0x1e, 0x3f, 0x9f, 0xa3, 0xab, 0xbe, 0xc4, 0x3b, 0xed, 0xa1, 0xd0, 0x50, 0xba,
	0x7b, 0x8d, 0x38, 0x89, 0xd1, 0x6f, 0xf4, 0x3a, 0xe9, 0xaf, 0x0c, 0x3f, 0xb8, 0xc8, 0xd1, 0xcc,
	0x15, 0xd7, 0xb8, 0x78, 0xd2, 0xca, 0x51, 0xc8, 0x61, 0x0f, 0x96, 0xf9, 0x50, 0x0b, 0x83, 0xb0,
	0x8c, 0xc3, 0x71, 0xb0, 0x9e, 0xb6, 0xe8, 0x07, 0xda, 0x6d, 0x90, 0x03, 0x27, 0xb4, 0x03, 0x97,
	0x79, 0x75, 0xda, 0x66, 0x2d, 0xcf, 0x43, 0xcb, 0x42, 0x46, 0x4f, 0xdc, 0x18, 0x1d, 0x4f, 0x5f,
	0x15, 0xb3, 0x00, 0x5f, 0x0b, 0xcd, 0x24, 0x07, 0x6f, 0x83, 0x1f, 0x12, 0x1f, 0xa1, 0x9e, 0xd6,
	0xf8, 0xb2, 0xb6, 0x8a, 0x8d, 0xf2, 0x16, 0xf8, 0xbe, 0x43, 0xf7, 0x37, 0xe7, 0xb6, 0x24, 0x53,
	0x59, 0xc9, 0xd1, 0x9d, 0xec, 0x1c, 0x96, 0x4f, 0xf1, 0x9f, 0x94, 0x14, 0x9b, 0x5b, 0x08, 0xa1,
	0x19, 0x32, 0x9a, 0x37, 0xf7, 0xa3, 0xc7, 0x8b, 0x73, 0xf4, 0xa3, 0x16, 0x67, 0xce, 0x3f, 0x3e,
	0x5e, 0x9c, 0x65, 0xc2, 0x22, 0x65, 0xfc, 0x54, 0xfd, 0xac, 0xc8, 0xf7, 0xca, 0xef, 0x7f, 0xb0,
	0x94, 0xfa, 0x87, 0x0f, 0x96, 0x26, 0x96, 0xee, 0x8a, 0xa7, 0xe8, 0xb2, 0x44, 0x4a, 0x7a, 0x1f,
	0x47, 0x9f, 0x3e, 0x4c, 0xd1, 0x8b, 0x3b, 0x87, 0x07, 0xf3, 0x17, 0x54, 0xc3, 0x92, 0x58, 0x40,
	0xcc, 0x6c, 0xe9, 0xd7, 0x53, 0xe2, 0x29, 0x79, 0x6d, 0xaf, 0x4b, 0x95, 0xbb, 0xe2, 0xbc, 0xab,
	0x5d, 0x14, 0x33, 0xc7, 0xde, 0xb0, 0x69, 0x0b, 0x62, 0x46, 0x15, 0x3f, 0xb7, 0xcb, 0x43, 0xfc,
	0xe1, 0x97, 0x41, 0xda, 0xa5, 0xc1, 0xfb, 0x60, 0x26, 0xd1, 0x67, 0x70, 0x77, 0x4a, 0x5b, 0x1e,
	0x0c, 0x7c, 0xa4, 0x0d, 0x93, 0xa7, 0xd8, 0xf0, 0x8e, 0x98, 0x4d, 0xda, 0x3d, 0xa2, 0x2b, 0x75,
	0xaa, 0xae, 0x89, 0x13, 0x75, 0x9d, 0x39, 0x45, 0x57, 0x41, 0x5c, 0x49, 0x5c, 0x92, 0x7b, 0x2e,
	0x78, 0x4d, 0xff, 0xa4, 0x4d, 0x2f, 0x0e, 0x27, 0x6f, 0xf2, 0xb3, 0xaa, 0xf3, 0x46, 0xe2, 0xd9,
	0xe5, 0xdf, 0x3e, 0x2b, 0x66, 0x13, 0x93, 0x1f, 0xad, 0x23, 0x3e, 0x63, 0x4e, 0x35, 0x9f, 0x5a,
	0x28, 0x7c, 0xfb, 0x83, 0xa5, 0xfc, 0x96, 0x24, 0x99, 0xc7, 0x1a, 0xd9, 0xe1, 0x0b, 0x0c, 0x45,
	0xbf, 0x15, 0x14, 0x9d, 0x3c, 0xf8, 0x35, 0x90, 0x2c, 0xe9, 0x11, 0x75, 0x95, 0xd2, 0xde, 0xee,
	0x16, 0xfe, 0xcd, 0x16, 0x76, 0xe7, 0x27, 0x16, 0x76, 0xa0, 0xa8, 0x70, 0x4c, 0x11, 0x92, 0x80,
	0x48, 0xa8, 0x15, 0x20, 0x29, 0xec, 0xbe, 0xdd, 0x96, 0x2d, 0x8a, 0x7c, 0xb5, 0xc3, 0x55, 0xfc,
	0xc9, 0xf3, 0xaf, 0xb7, 0xc5, 0xe2, 0x88, 0xb2, 0x7b, 0xd8, 0x5a, 0x1e, 0xbb, 0xab, 0xe4, 0xab,
	0x65, 0xec, 0x2c, 0x3f, 0x7f, 0x66, 0xe1, 0x75, 0x68, 0x7c, 0x6d, 0x7c, 0x6b, 0xe3, 0xdb, 0x02,
	0x8a, 0xd0, 0xbe, 0x86, 0x3c, 0x9f, 0x87, 0x04, 0x3d, 0xf1, 0xdc, 0x69, 0xb3, 0xb2, 0xf9, 0xc9,
	0x85, 0x2a, 0x14, 0x94, 0xa8, 0x46, 0x58, 0xfa, 0x70, 0x82, 0x25, 0x27, 0x51, 0xd0, 0x93, 0x1c,
	0x7a, 0x4a, 0x8c, 0x94, 0x54, 0x69, 0x74, 0xee, 0x6b, 0xb7, 0xd0, 0x19, 0x78, 0xc3, 0xf1, 0x15,
	0x7d, 0xfa, 0x73, 0x82, 0xd3, 0x8a, 0xa5, 0xcc, 0xd6, 0xfc, 0xd4, 0xc2, 0x5d, 0x68, 0x5c, 0xff,
	0x9c, 0xde, 0x92, 0xaf, 0x0b, 0xc8, 0x0a, 0x43, 0x7b, 0x53, 0x3c, 0x3b, 0x7a, 0x5a, 0xf9, 0x07,
	0x74, 0x58, 0xd5, 0x7c, 0x65, 0x3f, 0x5f, 0xa9, 0xce, 0x9f, 0x5d, 0xb8, 0x01, 0xc1, 0x2f, 0x9f,
	0x2c, 0x58, 0x79, 0x7d, 0x70, 0xf2, 0x05, 0x71, 0x69, 0xd4, 0xcd, 0x99, 0xdd, 0xad, 0xd2, 0xce,
	0xfc, 0xb9, 0x85, 0x55, 0xc8, 0xb8, 0x39, 0xee, 0x61, 0x55, 0xac, 0x68, 0xfa, 0xa9, 0x03, 0x43,
	0x1a, 0x00, 0xe3, 0x18, 0xc2, 0xdf, 0x12, 0xcf, 0x9c, 0x64, 0x56, 0x2d, 0x53, 0xbd, 0x5f, 0x9d,
	0x9f, 0x5e, 0x78, 0x0d, 0x02, 0x37, 0x4e, 0x13, 0x98, 0x18, 0x9c, 0x8e, 0xd4, 0x49, 0x63, 0xf9,
	0x83, 0x33, 0x10, 0xfd, 0xa4, 0x21, 0xa8, 0x66, 0x8b, 0x9f, 0x71, 0x0c, 0x8a, 0x44, 0xb9, 0x05,
	0x63, 0x5e, 0xdd, 0xe6, 0xe9, 0xe6, 0x88, 0xff, 0x24, 0x55, 0x0f, 0xfd, 0x5e, 0x60, 0x3b, 0x89,
	0x59, 0x33, 0xc5, 0xcf, 0x17, 0x7f, 0x36, 0x25, 0x26, 0x0e, 0xd2, 0x2c, 0x97, 0x2a, 0x35, 0x64,
	0xcb, 0x97, 0xa0, 0xed, 0xce, 0xe7, 0xd7, 0x26, 0xe3, 0x0b, 0x00, 0x64, 0x68, 0x79, 0xa1, 0x9f,
	0xaa, 0x76, 0xaf, 0x52, 0x40, 0x6e, 0x5c, 0x85, 0xfc, 0x67, 0xc7, 0xe5, 0xe3, 0xa6, 0x4e, 0x5f,
	0x7a, 0x18, 0xda, 0x03, 0xb1, 0x7c, 0xaa, 0x98, 0xdc, 0x5e, 0xb5, 0x56, 0xda, 0x31, 0xb7, 0xf3,
	0x99, 0xad, 0x7c, 0x05, 0xb9, 0x70, 0x0d, 0x02, 0x5f, 0x1c, 0x15, 0x68, 0xc5, 0xad, 0x42, 0x62,
	0x7e, 0x6b, 0x2c, 0xff, 0xdb, 0xa4, 0x98, 0x29, 0xd6, 0xef, 0x21, 0xa1, 0xd1, 0xdb, 0xa3, 0x88,
	0x3f, 0x53, 0x46, 0x04, 0x2a, 0xc9, 0x32, 0x1e, 0xcd, 0xc2, 0xee, 0x7e, 0xa6, 0x58, 0xd8, 0x9a,
	0xff, 0xb9, 0x85, 0x45, 0x48, 0x7d, 0x66, 0x30, 0x0d, 0x8c, 0x86, 0x9f, 0xe6, 0x71, 0x5f, 0xa7,
	0xdd, 0x15, 0x4f, 0x8f, 0x3f, 0x4d, 0x4d, 0x3d, 0xfc, 0xb5, 0x80, 0x47, 0x9f, 0x1e, 0x7f, 0x94,
	0x9b, 0xe4, 0x9b, 0x62, 0xa6, 0x5a, 0xd9, 0x57, 0x4b, 0x27, 0xa4, 0x16, 0x45, 0xe9, 0x69, 0xb4,
	0xe2, 0xd2, 0x6b, 0x14, 0x7a, 0x53, 0xc3, 0xe8, 0x8d, 0x0a, 0x3a, 0x0b, 0x0f, 0x99, 0xe5, 0xfc,
	0xee, 0x56, 0x61, 0xf7, 0x8d, 0xf8, 0xf0, 0xaa, 0x83, 0xaf, 0x04, 0xc1, 0x1f, 0x91, 0xdb, 0x72,
	0xc0, 0x22, 0x9f, 0xb8, 0x27, 0x2e, 0x55, 0x8b, 0xa5, 0x07, 0xf4, 0xad, 0x49, 0xa5, 0x66, 0xee,
	0x64, 0xde, 0x62, 0xd0, 0xc5, 0x29, 0xad, 0xe0, 0xc9, 0x1b, 0xd5, 0xf8, 0x55, 0xa0, 0x24, 0xc5,
	0x61, 0xdb, 0x3f, 0xa2, 0xe7, 0x82, 0x88, 0x7a, 0xe6, 0x24, 0xa4, 0x42, 0xf3, 0xf4, 0xe0, 0xe1,
	0xa9, 0x85, 0x25, 0x3c, 0xfc, 0xfc, 0xb1, 0x87, 0x8f, 0x3f, 0x71, 0x47, 0x4c, 0xef, 0x96, 0xcc,
	0x22, 0x47, 0xd1, 0xd9, 0x85, 0x57, 0xf0, 0xc4, 0xd2, 0xae, 0xaf, 0x46, 0x07, 0x3c, 0xb7, 0xa1,
	0x19, 0x86, 0x5c, 0x3f, 0xc4, 0x42, 0xc4, 0xcc, 0x5c, 0x75, 0xaf, 0x5a, 0x8e, 0x3f, 0xc8, 0xc9,
	0x23, 0x99, 0xd7, 0xf1, 0xa8, 0x2a, 0x2e, 0xfc, 0x06, 0x8b, 0xbf, 0xd6, 0xa3, 0x59, 0x10, 0x53,
	0x17, 0x39, 0xaf, 0x3b, 0xc6, 0xf7, 0xb4, 0x4d, 0x31, 0x17, 0x9b, 0x0b, 0x54, 0x80, 0x98, 0x69,
	0x19, 0x16, 0xa7, 0xdb, 0x4c, 0x6f, 0xa6, 0x1c, 0x2d, 0x23, 0x2e, 0xe7, 0x32, 0x65, 0x46, 0x70,
	0x4a, 0x83, 0xc1, 0xb6, 0x67, 0x3e, 0xb7, 0x88, 0xe5, 0x3a, 0xa2, 0xe1, 0xc4, 0x6f, 0x80, 0x40,
	0x3c, 0x4e, 0xfb, 0x0a, 0x68, 0x7d, 0x75, 0x75, 0xfe, 0xd3, 0xd4, 0x67, 0x2c, 0xda, 0x58, 0xbd,
	0x3d, 0xff, 0x7f, 0x67, 0x96, 0x7f, 0x32, 0x21, 0xb4, 0xf1, 0x71, 0x92, 0x56, 0x4c, 0x3e, 0xab,
	0x06, 0x4a, 0x23, 0x1f, 0x3a, 0x21, 0x20, 0xaf, 0x63, 0x1f, 0x2f, 0x55, 0x69, 0x8c, 0xaa, 0x3e,
	0x27, 0x51, 0xa3, 0x9d, 0xf1, 0x19, 0x4e, 0x55, 0x5c, 0x3d, 0x59, 0x5a, 0xb1, 0x94, 0xcb, 0x14,
	0xcd, 0x4a, 0xb5, 0x8c, 0xa0, 0x35, 0x20, 0x6e, 0x79, 0x28, 0xae, 0x3d, 0xfa, 0xd1, 0xca, 0xb8,
	0xd0, 0xfb, 0xe2, 0xb4, 0x99, 0x17, 0xa2, 0x7a, 0x19, 0x02, 0x5f, 0xc9, 0xd1, 0xa0, 0x4a, 0xaf,
	0xd9, 0xdd, 0xe4, 0x00, 0x6b, 0x5c, 0x58, 0x4e, 0x3c, 0x37, 0x26, 0x2c, 0x9b, 0xc9, 0xdd, 0xdf,
	0x2b, 0x9b, 0x74, 0x1d, 0x91, 0xfe, 0x02, 0xa4, 0xc5, 0x9f, 0xb8, 0x74, 0x4f, 0xfc, 0xc4, 0x65,
	0xf9, 0x3b, 0x29, 0xf9, 0x89, 0xcb, 0x31, 0x46, 0x04, 0x4c, 0xb8, 0xc0, 0xc2, 0x55, 0x3e, 0xef,
	0x95, 0x87, 0x87, 0x17, 0x4f, 0x74, 0xe3, 0xc9, 0x60, 0xdc, 0xee, 0x97, 0x95, 0xdc, 0xbd, 0xae,
	0xf6, 0x0b, 0x62, 0x3e, 0xf9, 0xb4, 0x4a, 0x71, 0xde, 0xdc, 0x67, 0x3f, 0x4f, 0x6e, 0xfd, 0xff,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x9d, 0x67, 0xf9, 0x4d, 0x2f, 0x00, 0x00,
}
